 Parser.parse('')
  Parser.parse_stmt('')
   Parser.parse_def('')
    Parser.expect("NAME, 'def'")
     Parser.nexttoken('')
     return (NAME, 'pi')
    return 'def'
    Parser.expect('NAME')
     Parser.nexttoken('')
     return (OPERATOR, '(')
    return 'pi'
    Parser.expect("OPERATOR, '('")
     Parser.nexttoken('')
     return (OPERATOR, ')')
    return '('
    Parser.expect("OPERATOR, ')'")
     Parser.nexttoken('')
     return (OPERATOR, ':')
    return ')'
    Parser.expect("OPERATOR, ':'")
     Parser.nexttoken('')
     return (NEWLINE, '')
    return ':'
    Parser.expect('NEWLINE')
     Parser.nexttoken('')
     return (INDENT, '')
    return ''
    Parser.parse_body('')
     Parser.expect('INDENT')
      Parser.nexttoken('')
      return (NAME, 'k')
     return ''
     Parser.parse_stmt('')
      Parser.parse_simple('')
       Parser.parse_exprs('')
        Parser.parse_expr('')
         Parser.parse_term('')
          Parser.parse_atom('')
           Parser.expect('NAME')
            Parser.nexttoken('')
            return (OPERATOR, ',')
           return 'k'
          return Name('k')
         return Name('k')
        return Name('k')
        Parser.nexttoken('')
        return (NAME, 'a')
        Parser.parse_expr('')
         Parser.parse_term('')
          Parser.parse_atom('')
           Parser.expect('NAME')
            Parser.nexttoken('')
            return (OPERATOR, ',')
           return 'a'
          return Name('a')
         return Name('a')
        return Name('a')
        Parser.nexttoken('')
        return (NAME, 'b')
        Parser.parse_expr('')
         Parser.parse_term('')
          Parser.parse_atom('')
           Parser.expect('NAME')
            Parser.nexttoken('')
            return (OPERATOR, ',')
           return 'b'
          return Name('b')
         return Name('b')
        return Name('b')
        Parser.nexttoken('')
        return (NAME, 'a1')
        Parser.parse_expr('')
         Parser.parse_term('')
          Parser.parse_atom('')
           Parser.expect('NAME')
            Parser.nexttoken('')
            return (OPERATOR, ',')
           return 'a1'
          return Name('a1')
         return Name('a1')
        return Name('a1')
        Parser.nexttoken('')
        return (NAME, 'b1')
        Parser.parse_expr('')
         Parser.parse_term('')
          Parser.parse_atom('')
           Parser.expect('NAME')
            Parser.nexttoken('')
            return (OPERATOR, '=')
           return 'b1'
          return Name('b1')
         return Name('b1')
        return Name('b1')
       return Exprs([Name('k'), Name('a'), Name('b'), Name('a1'), Name('b1')])
       Parser.nexttoken('')
       return (NUMBER, '2')
       Parser.parse_exprs('')
        Parser.parse_expr('')
         Parser.parse_term('')
          Parser.parse_atom('')
           Parser.expect('NUMBER')
            Parser.nexttoken('')
            return (OPERATOR, ',')
           return '2'
          return Number('2')
         return Number('2')
        return Number('2')
        Parser.nexttoken('')
        return (NUMBER, '4')
        Parser.parse_expr('')
         Parser.parse_term('')
          Parser.parse_atom('')
           Parser.expect('NUMBER')
            Parser.nexttoken('')
            return (OPERATOR, ',')
           return '4'
          return Number('4')
         return Number('4')
        return Number('4')
        Parser.nexttoken('')
        return (NUMBER, '1')
        Parser.parse_expr('')
         Parser.parse_term('')
          Parser.parse_atom('')
           Parser.expect('NUMBER')
            Parser.nexttoken('')
            return (OPERATOR, ',')
           return '1'
          return Number('1')
         return Number('1')
        return Number('1')
        Parser.nexttoken('')
        return (NUMBER, '12')
        Parser.parse_expr('')
         Parser.parse_term('')
          Parser.parse_atom('')
           Parser.expect('NUMBER')
            Parser.nexttoken('')
            return (OPERATOR, ',')
           return '12'
          return Number('12')
         return Number('12')
        return Number('12')
        Parser.nexttoken('')
        return (NUMBER, '4')
        Parser.parse_expr('')
         Parser.parse_term('')
          Parser.parse_atom('')
           Parser.expect('NUMBER')
            Parser.nexttoken('')
            return (NEWLINE, '')
           return '4'
          return Number('4')
         return Number('4')
        return Number('4')
       return Exprs([Number('2'), Number('4'), Number('1'), Number('12'), Number('4')])
       Parser.expect('NEWLINE')
        Parser.nexttoken('')
        return (NAME, 'while')
       return ''
      return Assign([Exprs([Name('k'), Name('a'), Name('b'), Name('a1'), Name('b1')])], Exprs([Number('2'), Number('4'), Number('1'), Number('12'), Number('4')]))
     return Assign([Exprs([Name('k'), Name('a'), Name('b'), Name('a1'), Name('b1')])], Exprs([Number('2'), Number('4'), Number('1'), Number('12'), Number('4')]))
     Parser.parse_stmt('')
      Parser.parse_while('')
       Parser.expect("NAME, 'while'")
        Parser.nexttoken('')
        return (NUMBER, '1')
       return 'while'
       Parser.parse_expr('')
        Parser.parse_term('')
         Parser.parse_atom('')
          Parser.expect('NUMBER')
           Parser.nexttoken('')
           return (OPERATOR, ':')
          return '1'
         return Number('1')
        return Number('1')
       return Number('1')
       Parser.expect("OPERATOR, ':'")
        Parser.nexttoken('')
        return (NEWLINE, '')
       return ':'
       Parser.expect('NEWLINE')
        Parser.nexttoken('')
        return (INDENT, '')
       return ''
       Parser.parse_body('')
        Parser.expect('INDENT')
         Parser.nexttoken('')
         return (NAME, 'p')
        return ''
        Parser.parse_stmt('')
         Parser.parse_simple('')
          Parser.parse_exprs('')
           Parser.parse_expr('')
            Parser.parse_term('')
             Parser.parse_atom('')
              Parser.expect('NAME')
               Parser.nexttoken('')
               return (OPERATOR, ',')
              return 'p'
             return Name('p')
            return Name('p')
           return Name('p')
           Parser.nexttoken('')
           return (NAME, 'q')
           Parser.parse_expr('')
            Parser.parse_term('')
             Parser.parse_atom('')
              Parser.expect('NAME')
               Parser.nexttoken('')
               return (OPERATOR, ',')
              return 'q'
             return Name('q')
            return Name('q')
           return Name('q')
           Parser.nexttoken('')
           return (NAME, 'k')
           Parser.parse_expr('')
            Parser.parse_term('')
             Parser.parse_atom('')
              Parser.expect('NAME')
               Parser.nexttoken('')
               return (OPERATOR, '=')
              return 'k'
             return Name('k')
            return Name('k')
           return Name('k')
          return Exprs([Name('p'), Name('q'), Name('k')])
          Parser.nexttoken('')
          return (NAME, 'k')
          Parser.parse_exprs('')
           Parser.parse_expr('')
            Parser.parse_term('')
             Parser.parse_atom('')
              Parser.expect('NAME')
               Parser.nexttoken('')
               return (OPERATOR, '*')
              return 'k'
             return Name('k')
            return Name('k')
            Parser.expect('OPERATOR')
             Parser.nexttoken('')
             return (NAME, 'k')
            return '*'
            Parser.parse_expr('7')
             Parser.parse_term('')
              Parser.parse_atom('')
               Parser.expect('NAME')
                Parser.nexttoken('')
                return (OPERATOR, ',')
               return 'k'
              return Name('k')
             return Name('k')
            return Name('k')
           return Binop(Name('k'), '*', Name('k'))
           Parser.nexttoken('')
           return (NUMBER, '2')
           Parser.parse_expr('')
            Parser.parse_term('')
             Parser.parse_atom('')
              Parser.expect('NUMBER')
               Parser.nexttoken('')
               return (OPERATOR, '*')
              return '2'
             return Number('2')
            return Number('2')
            Parser.expect('OPERATOR')
             Parser.nexttoken('')
             return (NAME, 'k')
            return '*'
            Parser.parse_expr('7')
             Parser.parse_term('')
              Parser.parse_atom('')
               Parser.expect('NAME')
                Parser.nexttoken('')
                return (OPERATOR, '+')
               return 'k'
              return Name('k')
             return Name('k')
            return Name('k')
            Parser.expect('OPERATOR')
             Parser.nexttoken('')
             return (NUMBER, '1')
            return '+'
            Parser.parse_expr('6')
             Parser.parse_term('')
              Parser.parse_atom('')
               Parser.expect('NUMBER')
                Parser.nexttoken('')
                return (OPERATOR, ',')
               return '1'
              return Number('1')
             return Number('1')
            return Number('1')
           return Binop(Binop(Number('2'), '*', Name('k')), '+', Number('1'))
           Parser.nexttoken('')
           return (NAME, 'k')
           Parser.parse_expr('')
            Parser.parse_term('')
             Parser.parse_atom('')
              Parser.expect('NAME')
               Parser.nexttoken('')
               return (OPERATOR, '+')
              return 'k'
             return Name('k')
            return Name('k')
            Parser.expect('OPERATOR')
             Parser.nexttoken('')
             return (NUMBER, '1')
            return '+'
            Parser.parse_expr('6')
             Parser.parse_term('')
              Parser.parse_atom('')
               Parser.expect('NUMBER')
                Parser.nexttoken('')
                return (NEWLINE, '')
               return '1'
              return Number('1')
             return Number('1')
            return Number('1')
           return Binop(Name('k'), '+', Number('1'))
          return Exprs([Binop(Name('k'), '*', Name('k')), Binop(Binop(Number('2'), '*', Name('k')), '+', Number('1')), Binop(Name('k'), '+', Number('1'))])
          Parser.expect('NEWLINE')
           Parser.nexttoken('')
           return (NAME, 'a')
          return ''
         return Assign([Exprs([Name('p'), Name('q'), Name('k')])], Exprs([Binop(Name('k'), '*', Name('k')), Binop(Binop(Number('2'), '*', Name('k')), '+', Number('1')), Binop(Name('k'), '+', Number('1'))]))
        return Assign([Exprs([Name('p'), Name('q'), Name('k')])], Exprs([Binop(Name('k'), '*', Name('k')), Binop(Binop(Number('2'), '*', Name('k')), '+', Number('1')), Binop(Name('k'), '+', Number('1'))]))
        Parser.parse_stmt('')
         Parser.parse_simple('')
          Parser.parse_exprs('')
           Parser.parse_expr('')
            Parser.parse_term('')
             Parser.parse_atom('')
              Parser.expect('NAME')
               Parser.nexttoken('')
               return (OPERATOR, ',')
              return 'a'
             return Name('a')
            return Name('a')
           return Name('a')
           Parser.nexttoken('')
           return (NAME, 'b')
           Parser.parse_expr('')
            Parser.parse_term('')
             Parser.parse_atom('')
              Parser.expect('NAME')
               Parser.nexttoken('')
               return (OPERATOR, ',')
              return 'b'
             return Name('b')
            return Name('b')
           return Name('b')
           Parser.nexttoken('')
           return (NAME, 'a1')
           Parser.parse_expr('')
            Parser.parse_term('')
             Parser.parse_atom('')
              Parser.expect('NAME')
               Parser.nexttoken('')
               return (OPERATOR, ',')
              return 'a1'
             return Name('a1')
            return Name('a1')
           return Name('a1')
           Parser.nexttoken('')
           return (NAME, 'b1')
           Parser.parse_expr('')
            Parser.parse_term('')
             Parser.parse_atom('')
              Parser.expect('NAME')
               Parser.nexttoken('')
               return (OPERATOR, '=')
              return 'b1'
             return Name('b1')
            return Name('b1')
           return Name('b1')
          return Exprs([Name('a'), Name('b'), Name('a1'), Name('b1')])
          Parser.nexttoken('')
          return (NAME, 'a1')
          Parser.parse_exprs('')
           Parser.parse_expr('')
            Parser.parse_term('')
             Parser.parse_atom('')
              Parser.expect('NAME')
               Parser.nexttoken('')
               return (OPERATOR, ',')
              return 'a1'
             return Name('a1')
            return Name('a1')
           return Name('a1')
           Parser.nexttoken('')
           return (NAME, 'b1')
           Parser.parse_expr('')
            Parser.parse_term('')
             Parser.parse_atom('')
              Parser.expect('NAME')
               Parser.nexttoken('')
               return (OPERATOR, ',')
              return 'b1'
             return Name('b1')
            return Name('b1')
           return Name('b1')
           Parser.nexttoken('')
           return (NAME, 'p')
           Parser.parse_expr('')
            Parser.parse_term('')
             Parser.parse_atom('')
              Parser.expect('NAME')
               Parser.nexttoken('')
               return (OPERATOR, '*')
              return 'p'
             return Name('p')
            return Name('p')
            Parser.expect('OPERATOR')
             Parser.nexttoken('')
             return (NAME, 'a')
            return '*'
            Parser.parse_expr('7')
             Parser.parse_term('')
              Parser.parse_atom('')
               Parser.expect('NAME')
                Parser.nexttoken('')
                return (OPERATOR, '+')
               return 'a'
              return Name('a')
             return Name('a')
            return Name('a')
            Parser.expect('OPERATOR')
             Parser.nexttoken('')
             return (NAME, 'q')
            return '+'
            Parser.parse_expr('6')
             Parser.parse_term('')
              Parser.parse_atom('')
               Parser.expect('NAME')
                Parser.nexttoken('')
                return (OPERATOR, '*')
               return 'q'
              return Name('q')
             return Name('q')
             Parser.expect('OPERATOR')
              Parser.nexttoken('')
              return (NAME, 'a1')
             return '*'
             Parser.parse_expr('7')
              Parser.parse_term('')
               Parser.parse_atom('')
                Parser.expect('NAME')
                 Parser.nexttoken('')
                 return (OPERATOR, ',')
                return 'a1'
               return Name('a1')
              return Name('a1')
             return Name('a1')
            return Binop(Name('q'), '*', Name('a1'))
           return Binop(Binop(Name('p'), '*', Name('a')), '+', Binop(Name('q'), '*', Name('a1')))
           Parser.nexttoken('')
           return (NAME, 'p')
           Parser.parse_expr('')
            Parser.parse_term('')
             Parser.parse_atom('')
              Parser.expect('NAME')
               Parser.nexttoken('')
               return (OPERATOR, '*')
              return 'p'
             return Name('p')
            return Name('p')
            Parser.expect('OPERATOR')
             Parser.nexttoken('')
             return (NAME, 'b')
            return '*'
            Parser.parse_expr('7')
             Parser.parse_term('')
              Parser.parse_atom('')
               Parser.expect('NAME')
                Parser.nexttoken('')
                return (OPERATOR, '+')
               return 'b'
              return Name('b')
             return Name('b')
            return Name('b')
            Parser.expect('OPERATOR')
             Parser.nexttoken('')
             return (NAME, 'q')
            return '+'
            Parser.parse_expr('6')
             Parser.parse_term('')
              Parser.parse_atom('')
               Parser.expect('NAME')
                Parser.nexttoken('')
                return (OPERATOR, '*')
               return 'q'
              return Name('q')
             return Name('q')
             Parser.expect('OPERATOR')
              Parser.nexttoken('')
              return (NAME, 'b1')
             return '*'
             Parser.parse_expr('7')
              Parser.parse_term('')
               Parser.parse_atom('')
                Parser.expect('NAME')
                 Parser.nexttoken('')
                 return (NEWLINE, '')
                return 'b1'
               return Name('b1')
              return Name('b1')
             return Name('b1')
            return Binop(Name('q'), '*', Name('b1'))
           return Binop(Binop(Name('p'), '*', Name('b')), '+', Binop(Name('q'), '*', Name('b1')))
          return Exprs([Name('a1'), Name('b1'), Binop(Binop(Name('p'), '*', Name('a')), '+', Binop(Name('q'), '*', Name('a1'))), Binop(Binop(Name('p'), '*', Name('b')), '+', Binop(Name('q'), '*', Name('b1')))])
          Parser.expect('NEWLINE')
           Parser.nexttoken('')
           return (NAME, 'd')
          return ''
         return Assign([Exprs([Name('a'), Name('b'), Name('a1'), Name('b1')])], Exprs([Name('a1'), Name('b1'), Binop(Binop(Name('p'), '*', Name('a')), '+', Binop(Name('q'), '*', Name('a1'))), Binop(Binop(Name('p'), '*', Name('b')), '+', Binop(Name('q'), '*', Name('b1')))]))
        return Assign([Exprs([Name('a'), Name('b'), Name('a1'), Name('b1')])], Exprs([Name('a1'), Name('b1'), Binop(Binop(Name('p'), '*', Name('a')), '+', Binop(Name('q'), '*', Name('a1'))), Binop(Binop(Name('p'), '*', Name('b')), '+', Binop(Name('q'), '*', Name('b1')))]))
        Parser.parse_stmt('')
         Parser.parse_simple('')
          Parser.parse_exprs('')
           Parser.parse_expr('')
            Parser.parse_term('')
             Parser.parse_atom('')
              Parser.expect('NAME')
               Parser.nexttoken('')
               return (OPERATOR, ',')
              return 'd'
             return Name('d')
            return Name('d')
           return Name('d')
           Parser.nexttoken('')
           return (NAME, 'd1')
           Parser.parse_expr('')
            Parser.parse_term('')
             Parser.parse_atom('')
              Parser.expect('NAME')
               Parser.nexttoken('')
               return (OPERATOR, '=')
              return 'd1'
             return Name('d1')
            return Name('d1')
           return Name('d1')
          return Exprs([Name('d'), Name('d1')])
          Parser.nexttoken('')
          return (NAME, 'a')
          Parser.parse_exprs('')
           Parser.parse_expr('')
            Parser.parse_term('')
             Parser.parse_atom('')
              Parser.expect('NAME')
               Parser.nexttoken('')
               return (OPERATOR, '//')
              return 'a'
             return Name('a')
            return Name('a')
            Parser.expect('OPERATOR')
             Parser.nexttoken('')
             return (NAME, 'b')
            return '//'
            Parser.parse_expr('7')
             Parser.parse_term('')
              Parser.parse_atom('')
               Parser.expect('NAME')
                Parser.nexttoken('')
                return (OPERATOR, ',')
               return 'b'
              return Name('b')
             return Name('b')
            return Name('b')
           return Binop(Name('a'), '//', Name('b'))
           Parser.nexttoken('')
           return (NAME, 'a1')
           Parser.parse_expr('')
            Parser.parse_term('')
             Parser.parse_atom('')
              Parser.expect('NAME')
               Parser.nexttoken('')
               return (OPERATOR, '//')
              return 'a1'
             return Name('a1')
            return Name('a1')
            Parser.expect('OPERATOR')
             Parser.nexttoken('')
             return (NAME, 'b1')
            return '//'
            Parser.parse_expr('7')
             Parser.parse_term('')
              Parser.parse_atom('')
               Parser.expect('NAME')
                Parser.nexttoken('')
                return (NEWLINE, '')
               return 'b1'
              return Name('b1')
             return Name('b1')
            return Name('b1')
           return Binop(Name('a1'), '//', Name('b1'))
          return Exprs([Binop(Name('a'), '//', Name('b')), Binop(Name('a1'), '//', Name('b1'))])
          Parser.expect('NEWLINE')
           Parser.nexttoken('')
           return (NAME, 'while')
          return ''
         return Assign([Exprs([Name('d'), Name('d1')])], Exprs([Binop(Name('a'), '//', Name('b')), Binop(Name('a1'), '//', Name('b1'))]))
        return Assign([Exprs([Name('d'), Name('d1')])], Exprs([Binop(Name('a'), '//', Name('b')), Binop(Name('a1'), '//', Name('b1'))]))
        Parser.parse_stmt('')
         Parser.parse_while('')
          Parser.expect("NAME, 'while'")
           Parser.nexttoken('')
           return (NAME, 'd')
          return 'while'
          Parser.parse_expr('')
           Parser.parse_term('')
            Parser.parse_atom('')
             Parser.expect('NAME')
              Parser.nexttoken('')
              return (OPERATOR, '==')
             return 'd'
            return Name('d')
           return Name('d')
           Parser.expect('OPERATOR')
            Parser.nexttoken('')
            return (NAME, 'd1')
           return '=='
           Parser.parse_expr('1')
            Parser.parse_term('')
             Parser.parse_atom('')
              Parser.expect('NAME')
               Parser.nexttoken('')
               return (OPERATOR, ':')
              return 'd1'
             return Name('d1')
            return Name('d1')
           return Name('d1')
          return Binop(Name('d'), '==', Name('d1'))
          Parser.expect("OPERATOR, ':'")
           Parser.nexttoken('')
           return (NEWLINE, '')
          return ':'
          Parser.expect('NEWLINE')
           Parser.nexttoken('')
           return (INDENT, '')
          return ''
          Parser.parse_body('')
           Parser.expect('INDENT')
            Parser.nexttoken('')
            return (NAME, 'yield')
           return ''
           Parser.parse_stmt('')
            Parser.parse_yield('')
             Parser.expect("NAME, 'yield'")
              Parser.nexttoken('')
              return (NAME, 'd')
             return 'yield'
             Parser.parse_exprs('')
              Parser.parse_expr('')
               Parser.parse_term('')
                Parser.parse_atom('')
                 Parser.expect('NAME')
                  Parser.nexttoken('')
                  return (NEWLINE, '')
                 return 'd'
                return Name('d')
               return Name('d')
              return Name('d')
             return Name('d')
             Parser.expect('NEWLINE')
              Parser.nexttoken('')
              return (NAME, 'a')
             return ''
            return Yield(Name('d'))
           return Yield(Name('d'))
           Parser.parse_stmt('')
            Parser.parse_simple('')
             Parser.parse_exprs('')
              Parser.parse_expr('')
               Parser.parse_term('')
                Parser.parse_atom('')
                 Parser.expect('NAME')
                  Parser.nexttoken('')
                  return (OPERATOR, ',')
                 return 'a'
                return Name('a')
               return Name('a')
              return Name('a')
              Parser.nexttoken('')
              return (NAME, 'a1')
              Parser.parse_expr('')
               Parser.parse_term('')
                Parser.parse_atom('')
                 Parser.expect('NAME')
                  Parser.nexttoken('')
                  return (OPERATOR, '=')
                 return 'a1'
                return Name('a1')
               return Name('a1')
              return Name('a1')
             return Exprs([Name('a'), Name('a1')])
             Parser.nexttoken('')
             return (NUMBER, '10')
             Parser.parse_exprs('')
              Parser.parse_expr('')
               Parser.parse_term('')
                Parser.parse_atom('')
                 Parser.expect('NUMBER')
                  Parser.nexttoken('')
                  return (OPERATOR, '*')
                 return '10'
                return Number('10')
               return Number('10')
               Parser.expect('OPERATOR')
                Parser.nexttoken('')
                return (OPERATOR, '(')
               return '*'
               Parser.parse_expr('7')
                Parser.parse_term('')
                 Parser.parse_atom('')
                  Parser.nexttoken('')
                  return (NAME, 'a')
                  Parser.parse_exprs('')
                   Parser.parse_expr('')
                    Parser.parse_term('')
                     Parser.parse_atom('')
                      Parser.expect('NAME')
                       Parser.nexttoken('')
                       return (OPERATOR, '%')
                      return 'a'
                     return Name('a')
                    return Name('a')
                    Parser.expect('OPERATOR')
                     Parser.nexttoken('')
                     return (NAME, 'b')
                    return '%'
                    Parser.parse_expr('7')
                     Parser.parse_term('')
                      Parser.parse_atom('')
                       Parser.expect('NAME')
                        Parser.nexttoken('')
                        return (OPERATOR, ')')
                       return 'b'
                      return Name('b')
                     return Name('b')
                    return Name('b')
                   return Binop(Name('a'), '%', Name('b'))
                  return Binop(Name('a'), '%', Name('b'))
                  Parser.expect("OPERATOR, ')'")
                   Parser.nexttoken('')
                   return (OPERATOR, ',')
                  return ')'
                 return Binop(Name('a'), '%', Name('b'))
                return Binop(Name('a'), '%', Name('b'))
               return Binop(Name('a'), '%', Name('b'))
              return Binop(Number('10'), '*', Binop(Name('a'), '%', Name('b')))
              Parser.nexttoken('')
              return (NUMBER, '10')
              Parser.parse_expr('')
               Parser.parse_term('')
                Parser.parse_atom('')
                 Parser.expect('NUMBER')
                  Parser.nexttoken('')
                  return (OPERATOR, '*')
                 return '10'
                return Number('10')
               return Number('10')
               Parser.expect('OPERATOR')
                Parser.nexttoken('')
                return (OPERATOR, '(')
               return '*'
               Parser.parse_expr('7')
                Parser.parse_term('')
                 Parser.parse_atom('')
                  Parser.nexttoken('')
                  return (NAME, 'a1')
                  Parser.parse_exprs('')
                   Parser.parse_expr('')
                    Parser.parse_term('')
                     Parser.parse_atom('')
                      Parser.expect('NAME')
                       Parser.nexttoken('')
                       return (OPERATOR, '%')
                      return 'a1'
                     return Name('a1')
                    return Name('a1')
                    Parser.expect('OPERATOR')
                     Parser.nexttoken('')
                     return (NAME, 'b1')
                    return '%'
                    Parser.parse_expr('7')
                     Parser.parse_term('')
                      Parser.parse_atom('')
                       Parser.expect('NAME')
                        Parser.nexttoken('')
                        return (OPERATOR, ')')
                       return 'b1'
                      return Name('b1')
                     return Name('b1')
                    return Name('b1')
                   return Binop(Name('a1'), '%', Name('b1'))
                  return Binop(Name('a1'), '%', Name('b1'))
                  Parser.expect("OPERATOR, ')'")
                   Parser.nexttoken('')
                   return (NEWLINE, '')
                  return ')'
                 return Binop(Name('a1'), '%', Name('b1'))
                return Binop(Name('a1'), '%', Name('b1'))
               return Binop(Name('a1'), '%', Name('b1'))
              return Binop(Number('10'), '*', Binop(Name('a1'), '%', Name('b1')))
             return Exprs([Binop(Number('10'), '*', Binop(Name('a'), '%', Name('b'))), Binop(Number('10'), '*', Binop(Name('a1'), '%', Name('b1')))])
             Parser.expect('NEWLINE')
              Parser.nexttoken('')
              return (NAME, 'd')
             return ''
            return Assign([Exprs([Name('a'), Name('a1')])], Exprs([Binop(Number('10'), '*', Binop(Name('a'), '%', Name('b'))), Binop(Number('10'), '*', Binop(Name('a1'), '%', Name('b1')))]))
           return Assign([Exprs([Name('a'), Name('a1')])], Exprs([Binop(Number('10'), '*', Binop(Name('a'), '%', Name('b'))), Binop(Number('10'), '*', Binop(Name('a1'), '%', Name('b1')))]))
           Parser.parse_stmt('')
            Parser.parse_simple('')
             Parser.parse_exprs('')
              Parser.parse_expr('')
               Parser.parse_term('')
                Parser.parse_atom('')
                 Parser.expect('NAME')
                  Parser.nexttoken('')
                  return (OPERATOR, ',')
                 return 'd'
                return Name('d')
               return Name('d')
              return Name('d')
              Parser.nexttoken('')
              return (NAME, 'd1')
              Parser.parse_expr('')
               Parser.parse_term('')
                Parser.parse_atom('')
                 Parser.expect('NAME')
                  Parser.nexttoken('')
                  return (OPERATOR, '=')
                 return 'd1'
                return Name('d1')
               return Name('d1')
              return Name('d1')
             return Exprs([Name('d'), Name('d1')])
             Parser.nexttoken('')
             return (NAME, 'a')
             Parser.parse_exprs('')
              Parser.parse_expr('')
               Parser.parse_term('')
                Parser.parse_atom('')
                 Parser.expect('NAME')
                  Parser.nexttoken('')
                  return (OPERATOR, '//')
                 return 'a'
                return Name('a')
               return Name('a')
               Parser.expect('OPERATOR')
                Parser.nexttoken('')
                return (NAME, 'b')
               return '//'
               Parser.parse_expr('7')
                Parser.parse_term('')
                 Parser.parse_atom('')
                  Parser.expect('NAME')
                   Parser.nexttoken('')
                   return (OPERATOR, ',')
                  return 'b'
                 return Name('b')
                return Name('b')
               return Name('b')
              return Binop(Name('a'), '//', Name('b'))
              Parser.nexttoken('')
              return (NAME, 'a1')
              Parser.parse_expr('')
               Parser.parse_term('')
                Parser.parse_atom('')
                 Parser.expect('NAME')
                  Parser.nexttoken('')
                  return (OPERATOR, '//')
                 return 'a1'
                return Name('a1')
               return Name('a1')
               Parser.expect('OPERATOR')
                Parser.nexttoken('')
                return (NAME, 'b1')
               return '//'
               Parser.parse_expr('7')
                Parser.parse_term('')
                 Parser.parse_atom('')
                  Parser.expect('NAME')
                   Parser.nexttoken('')
                   return (NEWLINE, '')
                  return 'b1'
                 return Name('b1')
                return Name('b1')
               return Name('b1')
              return Binop(Name('a1'), '//', Name('b1'))
             return Exprs([Binop(Name('a'), '//', Name('b')), Binop(Name('a1'), '//', Name('b1'))])
             Parser.expect('NEWLINE')
              Parser.nexttoken('')
              return (DEDENT, '')
             return ''
            return Assign([Exprs([Name('d'), Name('d1')])], Exprs([Binop(Name('a'), '//', Name('b')), Binop(Name('a1'), '//', Name('b1'))]))
           return Assign([Exprs([Name('d'), Name('d1')])], Exprs([Binop(Name('a'), '//', Name('b')), Binop(Name('a1'), '//', Name('b1'))]))
           Parser.expect('DEDENT')
            Parser.nexttoken('')
            return (DEDENT, '')
           return ''
          return [Yield(Name('d')), Assign([Exprs([Name('a'), Name('a1')])], Exprs([Binop(Number('10'), '*', Binop(Name('a'), '%', Name('b'))), Binop(Number('10'), '*', Binop(Name('a1'), '%', Name('b1')))])), Assign([Exprs([Name('d'), Name('d1')])], Exprs([Binop(Name('a'), '//', Name('b')), Binop(Name('a1'), '//', Name('b1'))]))]
         return While(Binop(Name('d'), '==', Name('d1')), ...)
        return While(Binop(Name('d'), '==', Name('d1')), ...)
        Parser.expect('DEDENT')
         Parser.nexttoken('')
         return (DEDENT, '')
        return ''
       return [Assign([Exprs([Name('p'), Name('q'), Name('k')])], Exprs([Binop(Name('k'), '*', Name('k')), Binop(Binop(Number('2'), '*', Name('k')), '+', Number('1')), Binop(Name('k'), '+', Number('1'))])), Assign([Exprs([Name('a'), Name('b'), Name('a1'), Name('b1')])], Exprs([Name('a1'), Name('b1'), Binop(Binop(Name('p'), '*', Name('a')), '+', Binop(Name('q'), '*', Name('a1'))), Binop(Binop(Name('p'), '*', Name('b')), '+', Binop(Name('q'), '*', Name('b1')))])), Assign([Exprs([Name('d'), Name('d1')])], Exprs([Binop(Name('a'), '//', Name('b')), Binop(Name('a1'), '//', Name('b1'))])), While(Binop(Name('d'), '==', Name('d1')), ...)]
      return While(Number('1'), ...)
     return While(Number('1'), ...)
     Parser.expect('DEDENT')
      Parser.nexttoken('')
      return (NAME, 'def')
     return ''
    return [Assign([Exprs([Name('k'), Name('a'), Name('b'), Name('a1'), Name('b1')])], Exprs([Number('2'), Number('4'), Number('1'), Number('12'), Number('4')])), While(Number('1'), ...)]
   return Define('pi', [], ...)
  return Define('pi', [], ...)
  Parser.parse_stmt('')
   Parser.parse_def('')
    Parser.expect("NAME, 'def'")
     Parser.nexttoken('')
     return (NAME, 'strhash')
    return 'def'
    Parser.expect('NAME')
     Parser.nexttoken('')
     return (OPERATOR, '(')
    return 'strhash'
    Parser.expect("OPERATOR, '('")
     Parser.nexttoken('')
     return (NAME, 's')
    return '('
    Parser.expect('NAME')
     Parser.nexttoken('')
     return (OPERATOR, ')')
    return 's'
    Parser.expect("OPERATOR, ')'")
     Parser.nexttoken('')
     return (OPERATOR, ':')
    return ')'
    Parser.expect("OPERATOR, ':'")
     Parser.nexttoken('')
     return (NEWLINE, '')
    return ':'
    Parser.expect('NEWLINE')
     Parser.nexttoken('')
     return (INDENT, '')
    return ''
    Parser.parse_body('')
     Parser.expect('INDENT')
      Parser.nexttoken('')
      return (NAME, 'if')
     return ''
     Parser.parse_stmt('')
      Parser.parse_if('')
       Parser.expect("NAME, 'if'")
        Parser.nexttoken('')
        return (NAME, 's')
       return 'if'
       Parser.parse_expr('')
        Parser.parse_term('')
         Parser.parse_atom('')
          Parser.expect('NAME')
           Parser.nexttoken('')
           return (OPERATOR, '==')
          return 's'
         return Name('s')
        return Name('s')
        Parser.expect('OPERATOR')
         Parser.nexttoken('')
         return (STRING, "''")
        return '=='
        Parser.parse_expr('1')
         Parser.parse_term('')
          Parser.parse_atom('')
           Parser.expect('STRING')
            Parser.nexttoken('')
            return (OPERATOR, ':')
           return "''"
          return String("''")
         return String("''")
        return String("''")
       return Binop(Name('s'), '==', String("''"))
       Parser.expect("OPERATOR, ':'")
        Parser.nexttoken('')
        return (NEWLINE, '')
       return ':'
       Parser.expect('NEWLINE')
        Parser.nexttoken('')
        return (INDENT, '')
       return ''
       Parser.parse_body('')
        Parser.expect('INDENT')
         Parser.nexttoken('')
         return (NAME, 'return')
        return ''
        Parser.parse_stmt('')
         Parser.parse_return('')
          Parser.expect("NAME, 'return'")
           Parser.nexttoken('')
           return (NUMBER, '0')
          return 'return'
          Parser.parse_exprs('')
           Parser.parse_expr('')
            Parser.parse_term('')
             Parser.parse_atom('')
              Parser.expect('NUMBER')
               Parser.nexttoken('')
               return (NEWLINE, '')
              return '0'
             return Number('0')
            return Number('0')
           return Number('0')
          return Number('0')
          Parser.expect('NEWLINE')
           Parser.nexttoken('')
           return (DEDENT, '')
          return ''
         return Return(Number('0'))
        return Return(Number('0'))
        Parser.expect('DEDENT')
         Parser.nexttoken('')
         return (NAME, 'x')
        return ''
       return [Return(Number('0'))]
      return If(Binop(Name('s'), '==', String("''")), ...)
     return If(Binop(Name('s'), '==', String("''")), ...)
     Parser.parse_stmt('')
      Parser.parse_simple('')
       Parser.parse_exprs('')
        Parser.parse_expr('')
         Parser.parse_term('')
          Parser.parse_atom('')
           Parser.expect('NAME')
            Parser.nexttoken('')
            return (OPERATOR, '=')
           return 'x'
          return Name('x')
         return Name('x')
        return Name('x')
       return Name('x')
       Parser.nexttoken('')
       return (NAME, 'ord')
       Parser.parse_exprs('')
        Parser.parse_expr('')
         Parser.parse_term('')
          Parser.parse_atom('')
           Parser.expect('NAME')
            Parser.nexttoken('')
            return (OPERATOR, '(')
           return 'ord'
          return Name('ord')
          Parser.nexttoken('')
          return (NAME, 's')
          Parser.parse_exprs('')
           Parser.parse_expr('')
            Parser.parse_term('')
             Parser.parse_atom('')
              Parser.expect('NAME')
               Parser.nexttoken('')
               return (OPERATOR, '[')
              return 's'
             return Name('s')
             Parser.nexttoken('')
             return (NUMBER, '0')
             Parser.parse_exprs('')
              Parser.parse_expr('')
               Parser.parse_term('')
                Parser.parse_atom('')
                 Parser.expect('NUMBER')
                  Parser.nexttoken('')
                  return (OPERATOR, ']')
                 return '0'
                return Number('0')
               return Number('0')
              return Number('0')
             return Number('0')
             Parser.expect("OPERATOR, ']'")
              Parser.nexttoken('')
              return (OPERATOR, ')')
             return ']'
            return Index(Name('s'), Number('0'))
           return Index(Name('s'), Number('0'))
          return Index(Name('s'), Number('0'))
          Parser.expect("OPERATOR, ')'")
           Parser.nexttoken('')
           return (OPERATOR, '<<')
          return ')'
         return Call(Name('ord'), [Index(Name('s'), Number('0'))])
         Parser.expect('OPERATOR')
          Parser.nexttoken('')
          return (NUMBER, '7')
         return '<<'
         Parser.parse_expr('5')
          Parser.parse_term('')
           Parser.parse_atom('')
            Parser.expect('NUMBER')
             Parser.nexttoken('')
             return (NEWLINE, '')
            return '7'
           return Number('7')
          return Number('7')
         return Number('7')
        return Binop(Call(Name('ord'), [Index(Name('s'), Number('0'))]), '<<', Number('7'))
       return Binop(Call(Name('ord'), [Index(Name('s'), Number('0'))]), '<<', Number('7'))
       Parser.expect('NEWLINE')
        Parser.nexttoken('')
        return (NAME, 'for')
       return ''
      return Assign([Name('x')], Binop(Call(Name('ord'), [Index(Name('s'), Number('0'))]), '<<', Number('7')))
     return Assign([Name('x')], Binop(Call(Name('ord'), [Index(Name('s'), Number('0'))]), '<<', Number('7')))
     Parser.parse_stmt('')
      Parser.parse_for('')
       Parser.expect("NAME, 'for'")
        Parser.nexttoken('')
        return (NAME, 'c')
       return 'for'
       Parser.parse_expr('')
        Parser.parse_term('')
         Parser.parse_atom('')
          Parser.expect('NAME')
           Parser.nexttoken('')
           return (NAME, 'in')
          return 'c'
         return Name('c')
        return Name('c')
       return Name('c')
       Parser.expect("NAME, 'in'")
        Parser.nexttoken('')
        return (NAME, 's')
       return 'in'
       Parser.parse_expr('')
        Parser.parse_term('')
         Parser.parse_atom('')
          Parser.expect('NAME')
           Parser.nexttoken('')
           return (OPERATOR, ':')
          return 's'
         return Name('s')
        return Name('s')
       return Name('s')
       Parser.expect("OPERATOR, ':'")
        Parser.nexttoken('')
        return (NEWLINE, '')
       return ':'
       Parser.expect('NEWLINE')
        Parser.nexttoken('')
        return (INDENT, '')
       return ''
       Parser.parse_body('')
        Parser.expect('INDENT')
         Parser.nexttoken('')
         return (NAME, 'x')
        return ''
        Parser.parse_stmt('')
         Parser.parse_simple('')
          Parser.parse_exprs('')
           Parser.parse_expr('')
            Parser.parse_term('')
             Parser.parse_atom('')
              Parser.expect('NAME')
               Parser.nexttoken('')
               return (OPERATOR, '=')
              return 'x'
             return Name('x')
            return Name('x')
           return Name('x')
          return Name('x')
          Parser.nexttoken('')
          return (OPERATOR, '(')
          Parser.parse_exprs('')
           Parser.parse_expr('')
            Parser.parse_term('')
             Parser.parse_atom('')
              Parser.nexttoken('')
              return (OPERATOR, '(')
              Parser.parse_exprs('')
               Parser.parse_expr('')
                Parser.parse_term('')
                 Parser.parse_atom('')
                  Parser.nexttoken('')
                  return (NUMBER, '1000003')
                  Parser.parse_exprs('')
                   Parser.parse_expr('')
                    Parser.parse_term('')
                     Parser.parse_atom('')
                      Parser.expect('NUMBER')
                       Parser.nexttoken('')
                       return (OPERATOR, '*')
                      return '1000003'
                     return Number('1000003')
                    return Number('1000003')
                    Parser.expect('OPERATOR')
                     Parser.nexttoken('')
                     return (NAME, 'x')
                    return '*'
                    Parser.parse_expr('7')
                     Parser.parse_term('')
                      Parser.parse_atom('')
                       Parser.expect('NAME')
                        Parser.nexttoken('')
                        return (OPERATOR, ')')
                       return 'x'
                      return Name('x')
                     return Name('x')
                    return Name('x')
                   return Binop(Number('1000003'), '*', Name('x'))
                  return Binop(Number('1000003'), '*', Name('x'))
                  Parser.expect("OPERATOR, ')'")
                   Parser.nexttoken('')
                   return (OPERATOR, '^')
                  return ')'
                 return Binop(Number('1000003'), '*', Name('x'))
                return Binop(Number('1000003'), '*', Name('x'))
                Parser.expect('OPERATOR')
                 Parser.nexttoken('')
                 return (NAME, 'ord')
                return '^'
                Parser.parse_expr('3')
                 Parser.parse_term('')
                  Parser.parse_atom('')
                   Parser.expect('NAME')
                    Parser.nexttoken('')
                    return (OPERATOR, '(')
                   return 'ord'
                  return Name('ord')
                  Parser.nexttoken('')
                  return (NAME, 'c')
                  Parser.parse_exprs('')
                   Parser.parse_expr('')
                    Parser.parse_term('')
                     Parser.parse_atom('')
                      Parser.expect('NAME')
                       Parser.nexttoken('')
                       return (OPERATOR, ')')
                      return 'c'
                     return Name('c')
                    return Name('c')
                   return Name('c')
                  return Name('c')
                  Parser.expect("OPERATOR, ')'")
                   Parser.nexttoken('')
                   return (OPERATOR, ')')
                  return ')'
                 return Call(Name('ord'), [Name('c')])
                return Call(Name('ord'), [Name('c')])
               return Binop(Binop(Number('1000003'), '*', Name('x')), '^', Call(Name('ord'), [Name('c')]))
              return Binop(Binop(Number('1000003'), '*', Name('x')), '^', Call(Name('ord'), [Name('c')]))
              Parser.expect("OPERATOR, ')'")
               Parser.nexttoken('')
               return (OPERATOR, '&')
              return ')'
             return Binop(Binop(Number('1000003'), '*', Name('x')), '^', Call(Name('ord'), [Name('c')]))
            return Binop(Binop(Number('1000003'), '*', Name('x')), '^', Call(Name('ord'), [Name('c')]))
            Parser.expect('OPERATOR')
             Parser.nexttoken('')
             return (NUMBER, '4294967295')
            return '&'
            Parser.parse_expr('4')
             Parser.parse_term('')
              Parser.parse_atom('')
               Parser.expect('NUMBER')
                Parser.nexttoken('')
                return (NEWLINE, '')
               return '4294967295'
              return Number('4294967295')
             return Number('4294967295')
            return Number('4294967295')
           return Binop(Binop(Binop(Number('1000003'), '*', Name('x')), '^', Call(Name('ord'), [Name('c')])), '&', Number('4294967295'))
          return Binop(Binop(Binop(Number('1000003'), '*', Name('x')), '^', Call(Name('ord'), [Name('c')])), '&', Number('4294967295'))
          Parser.expect('NEWLINE')
           Parser.nexttoken('')
           return (DEDENT, '')
          return ''
         return Assign([Name('x')], Binop(Binop(Binop(Number('1000003'), '*', Name('x')), '^', Call(Name('ord'), [Name('c')])), '&', Number('4294967295')))
        return Assign([Name('x')], Binop(Binop(Binop(Number('1000003'), '*', Name('x')), '^', Call(Name('ord'), [Name('c')])), '&', Number('4294967295')))
        Parser.expect('DEDENT')
         Parser.nexttoken('')
         return (NAME, 'return')
        return ''
       return [Assign([Name('x')], Binop(Binop(Binop(Number('1000003'), '*', Name('x')), '^', Call(Name('ord'), [Name('c')])), '&', Number('4294967295')))]
      return For(Name('c'), Name('s'), ...)
     return For(Name('c'), Name('s'), ...)
     Parser.parse_stmt('')
      Parser.parse_return('')
       Parser.expect("NAME, 'return'")
        Parser.nexttoken('')
        return (NAME, 'x')
       return 'return'
       Parser.parse_exprs('')
        Parser.parse_expr('')
         Parser.parse_term('')
          Parser.parse_atom('')
           Parser.expect('NAME')
            Parser.nexttoken('')
            return (OPERATOR, '^')
           return 'x'
          return Name('x')
         return Name('x')
         Parser.expect('OPERATOR')
          Parser.nexttoken('')
          return (NAME, 'len')
         return '^'
         Parser.parse_expr('3')
          Parser.parse_term('')
           Parser.parse_atom('')
            Parser.expect('NAME')
             Parser.nexttoken('')
             return (OPERATOR, '(')
            return 'len'
           return Name('len')
           Parser.nexttoken('')
           return (NAME, 's')
           Parser.parse_exprs('')
            Parser.parse_expr('')
             Parser.parse_term('')
              Parser.parse_atom('')
               Parser.expect('NAME')
                Parser.nexttoken('')
                return (OPERATOR, ')')
               return 's'
              return Name('s')
             return Name('s')
            return Name('s')
           return Name('s')
           Parser.expect("OPERATOR, ')'")
            Parser.nexttoken('')
            return (NEWLINE, '')
           return ')'
          return Call(Name('len'), [Name('s')])
         return Call(Name('len'), [Name('s')])
        return Binop(Name('x'), '^', Call(Name('len'), [Name('s')]))
       return Binop(Name('x'), '^', Call(Name('len'), [Name('s')]))
       Parser.expect('NEWLINE')
        Parser.nexttoken('')
        return (DEDENT, '')
       return ''
      return Return(Binop(Name('x'), '^', Call(Name('len'), [Name('s')])))
     return Return(Binop(Name('x'), '^', Call(Name('len'), [Name('s')])))
     Parser.expect('DEDENT')
      Parser.nexttoken('')
      return (EOF, '')
     return ''
    return [If(Binop(Name('s'), '==', String("''")), ...), Assign([Name('x')], Binop(Call(Name('ord'), [Index(Name('s'), Number('0'))]), '<<', Number('7'))), For(Name('c'), Name('s'), ...), Return(Binop(Name('x'), '^', Call(Name('len'), [Name('s')])))]
   return Define('strhash', ['s'], ...)
  return Define('strhash', ['s'], ...)
 return [Define('pi', [], ...), Define('strhash', ['s'], ...)]
3 1 4 1 5 9 2 6 5 3 5 8 9 7 9 3 2 3 8 4 6 2 6 4 3 3 8 3 2 7 9 5 0 2 8 8 4 1 9 7 1 6 9 3 9 9 3 7 5 1 0 5 8 2 0 9 7 4 9 4 4 5 9 2 3 0 7 8 1 6 4 0 6 2 8 6 2 0 8 9 9 8 6 2 8 0 3 4 8 2 5 3 4 2 1 1 7 0 6 7 9 8 2 1 4 8 0 8 6 5 1 3 2 8 2 3 0 6 6 4 7 0 9 3 8 4 4 6 0 9 5 5 0 5 8 2 2 3 1 7 2 5 3 5 9 4 0 8 1 2 8 4 8 1 1 1 7 4 5 0 2 8 4 1 0 2 7 0 1 9 3 8 5 2 1 1 0 5 5 5 9 6 4 4 6 2 2 9 4 8 9 5 4 9 3 0 3 8 1 9 6 4 4 2 8 8 1 0 9 7 5 6 6 5 9 3 3 4 4 6 1 2 8 4 7 5 6 4 8 2 3 3 7 8 6 7 8 3 1 6 5 2 7 1 2 0 1 9 0 9 1 4 5 6 4 8 5 6 6 9 2 3 4 6 0 3 4 8 6 1 0 4 5 4 3 2 6 6 4 8 2 1 3 3 9 3 6 0 7 2 6 0 2 4 9 1 4 1 2 7 3 7 2 4 5 8 7 0 0 6 6 0 6 3 1 5 5 8 8 1 7 4 8 8 1 5 2 0 9 2 0 9 6 2 8 2 9 2 5 4 0 9 1 7 1 5 3 6 4 3 6 7 8 9 2 5 9 0 3 6 0 0 1 1 3 3 0 5 3 0 5 4 8 8 2 0 4 6 6 5 2 1 3 8 4 1 4 6 9 5 1 9 4 1 5 1 1 6 0 9 4 3 3 0 5 7 2 7 0 3 6 5 7 5 9 5 9 1 9 5 3 0 9 2 1 8 6 1 1 7 3 8 1 9 3 2 6 1 1 7 9 3 1 0 5 1 1 8 5 4 8 0 7 4 4 6 2 3 7 9 9 6 2 7 4 9 5 6 7 3 5 1 8 8 5 7 5 2 7 2 4 8 9 1 2 2 7 9 3 8 1 8 3 0 1 1 9 4 9 1 2 9 8 3 3 6 7 3 3 6 2 4 4 0 6 5 6 6 4 3 0 8 6 0 2 1 3 9 4 9 4 6 3 9 5 2 2 4 7 3 7 1 9 0 7 0 2 1 7 9 8 6 0 9 4 3 7 0 2 7 7 0 5 3 9 2 1 7 1 7 6 2 9 3 1 7 6 7 5 2 3 8 4 6 7 4 8 1 8 4 6 7 6 6 9 4 0 5 1 3 2 0 0 0 5 6 8 1 2 7 1 4 5 2 6 3 5 6 0 8 2 7 7 8 5 7 7 1 3 4 2 7 5 7 7 8 9 6 0 9 1 7 3 6 3 7 1 7 8 7 2 1 4 6 8 4 4 0 9 0 1 2 2 4 9 5 3 4 3 0 1 4 6 5 4 9 5 8 5 3 7 1 0 5 0 7 9 2 2 7 9 6 8 9 2 5 8 9 2 3 5 4 2 0 1 9 9 5 6 1 1 2 1 2 9 0 2 1 9 6 0 8 6 4 0 3 4 4 1 8 1 5 9 8 1 3 6 2 9 7 7 4 7 7 1 3 0 9 9 6 0 5 1 8 7 0 7 2 1 1 3 4 9 9 9 9 9 9 8 3 7 2 9 7 8 0 4 9 9 5 1 0 5 9 7 3 1 7 3 2 8 1 6 0 9 6 3 1 8 5 9 5 0 2 4 4 5 9 4 5 5 3 4 6 9 0 8 3 0 2 6 4 2 5 2 2 3 0 8 2 5 3 3 4 4 6 8 5 0 3 5 2 6 1 9 3 1 1 8 8 1 7 1 0 1 0 0 0 3 1 3 7 8 3 8 7 5 2 8 8 6 5 8 7 5 3 3 2 0 8 3 8 1 4 2 0 6 1 7 1 7 7 6 6 9 1 4 7 3 0 3 5 9 8 2 5 3 4 9 0 4 2 8 7 5 5 4 6 8 7 3 1 1 5 9 5 6 2 8 6 3 8 8 2 3 5 3 7 8 7 5 9 3 7 5 1 9 5 7 7 8 1 8 5 7 7 8 0 5 3 2 1 7 1 2 2 6 8 0 6 6 1 3 0 0 1 9 2 7 8 7 6 6 1 1 1 9 5 9 0 9 2 1 6 4 2 0 1 9 8 
 Parser.__init__('<generator object at 0>')
  Parser.nexttoken('')
  return (NAME, u'def')
 return
 Parser.parse('')
  Parser.parse_stmt('')
   Parser.parse_def('')
    Parser.expect("NAME, 'def'")
     Parser.nexttoken('')
     return (NAME, u'pi')
    return u'def'
    Parser.expect('NAME')
     Parser.nexttoken('')
     return (OPERATOR, u'(')
    return u'pi'
    Parser.expect("OPERATOR, '('")
     Parser.nexttoken('')
     return (OPERATOR, u')')
    return u'('
    Parser.expect("OPERATOR, ')'")
     Parser.nexttoken('')
     return (OPERATOR, u':')
    return u')'
    Parser.expect("OPERATOR, ':'")
     Parser.nexttoken('')
     return (NEWLINE, '')
    return u':'
    Parser.expect('NEWLINE')
     Parser.nexttoken('')
     return (INDENT, '')
    return ''
    Parser.parse_body('')
     Parser.expect('INDENT')
      Parser.nexttoken('')
      return (NAME, u'k')
     return ''
     Parser.parse_stmt('')
      Parser.parse_simple('')
       Parser.parse_exprs('')
        Parser.parse_expr('')
         Parser.parse_term('')
          Parser.parse_atom('')
           Parser.expect('NAME')
            Parser.nexttoken('')
            return (OPERATOR, u',')
           return u'k'
          return Name(u'k')
         return Name(u'k')
        return Name(u'k')
        Parser.nexttoken('')
        return (NAME, u'a')
        Parser.parse_expr('')
         Parser.parse_term('')
          Parser.parse_atom('')
           Parser.expect('NAME')
            Parser.nexttoken('')
            return (OPERATOR, u',')
           return u'a'
          return Name(u'a')
         return Name(u'a')
        return Name(u'a')
        Parser.nexttoken('')
        return (NAME, u'b')
        Parser.parse_expr('')
         Parser.parse_term('')
          Parser.parse_atom('')
           Parser.expect('NAME')
            Parser.nexttoken('')
            return (OPERATOR, u',')
           return u'b'
          return Name(u'b')
         return Name(u'b')
        return Name(u'b')
        Parser.nexttoken('')
        return (NAME, u'a1')
        Parser.parse_expr('')
         Parser.parse_term('')
          Parser.parse_atom('')
           Parser.expect('NAME')
            Parser.nexttoken('')
            return (OPERATOR, u',')
           return u'a1'
          return Name(u'a1')
         return Name(u'a1')
        return Name(u'a1')
        Parser.nexttoken('')
        return (NAME, u'b1')
        Parser.parse_expr('')
         Parser.parse_term('')
          Parser.parse_atom('')
           Parser.expect('NAME')
            Parser.nexttoken('')
            return (OPERATOR, u'=')
           return u'b1'
          return Name(u'b1')
         return Name(u'b1')
        return Name(u'b1')
       return Exprs([Name(u'k'), Name(u'a'), Name(u'b'), Name(u'a1'), Name(u'b1')])
       Parser.nexttoken('')
       return (NUMBER, u'2')
       Parser.parse_exprs('')
        Parser.parse_expr('')
         Parser.parse_term('')
          Parser.parse_atom('')
           Parser.expect('NUMBER')
            Parser.nexttoken('')
            return (OPERATOR, u',')
           return u'2'
          return Number(u'2')
         return Number(u'2')
        return Number(u'2')
        Parser.nexttoken('')
        return (NUMBER, u'4')
        Parser.parse_expr('')
         Parser.parse_term('')
          Parser.parse_atom('')
           Parser.expect('NUMBER')
            Parser.nexttoken('')
            return (OPERATOR, u',')
           return u'4'
          return Number(u'4')
         return Number(u'4')
        return Number(u'4')
        Parser.nexttoken('')
        return (NUMBER, u'1')
        Parser.parse_expr('')
         Parser.parse_term('')
          Parser.parse_atom('')
           Parser.expect('NUMBER')
            Parser.nexttoken('')
            return (OPERATOR, u',')
           return u'1'
          return Number(u'1')
         return Number(u'1')
        return Number(u'1')
        Parser.nexttoken('')
        return (NUMBER, u'12')
        Parser.parse_expr('')
         Parser.parse_term('')
          Parser.parse_atom('')
           Parser.expect('NUMBER')
            Parser.nexttoken('')
            return (OPERATOR, u',')
           return u'12'
          return Number(u'12')
         return Number(u'12')
        return Number(u'12')
        Parser.nexttoken('')
        return (NUMBER, u'4')
        Parser.parse_expr('')
         Parser.parse_term('')
          Parser.parse_atom('')
           Parser.expect('NUMBER')
            Parser.nexttoken('')
            return (NEWLINE, '')
           return u'4'
          return Number(u'4')
         return Number(u'4')
        return Number(u'4')
       return Exprs([Number(u'2'), Number(u'4'), Number(u'1'), Number(u'12'), Number(u'4')])
       Parser.expect('NEWLINE')
        Parser.nexttoken('')
        return (NAME, u'while')
       return ''
      return Assign([Exprs([Name(u'k'), Name(u'a'), Name(u'b'), Name(u'a1'), Name(u'b1')])], Exprs([Number(u'2'), Number(u'4'), Number(u'1'), Number(u'12'), Number(u'4')]))
     return Assign([Exprs([Name(u'k'), Name(u'a'), Name(u'b'), Name(u'a1'), Name(u'b1')])], Exprs([Number(u'2'), Number(u'4'), Number(u'1'), Number(u'12'), Number(u'4')]))
     Parser.parse_stmt('')
      Parser.parse_while('')
       Parser.expect("NAME, 'while'")
        Parser.nexttoken('')
        return (NUMBER, u'1')
       return u'while'
       Parser.parse_expr('')
        Parser.parse_term('')
         Parser.parse_atom('')
          Parser.expect('NUMBER')
           Parser.nexttoken('')
           return (OPERATOR, u':')
          return u'1'
         return Number(u'1')
        return Number(u'1')
       return Number(u'1')
       Parser.expect("OPERATOR, ':'")
        Parser.nexttoken('')
        return (NEWLINE, '')
       return u':'
       Parser.expect('NEWLINE')
        Parser.nexttoken('')
        return (INDENT, '')
       return ''
       Parser.parse_body('')
        Parser.expect('INDENT')
         Parser.nexttoken('')
         return (NAME, u'p')
        return ''
        Parser.parse_stmt('')
         Parser.parse_simple('')
          Parser.parse_exprs('')
           Parser.parse_expr('')
            Parser.parse_term('')
             Parser.parse_atom('')
              Parser.expect('NAME')
               Parser.nexttoken('')
               return (OPERATOR, u',')
              return u'p'
             return Name(u'p')
            return Name(u'p')
           return Name(u'p')
           Parser.nexttoken('')
           return (NAME, u'q')
           Parser.parse_expr('')
            Parser.parse_term('')
             Parser.parse_atom('')
              Parser.expect('NAME')
               Parser.nexttoken('')
               return (OPERATOR, u',')
              return u'q'
             return Name(u'q')
            return Name(u'q')
           return Name(u'q')
           Parser.nexttoken('')
           return (NAME, u'k')
           Parser.parse_expr('')
            Parser.parse_term('')
             Parser.parse_atom('')
              Parser.expect('NAME')
               Parser.nexttoken('')
               return (OPERATOR, u'=')
              return u'k'
             return Name(u'k')
            return Name(u'k')
           return Name(u'k')
          return Exprs([Name(u'p'), Name(u'q'), Name(u'k')])
          Parser.nexttoken('')
          return (NAME, u'k')
          Parser.parse_exprs('')
           Parser.parse_expr('')
            Parser.parse_term('')
             Parser.parse_atom('')
              Parser.expect('NAME')
               Parser.nexttoken('')
               return (OPERATOR, u'*')
              return u'k'
             return Name(u'k')
            return Name(u'k')
            Parser.expect('OPERATOR')
             Parser.nexttoken('')
             return (NAME, u'k')
            return u'*'
            Parser.parse_expr('7')
             Parser.parse_term('')
              Parser.parse_atom('')
               Parser.expect('NAME')
                Parser.nexttoken('')
                return (OPERATOR, u',')
               return u'k'
              return Name(u'k')
             return Name(u'k')
            return Name(u'k')
           return Binop(Name(u'k'), u'*', Name(u'k'))
           Parser.nexttoken('')
           return (NUMBER, u'2')
           Parser.parse_expr('')
            Parser.parse_term('')
             Parser.parse_atom('')
              Parser.expect('NUMBER')
               Parser.nexttoken('')
               return (OPERATOR, u'*')
              return u'2'
             return Number(u'2')
            return Number(u'2')
            Parser.expect('OPERATOR')
             Parser.nexttoken('')
             return (NAME, u'k')
            return u'*'
            Parser.parse_expr('7')
             Parser.parse_term('')
              Parser.parse_atom('')
               Parser.expect('NAME')
                Parser.nexttoken('')
                return (OPERATOR, u'+')
               return u'k'
              return Name(u'k')
             return Name(u'k')
            return Name(u'k')
            Parser.expect('OPERATOR')
             Parser.nexttoken('')
             return (NUMBER, u'1')
            return u'+'
            Parser.parse_expr('6')
             Parser.parse_term('')
              Parser.parse_atom('')
               Parser.expect('NUMBER')
                Parser.nexttoken('')
                return (OPERATOR, u',')
               return u'1'
              return Number(u'1')
             return Number(u'1')
            return Number(u'1')
           return Binop(Binop(Number(u'2'), u'*', Name(u'k')), u'+', Number(u'1'))
           Parser.nexttoken('')
           return (NAME, u'k')
           Parser.parse_expr('')
            Parser.parse_term('')
             Parser.parse_atom('')
              Parser.expect('NAME')
               Parser.nexttoken('')
               return (OPERATOR, u'+')
              return u'k'
             return Name(u'k')
            return Name(u'k')
            Parser.expect('OPERATOR')
             Parser.nexttoken('')
             return (NUMBER, u'1')
            return u'+'
            Parser.parse_expr('6')
             Parser.parse_term('')
              Parser.parse_atom('')
               Parser.expect('NUMBER')
                Parser.nexttoken('')
                return (NEWLINE, '')
               return u'1'
              return Number(u'1')
             return Number(u'1')
            return Number(u'1')
           return Binop(Name(u'k'), u'+', Number(u'1'))
          return Exprs([Binop(Name(u'k'), u'*', Name(u'k')), Binop(Binop(Number(u'2'), u'*', Name(u'k')), u'+', Number(u'1')), Binop(Name(u'k'), u'+', Number(u'1'))])
          Parser.expect('NEWLINE')
           Parser.nexttoken('')
           return (NAME, u'a')
          return ''
         return Assign([Exprs([Name(u'p'), Name(u'q'), Name(u'k')])], Exprs([Binop(Name(u'k'), u'*', Name(u'k')), Binop(Binop(Number(u'2'), u'*', Name(u'k')), u'+', Number(u'1')), Binop(Name(u'k'), u'+', Number(u'1'))]))
        return Assign([Exprs([Name(u'p'), Name(u'q'), Name(u'k')])], Exprs([Binop(Name(u'k'), u'*', Name(u'k')), Binop(Binop(Number(u'2'), u'*', Name(u'k')), u'+', Number(u'1')), Binop(Name(u'k'), u'+', Number(u'1'))]))
        Parser.parse_stmt('')
         Parser.parse_simple('')
          Parser.parse_exprs('')
           Parser.parse_expr('')
            Parser.parse_term('')
             Parser.parse_atom('')
              Parser.expect('NAME')
               Parser.nexttoken('')
               return (OPERATOR, u',')
              return u'a'
             return Name(u'a')
            return Name(u'a')
           return Name(u'a')
           Parser.nexttoken('')
           return (NAME, u'b')
           Parser.parse_expr('')
            Parser.parse_term('')
             Parser.parse_atom('')
              Parser.expect('NAME')
               Parser.nexttoken('')
               return (OPERATOR, u',')
              return u'b'
             return Name(u'b')
            return Name(u'b')
           return Name(u'b')
           Parser.nexttoken('')
           return (NAME, u'a1')
           Parser.parse_expr('')
            Parser.parse_term('')
             Parser.parse_atom('')
              Parser.expect('NAME')
               Parser.nexttoken('')
               return (OPERATOR, u',')
              return u'a1'
             return Name(u'a1')
            return Name(u'a1')
           return Name(u'a1')
           Parser.nexttoken('')
           return (NAME, u'b1')
           Parser.parse_expr('')
            Parser.parse_term('')
             Parser.parse_atom('')
              Parser.expect('NAME')
               Parser.nexttoken('')
               return (OPERATOR, u'=')
              return u'b1'
             return Name(u'b1')
            return Name(u'b1')
           return Name(u'b1')
          return Exprs([Name(u'a'), Name(u'b'), Name(u'a1'), Name(u'b1')])
          Parser.nexttoken('')
          return (NAME, u'a1')
          Parser.parse_exprs('')
           Parser.parse_expr('')
            Parser.parse_term('')
             Parser.parse_atom('')
              Parser.expect('NAME')
               Parser.nexttoken('')
               return (OPERATOR, u',')
              return u'a1'
             return Name(u'a1')
            return Name(u'a1')
           return Name(u'a1')
           Parser.nexttoken('')
           return (NAME, u'b1')
           Parser.parse_expr('')
            Parser.parse_term('')
             Parser.parse_atom('')
              Parser.expect('NAME')
               Parser.nexttoken('')
               return (OPERATOR, u',')
              return u'b1'
             return Name(u'b1')
            return Name(u'b1')
           return Name(u'b1')
           Parser.nexttoken('')
           return (NAME, u'p')
           Parser.parse_expr('')
            Parser.parse_term('')
             Parser.parse_atom('')
              Parser.expect('NAME')
               Parser.nexttoken('')
               return (OPERATOR, u'*')
              return u'p'
             return Name(u'p')
            return Name(u'p')
            Parser.expect('OPERATOR')
             Parser.nexttoken('')
             return (NAME, u'a')
            return u'*'
            Parser.parse_expr('7')
             Parser.parse_term('')
              Parser.parse_atom('')
               Parser.expect('NAME')
                Parser.nexttoken('')
                return (OPERATOR, u'+')
               return u'a'
              return Name(u'a')
             return Name(u'a')
            return Name(u'a')
            Parser.expect('OPERATOR')
             Parser.nexttoken('')
             return (NAME, u'q')
            return u'+'
            Parser.parse_expr('6')
             Parser.parse_term('')
              Parser.parse_atom('')
               Parser.expect('NAME')
                Parser.nexttoken('')
                return (OPERATOR, u'*')
               return u'q'
              return Name(u'q')
             return Name(u'q')
             Parser.expect('OPERATOR')
              Parser.nexttoken('')
              return (NAME, u'a1')
             return u'*'
             Parser.parse_expr('7')
              Parser.parse_term('')
               Parser.parse_atom('')
                Parser.expect('NAME')
                 Parser.nexttoken('')
                 return (OPERATOR, u',')
                return u'a1'
               return Name(u'a1')
              return Name(u'a1')
             return Name(u'a1')
            return Binop(Name(u'q'), u'*', Name(u'a1'))
           return Binop(Binop(Name(u'p'), u'*', Name(u'a')), u'+', Binop(Name(u'q'), u'*', Name(u'a1')))
           Parser.nexttoken('')
           return (NAME, u'p')
           Parser.parse_expr('')
            Parser.parse_term('')
             Parser.parse_atom('')
              Parser.expect('NAME')
               Parser.nexttoken('')
               return (OPERATOR, u'*')
              return u'p'
             return Name(u'p')
            return Name(u'p')
            Parser.expect('OPERATOR')
             Parser.nexttoken('')
             return (NAME, u'b')
            return u'*'
            Parser.parse_expr('7')
             Parser.parse_term('')
              Parser.parse_atom('')
               Parser.expect('NAME')
                Parser.nexttoken('')
                return (OPERATOR, u'+')
               return u'b'
              return Name(u'b')
             return Name(u'b')
            return Name(u'b')
            Parser.expect('OPERATOR')
             Parser.nexttoken('')
             return (NAME, u'q')
            return u'+'
            Parser.parse_expr('6')
             Parser.parse_term('')
              Parser.parse_atom('')
               Parser.expect('NAME')
                Parser.nexttoken('')
                return (OPERATOR, u'*')
               return u'q'
              return Name(u'q')
             return Name(u'q')
             Parser.expect('OPERATOR')
              Parser.nexttoken('')
              return (NAME, u'b1')
             return u'*'
             Parser.parse_expr('7')
              Parser.parse_term('')
               Parser.parse_atom('')
                Parser.expect('NAME')
                 Parser.nexttoken('')
                 return (NEWLINE, '')
                return u'b1'
               return Name(u'b1')
              return Name(u'b1')
             return Name(u'b1')
            return Binop(Name(u'q'), u'*', Name(u'b1'))
           return Binop(Binop(Name(u'p'), u'*', Name(u'b')), u'+', Binop(Name(u'q'), u'*', Name(u'b1')))
          return Exprs([Name(u'a1'), Name(u'b1'), Binop(Binop(Name(u'p'), u'*', Name(u'a')), u'+', Binop(Name(u'q'), u'*', Name(u'a1'))), Binop(Binop(Name(u'p'), u'*', Name(u'b')), u'+', Binop(Name(u'q'), u'*', Name(u'b1')))])
          Parser.expect('NEWLINE')
           Parser.nexttoken('')
           return (NAME, u'd')
          return ''
         return Assign([Exprs([Name(u'a'), Name(u'b'), Name(u'a1'), Name(u'b1')])], Exprs([Name(u'a1'), Name(u'b1'), Binop(Binop(Name(u'p'), u'*', Name(u'a')), u'+', Binop(Name(u'q'), u'*', Name(u'a1'))), Binop(Binop(Name(u'p'), u'*', Name(u'b')), u'+', Binop(Name(u'q'), u'*', Name(u'b1')))]))
        return Assign([Exprs([Name(u'a'), Name(u'b'), Name(u'a1'), Name(u'b1')])], Exprs([Name(u'a1'), Name(u'b1'), Binop(Binop(Name(u'p'), u'*', Name(u'a')), u'+', Binop(Name(u'q'), u'*', Name(u'a1'))), Binop(Binop(Name(u'p'), u'*', Name(u'b')), u'+', Binop(Name(u'q'), u'*', Name(u'b1')))]))
        Parser.parse_stmt('')
         Parser.parse_simple('')
          Parser.parse_exprs('')
           Parser.parse_expr('')
            Parser.parse_term('')
             Parser.parse_atom('')
              Parser.expect('NAME')
               Parser.nexttoken('')
               return (OPERATOR, u',')
              return u'd'
             return Name(u'd')
            return Name(u'd')
           return Name(u'd')
           Parser.nexttoken('')
           return (NAME, u'd1')
           Parser.parse_expr('')
            Parser.parse_term('')
             Parser.parse_atom('')
              Parser.expect('NAME')
               Parser.nexttoken('')
               return (OPERATOR, u'=')
              return u'd1'
             return Name(u'd1')
            return Name(u'd1')
           return Name(u'd1')
          return Exprs([Name(u'd'), Name(u'd1')])
          Parser.nexttoken('')
          return (NAME, u'a')
          Parser.parse_exprs('')
           Parser.parse_expr('')
            Parser.parse_term('')
             Parser.parse_atom('')
              Parser.expect('NAME')
               Parser.nexttoken('')
               return (OPERATOR, u'//')
              return u'a'
             return Name(u'a')
            return Name(u'a')
            Parser.expect('OPERATOR')
             Parser.nexttoken('')
             return (NAME, u'b')
            return u'//'
            Parser.parse_expr('7')
             Parser.parse_term('')
              Parser.parse_atom('')
               Parser.expect('NAME')
                Parser.nexttoken('')
                return (OPERATOR, u',')
               return u'b'
              return Name(u'b')
             return Name(u'b')
            return Name(u'b')
           return Binop(Name(u'a'), u'//', Name(u'b'))
           Parser.nexttoken('')
           return (NAME, u'a1')
           Parser.parse_expr('')
            Parser.parse_term('')
             Parser.parse_atom('')
              Parser.expect('NAME')
               Parser.nexttoken('')
               return (OPERATOR, u'//')
              return u'a1'
             return Name(u'a1')
            return Name(u'a1')
            Parser.expect('OPERATOR')
             Parser.nexttoken('')
             return (NAME, u'b1')
            return u'//'
            Parser.parse_expr('7')
             Parser.parse_term('')
              Parser.parse_atom('')
               Parser.expect('NAME')
                Parser.nexttoken('')
                return (NEWLINE, '')
               return u'b1'
              return Name(u'b1')
             return Name(u'b1')
            return Name(u'b1')
           return Binop(Name(u'a1'), u'//', Name(u'b1'))
          return Exprs([Binop(Name(u'a'), u'//', Name(u'b')), Binop(Name(u'a1'), u'//', Name(u'b1'))])
          Parser.expect('NEWLINE')
           Parser.nexttoken('')
           return (NAME, u'while')
          return ''
         return Assign([Exprs([Name(u'd'), Name(u'd1')])], Exprs([Binop(Name(u'a'), u'//', Name(u'b')), Binop(Name(u'a1'), u'//', Name(u'b1'))]))
        return Assign([Exprs([Name(u'd'), Name(u'd1')])], Exprs([Binop(Name(u'a'), u'//', Name(u'b')), Binop(Name(u'a1'), u'//', Name(u'b1'))]))
        Parser.parse_stmt('')
         Parser.parse_while('')
          Parser.expect("NAME, 'while'")
           Parser.nexttoken('')
           return (NAME, u'd')
          return u'while'
          Parser.parse_expr('')
           Parser.parse_term('')
            Parser.parse_atom('')
             Parser.expect('NAME')
              Parser.nexttoken('')
              return (OPERATOR, u'==')
             return u'd'
            return Name(u'd')
           return Name(u'd')
           Parser.expect('OPERATOR')
            Parser.nexttoken('')
            return (NAME, u'd1')
           return u'=='
           Parser.parse_expr('1')
            Parser.parse_term('')
             Parser.parse_atom('')
              Parser.expect('NAME')
               Parser.nexttoken('')
               return (OPERATOR, u':')
              return u'd1'
             return Name(u'd1')
            return Name(u'd1')
           return Name(u'd1')
          return Binop(Name(u'd'), u'==', Name(u'd1'))
          Parser.expect("OPERATOR, ':'")
           Parser.nexttoken('')
           return (NEWLINE, '')
          return u':'
          Parser.expect('NEWLINE')
           Parser.nexttoken('')
           return (INDENT, '')
          return ''
          Parser.parse_body('')
           Parser.expect('INDENT')
            Parser.nexttoken('')
            return (NAME, u'yield')
           return ''
           Parser.parse_stmt('')
            Parser.parse_yield('')
             Parser.expect("NAME, 'yield'")
              Parser.nexttoken('')
              return (NAME, u'd')
             return u'yield'
             Parser.parse_exprs('')
              Parser.parse_expr('')
               Parser.parse_term('')
                Parser.parse_atom('')
                 Parser.expect('NAME')
                  Parser.nexttoken('')
                  return (NEWLINE, '')
                 return u'd'
                return Name(u'd')
               return Name(u'd')
              return Name(u'd')
             return Name(u'd')
             Parser.expect('NEWLINE')
              Parser.nexttoken('')
              return (NAME, u'a')
             return ''
            return Yield(Name(u'd'))
           return Yield(Name(u'd'))
           Parser.parse_stmt('')
            Parser.parse_simple('')
             Parser.parse_exprs('')
              Parser.parse_expr('')
               Parser.parse_term('')
                Parser.parse_atom('')
                 Parser.expect('NAME')
                  Parser.nexttoken('')
                  return (OPERATOR, u',')
                 return u'a'
                return Name(u'a')
               return Name(u'a')
              return Name(u'a')
              Parser.nexttoken('')
              return (NAME, u'a1')
              Parser.parse_expr('')
               Parser.parse_term('')
                Parser.parse_atom('')
                 Parser.expect('NAME')
                  Parser.nexttoken('')
                  return (OPERATOR, u'=')
                 return u'a1'
                return Name(u'a1')
               return Name(u'a1')
              return Name(u'a1')
             return Exprs([Name(u'a'), Name(u'a1')])
             Parser.nexttoken('')
             return (NUMBER, u'10')
             Parser.parse_exprs('')
              Parser.parse_expr('')
               Parser.parse_term('')
                Parser.parse_atom('')
                 Parser.expect('NUMBER')
                  Parser.nexttoken('')
                  return (OPERATOR, u'*')
                 return u'10'
                return Number(u'10')
               return Number(u'10')
               Parser.expect('OPERATOR')
                Parser.nexttoken('')
                return (OPERATOR, u'(')
               return u'*'
               Parser.parse_expr('7')
                Parser.parse_term('')
                 Parser.parse_atom('')
                  Parser.nexttoken('')
                  return (NAME, u'a')
                  Parser.parse_exprs('')
                   Parser.parse_expr('')
                    Parser.parse_term('')
                     Parser.parse_atom('')
                      Parser.expect('NAME')
                       Parser.nexttoken('')
                       return (OPERATOR, u'%')
                      return u'a'
                     return Name(u'a')
                    return Name(u'a')
                    Parser.expect('OPERATOR')
                     Parser.nexttoken('')
                     return (NAME, u'b')
                    return u'%'
                    Parser.parse_expr('7')
                     Parser.parse_term('')
                      Parser.parse_atom('')
                       Parser.expect('NAME')
                        Parser.nexttoken('')
                        return (OPERATOR, u')')
                       return u'b'
                      return Name(u'b')
                     return Name(u'b')
                    return Name(u'b')
                   return Binop(Name(u'a'), u'%', Name(u'b'))
                  return Binop(Name(u'a'), u'%', Name(u'b'))
                  Parser.expect("OPERATOR, ')'")
                   Parser.nexttoken('')
                   return (OPERATOR, u',')
                  return u')'
                 return Binop(Name(u'a'), u'%', Name(u'b'))
                return Binop(Name(u'a'), u'%', Name(u'b'))
               return Binop(Name(u'a'), u'%', Name(u'b'))
              return Binop(Number(u'10'), u'*', Binop(Name(u'a'), u'%', Name(u'b')))
              Parser.nexttoken('')
              return (NUMBER, u'10')
              Parser.parse_expr('')
               Parser.parse_term('')
                Parser.parse_atom('')
                 Parser.expect('NUMBER')
                  Parser.nexttoken('')
                  return (OPERATOR, u'*')
                 return u'10'
                return Number(u'10')
               return Number(u'10')
               Parser.expect('OPERATOR')
                Parser.nexttoken('')
                return (OPERATOR, u'(')
               return u'*'
               Parser.parse_expr('7')
                Parser.parse_term('')
                 Parser.parse_atom('')
                  Parser.nexttoken('')
                  return (NAME, u'a1')
                  Parser.parse_exprs('')
                   Parser.parse_expr('')
                    Parser.parse_term('')
                     Parser.parse_atom('')
                      Parser.expect('NAME')
                       Parser.nexttoken('')
                       return (OPERATOR, u'%')
                      return u'a1'
                     return Name(u'a1')
                    return Name(u'a1')
                    Parser.expect('OPERATOR')
                     Parser.nexttoken('')
                     return (NAME, u'b1')
                    return u'%'
                    Parser.parse_expr('7')
                     Parser.parse_term('')
                      Parser.parse_atom('')
                       Parser.expect('NAME')
                        Parser.nexttoken('')
                        return (OPERATOR, u')')
                       return u'b1'
                      return Name(u'b1')
                     return Name(u'b1')
                    return Name(u'b1')
                   return Binop(Name(u'a1'), u'%', Name(u'b1'))
                  return Binop(Name(u'a1'), u'%', Name(u'b1'))
                  Parser.expect("OPERATOR, ')'")
                   Parser.nexttoken('')
                   return (NEWLINE, '')
                  return u')'
                 return Binop(Name(u'a1'), u'%', Name(u'b1'))
                return Binop(Name(u'a1'), u'%', Name(u'b1'))
               return Binop(Name(u'a1'), u'%', Name(u'b1'))
              return Binop(Number(u'10'), u'*', Binop(Name(u'a1'), u'%', Name(u'b1')))
             return Exprs([Binop(Number(u'10'), u'*', Binop(Name(u'a'), u'%', Name(u'b'))), Binop(Number(u'10'), u'*', Binop(Name(u'a1'), u'%', Name(u'b1')))])
             Parser.expect('NEWLINE')
              Parser.nexttoken('')
              return (NAME, u'd')
             return ''
            return Assign([Exprs([Name(u'a'), Name(u'a1')])], Exprs([Binop(Number(u'10'), u'*', Binop(Name(u'a'), u'%', Name(u'b'))), Binop(Number(u'10'), u'*', Binop(Name(u'a1'), u'%', Name(u'b1')))]))
           return Assign([Exprs([Name(u'a'), Name(u'a1')])], Exprs([Binop(Number(u'10'), u'*', Binop(Name(u'a'), u'%', Name(u'b'))), Binop(Number(u'10'), u'*', Binop(Name(u'a1'), u'%', Name(u'b1')))]))
           Parser.parse_stmt('')
            Parser.parse_simple('')
             Parser.parse_exprs('')
              Parser.parse_expr('')
               Parser.parse_term('')
                Parser.parse_atom('')
                 Parser.expect('NAME')
                  Parser.nexttoken('')
                  return (OPERATOR, u',')
                 return u'd'
                return Name(u'd')
               return Name(u'd')
              return Name(u'd')
              Parser.nexttoken('')
              return (NAME, u'd1')
              Parser.parse_expr('')
               Parser.parse_term('')
                Parser.parse_atom('')
                 Parser.expect('NAME')
                  Parser.nexttoken('')
                  return (OPERATOR, u'=')
                 return u'd1'
                return Name(u'd1')
               return Name(u'd1')
              return Name(u'd1')
             return Exprs([Name(u'd'), Name(u'd1')])
             Parser.nexttoken('')
             return (NAME, u'a')
             Parser.parse_exprs('')
              Parser.parse_expr('')
               Parser.parse_term('')
                Parser.parse_atom('')
                 Parser.expect('NAME')
                  Parser.nexttoken('')
                  return (OPERATOR, u'//')
                 return u'a'
                return Name(u'a')
               return Name(u'a')
               Parser.expect('OPERATOR')
                Parser.nexttoken('')
                return (NAME, u'b')
               return u'//'
               Parser.parse_expr('7')
                Parser.parse_term('')
                 Parser.parse_atom('')
                  Parser.expect('NAME')
                   Parser.nexttoken('')
                   return (OPERATOR, u',')
                  return u'b'
                 return Name(u'b')
                return Name(u'b')
               return Name(u'b')
              return Binop(Name(u'a'), u'//', Name(u'b'))
              Parser.nexttoken('')
              return (NAME, u'a1')
              Parser.parse_expr('')
               Parser.parse_term('')
                Parser.parse_atom('')
                 Parser.expect('NAME')
                  Parser.nexttoken('')
                  return (OPERATOR, u'//')
                 return u'a1'
                return Name(u'a1')
               return Name(u'a1')
               Parser.expect('OPERATOR')
                Parser.nexttoken('')
                return (NAME, u'b1')
               return u'//'
               Parser.parse_expr('7')
                Parser.parse_term('')
                 Parser.parse_atom('')
                  Parser.expect('NAME')
                   Parser.nexttoken('')
                   return (NEWLINE, '')
                  return u'b1'
                 return Name(u'b1')
                return Name(u'b1')
               return Name(u'b1')
              return Binop(Name(u'a1'), u'//', Name(u'b1'))
             return Exprs([Binop(Name(u'a'), u'//', Name(u'b')), Binop(Name(u'a1'), u'//', Name(u'b1'))])
             Parser.expect('NEWLINE')
              Parser.nexttoken('')
              return (DEDENT, '')
             return ''
            return Assign([Exprs([Name(u'd'), Name(u'd1')])], Exprs([Binop(Name(u'a'), u'//', Name(u'b')), Binop(Name(u'a1'), u'//', Name(u'b1'))]))
           return Assign([Exprs([Name(u'd'), Name(u'd1')])], Exprs([Binop(Name(u'a'), u'//', Name(u'b')), Binop(Name(u'a1'), u'//', Name(u'b1'))]))
           Parser.expect('DEDENT')
            Parser.nexttoken('')
            return (DEDENT, '')
           return ''
          return [Yield(Name(u'd')), Assign([Exprs([Name(u'a'), Name(u'a1')])], Exprs([Binop(Number(u'10'), u'*', Binop(Name(u'a'), u'%', Name(u'b'))), Binop(Number(u'10'), u'*', Binop(Name(u'a1'), u'%', Name(u'b1')))])), Assign([Exprs([Name(u'd'), Name(u'd1')])], Exprs([Binop(Name(u'a'), u'//', Name(u'b')), Binop(Name(u'a1'), u'//', Name(u'b1'))]))]
         return While(Binop(Name(u'd'), u'==', Name(u'd1')), ...)
        return While(Binop(Name(u'd'), u'==', Name(u'd1')), ...)
        Parser.expect('DEDENT')
         Parser.nexttoken('')
         return (DEDENT, '')
        return ''
       return [Assign([Exprs([Name(u'p'), Name(u'q'), Name(u'k')])], Exprs([Binop(Name(u'k'), u'*', Name(u'k')), Binop(Binop(Number(u'2'), u'*', Name(u'k')), u'+', Number(u'1')), Binop(Name(u'k'), u'+', Number(u'1'))])), Assign([Exprs([Name(u'a'), Name(u'b'), Name(u'a1'), Name(u'b1')])], Exprs([Name(u'a1'), Name(u'b1'), Binop(Binop(Name(u'p'), u'*', Name(u'a')), u'+', Binop(Name(u'q'), u'*', Name(u'a1'))), Binop(Binop(Name(u'p'), u'*', Name(u'b')), u'+', Binop(Name(u'q'), u'*', Name(u'b1')))])), Assign([Exprs([Name(u'd'), Name(u'd1')])], Exprs([Binop(Name(u'a'), u'//', Name(u'b')), Binop(Name(u'a1'), u'//', Name(u'b1'))])), While(Binop(Name(u'd'), u'==', Name(u'd1')), ...)]
      return While(Number(u'1'), ...)
     return While(Number(u'1'), ...)
     Parser.expect('DEDENT')
      Parser.nexttoken('')
      return (NAME, u'def')
     return ''
    return [Assign([Exprs([Name(u'k'), Name(u'a'), Name(u'b'), Name(u'a1'), Name(u'b1')])], Exprs([Number(u'2'), Number(u'4'), Number(u'1'), Number(u'12'), Number(u'4')])), While(Number(u'1'), ...)]
   return Define(u'pi', [], ...)
  return Define(u'pi', [], ...)
  Parser.parse_stmt('')
   Parser.parse_def('')
    Parser.expect("NAME, 'def'")
     Parser.nexttoken('')
     return (NAME, u'strhash')
    return u'def'
    Parser.expect('NAME')
     Parser.nexttoken('')
     return (OPERATOR, u'(')
    return u'strhash'
    Parser.expect("OPERATOR, '('")
     Parser.nexttoken('')
     return (NAME, u's')
    return u'('
    Parser.expect('NAME')
     Parser.nexttoken('')
     return (OPERATOR, u')')
    return u's'
    Parser.expect("OPERATOR, ')'")
     Parser.nexttoken('')
     return (OPERATOR, u':')
    return u')'
    Parser.expect("OPERATOR, ':'")
     Parser.nexttoken('')
     return (NEWLINE, '')
    return u':'
    Parser.expect('NEWLINE')
     Parser.nexttoken('')
     return (INDENT, '')
    return ''
    Parser.parse_body('')
     Parser.expect('INDENT')
      Parser.nexttoken('')
      return (NAME, u'if')
     return ''
     Parser.parse_stmt('')
      Parser.parse_if('')
       Parser.expect("NAME, 'if'")
        Parser.nexttoken('')
        return (NAME, u's')
       return u'if'
       Parser.parse_expr('')
        Parser.parse_term('')
         Parser.parse_atom('')
          Parser.expect('NAME')
           Parser.nexttoken('')
           return (OPERATOR, u'==')
          return u's'
         return Name(u's')
        return Name(u's')
        Parser.expect('OPERATOR')
         Parser.nexttoken('')
         return (STRING, u"''")
        return u'=='
        Parser.parse_expr('1')
         Parser.parse_term('')
          Parser.parse_atom('')
           Parser.expect('STRING')
            Parser.nexttoken('')
            return (OPERATOR, u':')
           return u"''"
          return String(u"''")
         return String(u"''")
        return String(u"''")
       return Binop(Name(u's'), u'==', String(u"''"))
       Parser.expect("OPERATOR, ':'")
        Parser.nexttoken('')
        return (NEWLINE, '')
       return u':'
       Parser.expect('NEWLINE')
        Parser.nexttoken('')
        return (INDENT, '')
       return ''
       Parser.parse_body('')
        Parser.expect('INDENT')
         Parser.nexttoken('')
         return (NAME, u'return')
        return ''
        Parser.parse_stmt('')
         Parser.parse_return('')
          Parser.expect("NAME, 'return'")
           Parser.nexttoken('')
           return (NUMBER, u'0')
          return u'return'
          Parser.parse_exprs('')
           Parser.parse_expr('')
            Parser.parse_term('')
             Parser.parse_atom('')
              Parser.expect('NUMBER')
               Parser.nexttoken('')
               return (NEWLINE, '')
              return u'0'
             return Number(u'0')
            return Number(u'0')
           return Number(u'0')
          return Number(u'0')
          Parser.expect('NEWLINE')
           Parser.nexttoken('')
           return (DEDENT, '')
          return ''
         return Return(Number(u'0'))
        return Return(Number(u'0'))
        Parser.expect('DEDENT')
         Parser.nexttoken('')
         return (NAME, u'x')
        return ''
       return [Return(Number(u'0'))]
      return If(Binop(Name(u's'), u'==', String(u"''")), ...)
     return If(Binop(Name(u's'), u'==', String(u"''")), ...)
     Parser.parse_stmt('')
      Parser.parse_simple('')
       Parser.parse_exprs('')
        Parser.parse_expr('')
         Parser.parse_term('')
          Parser.parse_atom('')
           Parser.expect('NAME')
            Parser.nexttoken('')
            return (OPERATOR, u'=')
           return u'x'
          return Name(u'x')
         return Name(u'x')
        return Name(u'x')
       return Name(u'x')
       Parser.nexttoken('')
       return (NAME, u'ord')
       Parser.parse_exprs('')
        Parser.parse_expr('')
         Parser.parse_term('')
          Parser.parse_atom('')
           Parser.expect('NAME')
            Parser.nexttoken('')
            return (OPERATOR, u'(')
           return u'ord'
          return Name(u'ord')
          Parser.nexttoken('')
          return (NAME, u's')
          Parser.parse_exprs('')
           Parser.parse_expr('')
            Parser.parse_term('')
             Parser.parse_atom('')
              Parser.expect('NAME')
               Parser.nexttoken('')
               return (OPERATOR, u'[')
              return u's'
             return Name(u's')
             Parser.nexttoken('')
             return (NUMBER, u'0')
             Parser.parse_exprs('')
              Parser.parse_expr('')
               Parser.parse_term('')
                Parser.parse_atom('')
                 Parser.expect('NUMBER')
                  Parser.nexttoken('')
                  return (OPERATOR, u']')
                 return u'0'
                return Number(u'0')
               return Number(u'0')
              return Number(u'0')
             return Number(u'0')
             Parser.expect("OPERATOR, ']'")
              Parser.nexttoken('')
              return (OPERATOR, u')')
             return u']'
            return Index(Name(u's'), Number(u'0'))
           return Index(Name(u's'), Number(u'0'))
          return Index(Name(u's'), Number(u'0'))
          Parser.expect("OPERATOR, ')'")
           Parser.nexttoken('')
           return (OPERATOR, u'<<')
          return u')'
         return Call(Name(u'ord'), [Index(Name(u's'), Number(u'0'))])
         Parser.expect('OPERATOR')
          Parser.nexttoken('')
          return (NUMBER, u'7')
         return u'<<'
         Parser.parse_expr('5')
          Parser.parse_term('')
           Parser.parse_atom('')
            Parser.expect('NUMBER')
             Parser.nexttoken('')
             return (NEWLINE, '')
            return u'7'
           return Number(u'7')
          return Number(u'7')
         return Number(u'7')
        return Binop(Call(Name(u'ord'), [Index(Name(u's'), Number(u'0'))]), u'<<', Number(u'7'))
       return Binop(Call(Name(u'ord'), [Index(Name(u's'), Number(u'0'))]), u'<<', Number(u'7'))
       Parser.expect('NEWLINE')
        Parser.nexttoken('')
        return (NAME, u'for')
       return ''
      return Assign([Name(u'x')], Binop(Call(Name(u'ord'), [Index(Name(u's'), Number(u'0'))]), u'<<', Number(u'7')))
     return Assign([Name(u'x')], Binop(Call(Name(u'ord'), [Index(Name(u's'), Number(u'0'))]), u'<<', Number(u'7')))
     Parser.parse_stmt('')
      Parser.parse_for('')
       Parser.expect("NAME, 'for'")
        Parser.nexttoken('')
        return (NAME, u'c')
       return u'for'
       Parser.parse_expr('')
        Parser.parse_term('')
         Parser.parse_atom('')
          Parser.expect('NAME')
           Parser.nexttoken('')
           return (NAME, u'in')
          return u'c'
         return Name(u'c')
        return Name(u'c')
       return Name(u'c')
       Parser.expect("NAME, 'in'")
        Parser.nexttoken('')
        return (NAME, u's')
       return u'in'
       Parser.parse_expr('')
        Parser.parse_term('')
         Parser.parse_atom('')
          Parser.expect('NAME')
           Parser.nexttoken('')
           return (OPERATOR, u':')
          return u's'
         return Name(u's')
        return Name(u's')
       return Name(u's')
       Parser.expect("OPERATOR, ':'")
        Parser.nexttoken('')
        return (NEWLINE, '')
       return u':'
       Parser.expect('NEWLINE')
        Parser.nexttoken('')
        return (INDENT, '')
       return ''
       Parser.parse_body('')
        Parser.expect('INDENT')
         Parser.nexttoken('')
         return (NAME, u'x')
        return ''
        Parser.parse_stmt('')
         Parser.parse_simple('')
          Parser.parse_exprs('')
           Parser.parse_expr('')
            Parser.parse_term('')
             Parser.parse_atom('')
              Parser.expect('NAME')
               Parser.nexttoken('')
               return (OPERATOR, u'=')
              return u'x'
             return Name(u'x')
            return Name(u'x')
           return Name(u'x')
          return Name(u'x')
          Parser.nexttoken('')
          return (OPERATOR, u'(')
          Parser.parse_exprs('')
           Parser.parse_expr('')
            Parser.parse_term('')
             Parser.parse_atom('')
              Parser.nexttoken('')
              return (OPERATOR, u'(')
              Parser.parse_exprs('')
               Parser.parse_expr('')
                Parser.parse_term('')
                 Parser.parse_atom('')
                  Parser.nexttoken('')
                  return (NUMBER, u'1000003')
                  Parser.parse_exprs('')
                   Parser.parse_expr('')
                    Parser.parse_term('')
                     Parser.parse_atom('')
                      Parser.expect('NUMBER')
                       Parser.nexttoken('')
                       return (OPERATOR, u'*')
                      return u'1000003'
                     return Number(u'1000003')
                    return Number(u'1000003')
                    Parser.expect('OPERATOR')
                     Parser.nexttoken('')
                     return (NAME, u'x')
                    return u'*'
                    Parser.parse_expr('7')
                     Parser.parse_term('')
                      Parser.parse_atom('')
                       Parser.expect('NAME')
                        Parser.nexttoken('')
                        return (OPERATOR, u')')
                       return u'x'
                      return Name(u'x')
                     return Name(u'x')
                    return Name(u'x')
                   return Binop(Number(u'1000003'), u'*', Name(u'x'))
                  return Binop(Number(u'1000003'), u'*', Name(u'x'))
                  Parser.expect("OPERATOR, ')'")
                   Parser.nexttoken('')
                   return (OPERATOR, u'^')
                  return u')'
                 return Binop(Number(u'1000003'), u'*', Name(u'x'))
                return Binop(Number(u'1000003'), u'*', Name(u'x'))
                Parser.expect('OPERATOR')
                 Parser.nexttoken('')
                 return (NAME, u'ord')
                return u'^'
                Parser.parse_expr('3')
                 Parser.parse_term('')
                  Parser.parse_atom('')
                   Parser.expect('NAME')
                    Parser.nexttoken('')
                    return (OPERATOR, u'(')
                   return u'ord'
                  return Name(u'ord')
                  Parser.nexttoken('')
                  return (NAME, u'c')
                  Parser.parse_exprs('')
                   Parser.parse_expr('')
                    Parser.parse_term('')
                     Parser.parse_atom('')
                      Parser.expect('NAME')
                       Parser.nexttoken('')
                       return (OPERATOR, u')')
                      return u'c'
                     return Name(u'c')
                    return Name(u'c')
                   return Name(u'c')
                  return Name(u'c')
                  Parser.expect("OPERATOR, ')'")
                   Parser.nexttoken('')
                   return (OPERATOR, u')')
                  return u')'
                 return Call(Name(u'ord'), [Name(u'c')])
                return Call(Name(u'ord'), [Name(u'c')])
               return Binop(Binop(Number(u'1000003'), u'*', Name(u'x')), u'^', Call(Name(u'ord'), [Name(u'c')]))
              return Binop(Binop(Number(u'1000003'), u'*', Name(u'x')), u'^', Call(Name(u'ord'), [Name(u'c')]))
              Parser.expect("OPERATOR, ')'")
               Parser.nexttoken('')
               return (OPERATOR, u'&')
              return u')'
             return Binop(Binop(Number(u'1000003'), u'*', Name(u'x')), u'^', Call(Name(u'ord'), [Name(u'c')]))
            return Binop(Binop(Number(u'1000003'), u'*', Name(u'x')), u'^', Call(Name(u'ord'), [Name(u'c')]))
            Parser.expect('OPERATOR')
             Parser.nexttoken('')
             return (NUMBER, u'4294967295')
            return u'&'
            Parser.parse_expr('4')
             Parser.parse_term('')
              Parser.parse_atom('')
               Parser.expect('NUMBER')
                Parser.nexttoken('')
                return (NEWLINE, '')
               return u'4294967295'
              return Number(u'4294967295')
             return Number(u'4294967295')
            return Number(u'4294967295')
           return Binop(Binop(Binop(Number(u'1000003'), u'*', Name(u'x')), u'^', Call(Name(u'ord'), [Name(u'c')])), u'&', Number(u'4294967295'))
          return Binop(Binop(Binop(Number(u'1000003'), u'*', Name(u'x')), u'^', Call(Name(u'ord'), [Name(u'c')])), u'&', Number(u'4294967295'))
          Parser.expect('NEWLINE')
           Parser.nexttoken('')
           return (DEDENT, '')
          return ''
         return Assign([Name(u'x')], Binop(Binop(Binop(Number(u'1000003'), u'*', Name(u'x')), u'^', Call(Name(u'ord'), [Name(u'c')])), u'&', Number(u'4294967295')))
        return Assign([Name(u'x')], Binop(Binop(Binop(Number(u'1000003'), u'*', Name(u'x')), u'^', Call(Name(u'ord'), [Name(u'c')])), u'&', Number(u'4294967295')))
        Parser.expect('DEDENT')
         Parser.nexttoken('')
         return (NAME, u'return')
        return ''
       return [Assign([Name(u'x')], Binop(Binop(Binop(Number(u'1000003'), u'*', Name(u'x')), u'^', Call(Name(u'ord'), [Name(u'c')])), u'&', Number(u'4294967295')))]
      return For(Name(u'c'), Name(u's'), ...)
     return For(Name(u'c'), Name(u's'), ...)
     Parser.parse_stmt('')
      Parser.parse_return('')
       Parser.expect("NAME, 'return'")
        Parser.nexttoken('')
        return (NAME, u'x')
       return u'return'
       Parser.parse_exprs('')
        Parser.parse_expr('')
         Parser.parse_term('')
          Parser.parse_atom('')
           Parser.expect('NAME')
            Parser.nexttoken('')
            return (OPERATOR, u'^')
           return u'x'
          return Name(u'x')
         return Name(u'x')
         Parser.expect('OPERATOR')
          Parser.nexttoken('')
          return (NAME, u'len')
         return u'^'
         Parser.parse_expr('3')
          Parser.parse_term('')
           Parser.parse_atom('')
            Parser.expect('NAME')
             Parser.nexttoken('')
             return (OPERATOR, u'(')
            return u'len'
           return Name(u'len')
           Parser.nexttoken('')
           return (NAME, u's')
           Parser.parse_exprs('')
            Parser.parse_expr('')
             Parser.parse_term('')
              Parser.parse_atom('')
               Parser.expect('NAME')
                Parser.nexttoken('')
                return (OPERATOR, u')')
               return u's'
              return Name(u's')
             return Name(u's')
            return Name(u's')
           return Name(u's')
           Parser.expect("OPERATOR, ')'")
            Parser.nexttoken('')
            return (NEWLINE, '')
           return u')'
          return Call(Name(u'len'), [Name(u's')])
         return Call(Name(u'len'), [Name(u's')])
        return Binop(Name(u'x'), u'^', Call(Name(u'len'), [Name(u's')]))
       return Binop(Name(u'x'), u'^', Call(Name(u'len'), [Name(u's')]))
       Parser.expect('NEWLINE')
        Parser.nexttoken('')
        return (DEDENT, '')
       return ''
      return Return(Binop(Name(u'x'), u'^', Call(Name(u'len'), [Name(u's')])))
     return Return(Binop(Name(u'x'), u'^', Call(Name(u'len'), [Name(u's')])))
     Parser.expect('DEDENT')
      Parser.nexttoken('')
      return (EOF, '')
     return ''
    return [If(Binop(Name(u's'), u'==', String(u"''")), ...), Assign([Name(u'x')], Binop(Call(Name(u'ord'), [Index(Name(u's'), Number(u'0'))]), u'<<', Number(u'7'))), For(Name(u'c'), Name(u's'), ...), Return(Binop(Name(u'x'), u'^', Call(Name(u'len'), [Name(u's')])))]
   return Define(u'strhash', [u's'], ...)
  return Define(u'strhash', [u's'], ...)
 return [Define(u'pi', [], ...), Define(u'strhash', [u's'], ...)]
3 1 4 1 5 9 2 6 5 3 5 8 9 7 9 3 2 3 8 4 6 2 6 4 3 3 8 3 2 7 9 5 0 2 8 8 4 1 9 7 1 6 9 3 9 9 3 7 5 1 0 5 8 2 0 9 7 4 9 4 4 5 9 2 3 0 7 8 1 6 4 0 6 2 8 6 2 0 8 9 9 8 6 2 8 0 3 4 8 2 5 3 4 2 1 1 7 0 6 7 9 8 2 1 4 8 0 8 6 5 1 3 2 8 2 3 0 6 6 4 7 0 9 3 8 4 4 6 0 9 5 5 0 5 8 2 2 3 1 7 2 5 3 5 9 4 0 8 1 2 8 4 8 1 1 1 7 4 5 0 2 8 4 1 0 2 7 0 1 9 3 8 5 2 1 1 0 5 5 5 9 6 4 4 6 2 2 9 4 8 9 5 4 9 3 0 3 8 1 9 6 4 4 2 8 8 1 0 9 7 5 6 6 5 9 3 3 4 4 6 1 2 8 4 7 5 6 4 8 2 3 3 7 8 6 7 8 3 1 6 5 2 7 1 2 0 1 9 0 9 1 4 5 6 4 8 5 6 6 9 2 3 4 6 0 3 4 8 6 1 0 4 5 4 3 2 6 6 4 8 2 1 3 3 9 3 6 0 7 2 6 0 2 4 9 1 4 1 2 7 3 7 2 4 5 8 7 0 0 6 6 0 6 3 1 5 5 8 8 1 7 4 8 8 1 5 2 0 9 2 0 9 6 2 8 2 9 2 5 4 0 9 1 7 1 5 3 6 4 3 6 7 8 9 2 5 9 0 3 6 0 0 1 1 3 3 0 5 3 0 5 4 8 8 2 0 4 6 6 5 2 1 3 8 4 1 4 6 9 5 1 9 4 1 5 1 1 6 0 9 4 3 3 0 5 7 2 7 0 3 6 5 7 5 9 5 9 1 9 5 3 0 9 2 1 8 6 1 1 7 3 8 1 9 3 2 6 1 1 7 9 3 1 0 5 1 1 8 5 4 8 0 7 4 4 6 2 3 7 9 9 6 2 7 4 9 5 6 7 3 5 1 8 8 5 7 5 2 7 2 4 8 9 1 2 2 7 9 3 8 1 8 3 0 1 1 9 4 9 1 2 9 8 3 3 6 7 3 3 6 2 4 4 0 6 5 6 6 4 3 0 8 6 0 2 1 3 9 4 9 4 6 3 9 5 2 2 4 7 3 7 1 9 0 7 0 2 1 7 9 8 6 0 9 4 3 7 0 2 7 7 0 5 3 9 2 1 7 1 7 6 2 9 3 1 7 6 7 5 2 3 8 4 6 7 4 8 1 8 4 6 7 6 6 9 4 0 5 1 3 2 0 0 0 5 6 8 1 2 7 1 4 5 2 6 3 5 6 0 8 2 7 7 8 5 7 7 1 3 4 2 7 5 7 7 8 9 6 0 9 1 7 3 6 3 7 1 7 8 7 2 1 4 6 8 4 4 0 9 0 1 2 2 4 9 5 3 4 3 0 1 4 6 5 4 9 5 8 5 3 7 1 0 5 0 7 9 2 2 7 9 6 8 9 2 5 8 9 2 3 5 4 2 0 1 9 9 5 6 1 1 2 1 2 9 0 2 1 9 6 0 8 6 4 0 3 4 4 1 8 1 5 9 8 1 3 6 2 9 7 7 4 7 7 1 3 0 9 9 6 0 5 1 8 7 0 7 2 1 1 3 4 9 9 9 9 9 9 8 3 7 2 9 7 8 0 4 9 9 5 1 0 5 9 7 3 1 7 3 2 8 1 6 0 9 6 3 1 8 5 9 5 0 2 4 4 5 9 4 5 5 3 4 6 9 0 8 3 0 2 6 4 2 5 2 2 3 0 8 2 5 3 3 4 4 6 8 5 0 3 5 2 6 1 9 3 1 1 8 8 1 7 1 0 1 0 0 0 3 1 3 7 8 3 8 7 5 2 8 8 6 5 8 7 5 3 3 2 0 8 3 8 1 4 2 0 6 1 7 1 7 7 6 6 9 1 4 7 3 0 3 5 9 8 2 5 3 4 9 0 4 2 8 7 5 5 4 6 8 7 3 1 1 5 9 5 6 2 8 6 3 8 8 2 3 5 3 7 8 7 5 9 3 7 5 1 9 5 7 7 8 1 8 5 7 7 8 0 5 3 2 1 7 1 2 2 6 8 0 6 6 1 3 0 0 1 9 2 7 8 7 6 6 1 1 1 9 5 9 0 9 2 1 6 4 2 0 1 9 8 
 Parser.__init__('<Clone object at 0>')
  Parser.nexttoken('')
  return (NAME, u'def')
 return
 Parser.parse('')
  Parser.parse_stmt('')
   Parser.parse_def('')
    Parser.expect("NAME, 'def'")
     Parser.nexttoken('')
     return (NAME, u'pi')
    return u'def'
    Parser.expect('NAME')
     Parser.nexttoken('')
     return (OPERATOR, u'(')
    return u'pi'
    Parser.expect("OPERATOR, '('")
     Parser.nexttoken('')
     return (OPERATOR, u')')
    return u'('
    Parser.expect("OPERATOR, ')'")
     Parser.nexttoken('')
     return (OPERATOR, u':')
    return u')'
    Parser.expect("OPERATOR, ':'")
     Parser.nexttoken('')
     return (NEWLINE, '')
    return u':'
    Parser.expect('NEWLINE')
     Parser.nexttoken('')
     return (INDENT, '')
    return ''
    Parser.parse_body('')
     Parser.expect('INDENT')
      Parser.nexttoken('')
      return (NAME, u'k')
     return ''
     Parser.parse_stmt('')
      Parser.parse_simple('')
       Parser.parse_exprs('')
        Parser.parse_expr('')
         Parser.parse_term('')
          Parser.parse_atom('')
           Parser.expect('NAME')
            Parser.nexttoken('')
            return (OPERATOR, u',')
           return u'k'
           Name.__init__("u'k'")
           return
           Name.__repr__('')
           return "Name(u'k')"
          return Name(u'k')
          Name.__repr__('')
          return "Name(u'k')"
         return Name(u'k')
         Name.__repr__('')
         return "Name(u'k')"
        return Name(u'k')
        Parser.nexttoken('')
        return (NAME, u'a')
        Parser.parse_expr('')
         Parser.parse_term('')
          Parser.parse_atom('')
           Parser.expect('NAME')
            Parser.nexttoken('')
            return (OPERATOR, u',')
           return u'a'
           Name.__init__("u'a'")
           return
           Name.__repr__('')
           return "Name(u'a')"
          return Name(u'a')
          Name.__repr__('')
          return "Name(u'a')"
         return Name(u'a')
         Name.__repr__('')
         return "Name(u'a')"
        return Name(u'a')
        Parser.nexttoken('')
        return (NAME, u'b')
        Parser.parse_expr('')
         Parser.parse_term('')
          Parser.parse_atom('')
           Parser.expect('NAME')
            Parser.nexttoken('')
            return (OPERATOR, u',')
           return u'b'
           Name.__init__("u'b'")
           return
           Name.__repr__('')
           return "Name(u'b')"
          return Name(u'b')
          Name.__repr__('')
          return "Name(u'b')"
         return Name(u'b')
         Name.__repr__('')
         return "Name(u'b')"
        return Name(u'b')
        Parser.nexttoken('')
        return (NAME, u'a1')
        Parser.parse_expr('')
         Parser.parse_term('')
          Parser.parse_atom('')
           Parser.expect('NAME')
            Parser.nexttoken('')
            return (OPERATOR, u',')
           return u'a1'
           Name.__init__("u'a1'")
           return
           Name.__repr__('')
           return "Name(u'a1')"
          return Name(u'a1')
          Name.__repr__('')
          return "Name(u'a1')"
         return Name(u'a1')
         Name.__repr__('')
         return "Name(u'a1')"
        return Name(u'a1')
        Parser.nexttoken('')
        return (NAME, u'b1')
        Parser.parse_expr('')
         Parser.parse_term('')
          Parser.parse_atom('')
           Parser.expect('NAME')
            Parser.nexttoken('')
            return (OPERATOR, u'=')
           return u'b1'
           Name.__init__("u'b1'")
           return
           Name.__repr__('')
           return "Name(u'b1')"
          return Name(u'b1')
          Name.__repr__('')
          return "Name(u'b1')"
         return Name(u'b1')
         Name.__repr__('')
         return "Name(u'b1')"
        return Name(u'b1')
         Name.__repr__('')
         return "Name(u'k')"
         Name.__repr__('')
         return "Name(u'a')"
         Name.__repr__('')
         return "Name(u'b')"
         Name.__repr__('')
         return "Name(u'a1')"
         Name.__repr__('')
         return "Name(u'b1')"
        Exprs.__init__("[Name(u'k'), Name(u'...u'a1'), Name(u'b1')]")
        return
        Exprs.__repr__('')
         Name.__repr__('')
         return "Name(u'k')"
         Name.__repr__('')
         return "Name(u'a')"
         Name.__repr__('')
         return "Name(u'b')"
         Name.__repr__('')
         return "Name(u'a1')"
         Name.__repr__('')
         return "Name(u'b1')"
        return "Exprs([Name(u'k'), Name(u'a'), Name(u'b'), Name(u'a1'), Name(u'b1')])"
       return Exprs([Name(u'k'), Name(u'a'), Name(u'b'), Name(u'a1'), Name(u'b1')])
       Parser.nexttoken('')
       return (NUMBER, u'2')
       Parser.parse_exprs('')
        Parser.parse_expr('')
         Parser.parse_term('')
          Parser.parse_atom('')
           Parser.expect('NUMBER')
            Parser.nexttoken('')
            return (OPERATOR, u',')
           return u'2'
           Literal.__init__("u'2'")
            Number.evalit('')
            return 2
           return
           Literal.__repr__('')
           return "Number(u'2')"
          return Number(u'2')
          Literal.__repr__('')
          return "Number(u'2')"
         return Number(u'2')
         Literal.__repr__('')
         return "Number(u'2')"
        return Number(u'2')
        Parser.nexttoken('')
        return (NUMBER, u'4')
        Parser.parse_expr('')
         Parser.parse_term('')
          Parser.parse_atom('')
           Parser.expect('NUMBER')
            Parser.nexttoken('')
            return (OPERATOR, u',')
           return u'4'
           Literal.__init__("u'4'")
            Number.evalit('')
            return 4
           return
           Literal.__repr__('')
           return "Number(u'4')"
          return Number(u'4')
          Literal.__repr__('')
          return "Number(u'4')"
         return Number(u'4')
         Literal.__repr__('')
         return "Number(u'4')"
        return Number(u'4')
        Parser.nexttoken('')
        return (NUMBER, u'1')
        Parser.parse_expr('')
         Parser.parse_term('')
          Parser.parse_atom('')
           Parser.expect('NUMBER')
            Parser.nexttoken('')
            return (OPERATOR, u',')
           return u'1'
           Literal.__init__("u'1'")
            Number.evalit('')
            return 1
           return
           Literal.__repr__('')
           return "Number(u'1')"
          return Number(u'1')
          Literal.__repr__('')
          return "Number(u'1')"
         return Number(u'1')
         Literal.__repr__('')
         return "Number(u'1')"
        return Number(u'1')
        Parser.nexttoken('')
        return (NUMBER, u'12')
        Parser.parse_expr('')
         Parser.parse_term('')
          Parser.parse_atom('')
           Parser.expect('NUMBER')
            Parser.nexttoken('')
            return (OPERATOR, u',')
           return u'12'
           Literal.__init__("u'12'")
            Number.evalit('')
            return 12
           return
           Literal.__repr__('')
           return "Number(u'12')"
          return Number(u'12')
          Literal.__repr__('')
          return "Number(u'12')"
         return Number(u'12')
         Literal.__repr__('')
         return "Number(u'12')"
        return Number(u'12')
        Parser.nexttoken('')
        return (NUMBER, u'4')
        Parser.parse_expr('')
         Parser.parse_term('')
          Parser.parse_atom('')
           Parser.expect('NUMBER')
            Parser.nexttoken('')
            return (NEWLINE, '')
           return u'4'
           Literal.__init__("u'4'")
            Number.evalit('')
            return 4
           return
           Literal.__repr__('')
           return "Number(u'4')"
          return Number(u'4')
          Literal.__repr__('')
          return "Number(u'4')"
         return Number(u'4')
         Literal.__repr__('')
         return "Number(u'4')"
        return Number(u'4')
         Literal.__repr__('')
         return "Number(u'2')"
         Literal.__repr__('')
         return "Number(u'4')"
         Literal.__repr__('')
         return "Number(u'1')"
         Literal.__repr__('')
         return "Number(u'12')"
         Literal.__repr__('')
         return "Number(u'4')"
        Exprs.__init__("[Number(u'2'), Numbe...'12'), Number(u'4')]")
        return
        Exprs.__repr__('')
         Literal.__repr__('')
         return "Number(u'2')"
         Literal.__repr__('')
         return "Number(u'4')"
         Literal.__repr__('')
         return "Number(u'1')"
         Literal.__repr__('')
         return "Number(u'12')"
         Literal.__repr__('')
         return "Number(u'4')"
        return "Exprs([Number(u'2'), Number(u'4'), Number(u'1'), Number(u'12'), Number(u'4')])"
       return Exprs([Number(u'2'), Number(u'4'), Number(u'1'), Number(u'12'), Number(u'4')])
       Parser.expect('NEWLINE')
        Parser.nexttoken('')
        return (NAME, u'while')
       return ''
        Exprs.__repr__('')
         Name.__repr__('')
         return "Name(u'k')"
         Name.__repr__('')
         return "Name(u'a')"
         Name.__repr__('')
         return "Name(u'b')"
         Name.__repr__('')
         return "Name(u'a1')"
         Name.__repr__('')
         return "Name(u'b1')"
        return "Exprs([Name(u'k'), Name(u'a'), Name(u'b'), Name(u'a1'), Name(u'b1')])"
        Exprs.__repr__('')
         Literal.__repr__('')
         return "Number(u'2')"
         Literal.__repr__('')
         return "Number(u'4')"
         Literal.__repr__('')
         return "Number(u'1')"
         Literal.__repr__('')
         return "Number(u'12')"
         Literal.__repr__('')
         return "Number(u'4')"
        return "Exprs([Number(u'2'), Number(u'4'), Number(u'1'), Number(u'12'), Number(u'4')])"
       Assign.__init__("[Exprs([Name(u'k'), ...a1'), Name(u'b1')])], Exprs([Number(u'2'),...12'), Number(u'4')])")
       return
       Assign.__repr__('')
        Exprs.__repr__('')
         Name.__repr__('')
         return "Name(u'k')"
         Name.__repr__('')
         return "Name(u'a')"
         Name.__repr__('')
         return "Name(u'b')"
         Name.__repr__('')
         return "Name(u'a1')"
         Name.__repr__('')
         return "Name(u'b1')"
        return "Exprs([Name(u'k'), Name(u'a'), Name(u'b'), Name(u'a1'), Name(u'b1')])"
        Exprs.__repr__('')
         Literal.__repr__('')
         return "Number(u'2')"
         Literal.__repr__('')
         return "Number(u'4')"
         Literal.__repr__('')
         return "Number(u'1')"
         Literal.__repr__('')
         return "Number(u'12')"
         Literal.__repr__('')
         return "Number(u'4')"
        return "Exprs([Number(u'2'), Number(u'4'), Number(u'1'), Number(u'12'), Number(u'4')])"
       return "Assign([Exprs([Name(u'k'), Name(u'a'), Name(u'b'), Name(u'a1'), Name(u'b1')])], Exprs([Number(u'2'), Number(u'4'), Number(u'1'), Number(u'12'), Number(u'4')]))"
      return Assign([Exprs([Name(u'k'), Name(u'a'), Name(u'b'), Name(u'a1'), Name(u'b1')])], Exprs([Number(u'2'), Number(u'4'), Number(u'1'), Number(u'12'), Number(u'4')]))
      Assign.__repr__('')
       Exprs.__repr__('')
        Name.__repr__('')
        return "Name(u'k')"
        Name.__repr__('')
        return "Name(u'a')"
        Name.__repr__('')
        return "Name(u'b')"
        Name.__repr__('')
        return "Name(u'a1')"
        Name.__repr__('')
        return "Name(u'b1')"
       return "Exprs([Name(u'k'), Name(u'a'), Name(u'b'), Name(u'a1'), Name(u'b1')])"
       Exprs.__repr__('')
        Literal.__repr__('')
        return "Number(u'2')"
        Literal.__repr__('')
        return "Number(u'4')"
        Literal.__repr__('')
        return "Number(u'1')"
        Literal.__repr__('')
        return "Number(u'12')"
        Literal.__repr__('')
        return "Number(u'4')"
       return "Exprs([Number(u'2'), Number(u'4'), Number(u'1'), Number(u'12'), Number(u'4')])"
      return "Assign([Exprs([Name(u'k'), Name(u'a'), Name(u'b'), Name(u'a1'), Name(u'b1')])], Exprs([Number(u'2'), Number(u'4'), Number(u'1'), Number(u'12'), Number(u'4')]))"
     return Assign([Exprs([Name(u'k'), Name(u'a'), Name(u'b'), Name(u'a1'), Name(u'b1')])], Exprs([Number(u'2'), Number(u'4'), Number(u'1'), Number(u'12'), Number(u'4')]))
     Parser.parse_stmt('')
      Parser.parse_while('')
       Parser.expect("NAME, 'while'")
        Parser.nexttoken('')
        return (NUMBER, u'1')
       return u'while'
       Parser.parse_expr('')
        Parser.parse_term('')
         Parser.parse_atom('')
          Parser.expect('NUMBER')
           Parser.nexttoken('')
           return (OPERATOR, u':')
          return u'1'
          Literal.__init__("u'1'")
           Number.evalit('')
           return 1
          return
          Literal.__repr__('')
          return "Number(u'1')"
         return Number(u'1')
         Literal.__repr__('')
         return "Number(u'1')"
        return Number(u'1')
        Literal.__repr__('')
        return "Number(u'1')"
       return Number(u'1')
       Parser.expect("OPERATOR, ':'")
        Parser.nexttoken('')
        return (NEWLINE, '')
       return u':'
       Parser.expect('NEWLINE')
        Parser.nexttoken('')
        return (INDENT, '')
       return ''
       Parser.parse_body('')
        Parser.expect('INDENT')
         Parser.nexttoken('')
         return (NAME, u'p')
        return ''
        Parser.parse_stmt('')
         Parser.parse_simple('')
          Parser.parse_exprs('')
           Parser.parse_expr('')
            Parser.parse_term('')
             Parser.parse_atom('')
              Parser.expect('NAME')
               Parser.nexttoken('')
               return (OPERATOR, u',')
              return u'p'
              Name.__init__("u'p'")
              return
              Name.__repr__('')
              return "Name(u'p')"
             return Name(u'p')
             Name.__repr__('')
             return "Name(u'p')"
            return Name(u'p')
            Name.__repr__('')
            return "Name(u'p')"
           return Name(u'p')
           Parser.nexttoken('')
           return (NAME, u'q')
           Parser.parse_expr('')
            Parser.parse_term('')
             Parser.parse_atom('')
              Parser.expect('NAME')
               Parser.nexttoken('')
               return (OPERATOR, u',')
              return u'q'
              Name.__init__("u'q'")
              return
              Name.__repr__('')
              return "Name(u'q')"
             return Name(u'q')
             Name.__repr__('')
             return "Name(u'q')"
            return Name(u'q')
            Name.__repr__('')
            return "Name(u'q')"
           return Name(u'q')
           Parser.nexttoken('')
           return (NAME, u'k')
           Parser.parse_expr('')
            Parser.parse_term('')
             Parser.parse_atom('')
              Parser.expect('NAME')
               Parser.nexttoken('')
               return (OPERATOR, u'=')
              return u'k'
              Name.__init__("u'k'")
              return
              Name.__repr__('')
              return "Name(u'k')"
             return Name(u'k')
             Name.__repr__('')
             return "Name(u'k')"
            return Name(u'k')
            Name.__repr__('')
            return "Name(u'k')"
           return Name(u'k')
            Name.__repr__('')
            return "Name(u'p')"
            Name.__repr__('')
            return "Name(u'q')"
            Name.__repr__('')
            return "Name(u'k')"
           Exprs.__init__("[Name(u'p'), Name(u'q'), Name(u'k')]")
           return
           Exprs.__repr__('')
            Name.__repr__('')
            return "Name(u'p')"
            Name.__repr__('')
            return "Name(u'q')"
            Name.__repr__('')
            return "Name(u'k')"
           return "Exprs([Name(u'p'), Name(u'q'), Name(u'k')])"
          return Exprs([Name(u'p'), Name(u'q'), Name(u'k')])
          Parser.nexttoken('')
          return (NAME, u'k')
          Parser.parse_exprs('')
           Parser.parse_expr('')
            Parser.parse_term('')
             Parser.parse_atom('')
              Parser.expect('NAME')
               Parser.nexttoken('')
               return (OPERATOR, u'*')
              return u'k'
              Name.__init__("u'k'")
              return
              Name.__repr__('')
              return "Name(u'k')"
             return Name(u'k')
             Name.__repr__('')
             return "Name(u'k')"
            return Name(u'k')
            Parser.expect('OPERATOR')
             Parser.nexttoken('')
             return (NAME, u'k')
            return u'*'
            Parser.parse_expr('7')
             Parser.parse_term('')
              Parser.parse_atom('')
               Parser.expect('NAME')
                Parser.nexttoken('')
                return (OPERATOR, u',')
               return u'k'
               Name.__init__("u'k'")
               return
               Name.__repr__('')
               return "Name(u'k')"
              return Name(u'k')
              Name.__repr__('')
              return "Name(u'k')"
             return Name(u'k')
             Name.__repr__('')
             return "Name(u'k')"
            return Name(u'k')
             Name.__repr__('')
             return "Name(u'k')"
             Name.__repr__('')
             return "Name(u'k')"
            Binop.__init__("Name(u'k'), u'*', Name(u'k')")
            return
            Binop.__repr__('')
             Name.__repr__('')
             return "Name(u'k')"
             Name.__repr__('')
             return "Name(u'k')"
            return "Binop(Name(u'k'), u'*', Name(u'k'))"
           return Binop(Name(u'k'), u'*', Name(u'k'))
           Parser.nexttoken('')
           return (NUMBER, u'2')
           Parser.parse_expr('')
            Parser.parse_term('')
             Parser.parse_atom('')
              Parser.expect('NUMBER')
               Parser.nexttoken('')
               return (OPERATOR, u'*')
              return u'2'
              Literal.__init__("u'2'")
               Number.evalit('')
               return 2
              return
              Literal.__repr__('')
              return "Number(u'2')"
             return Number(u'2')
             Literal.__repr__('')
             return "Number(u'2')"
            return Number(u'2')
            Parser.expect('OPERATOR')
             Parser.nexttoken('')
             return (NAME, u'k')
            return u'*'
            Parser.parse_expr('7')
             Parser.parse_term('')
              Parser.parse_atom('')
               Parser.expect('NAME')
                Parser.nexttoken('')
                return (OPERATOR, u'+')
               return u'k'
               Name.__init__("u'k'")
               return
               Name.__repr__('')
               return "Name(u'k')"
              return Name(u'k')
              Name.__repr__('')
              return "Name(u'k')"
             return Name(u'k')
             Name.__repr__('')
             return "Name(u'k')"
            return Name(u'k')
             Literal.__repr__('')
             return "Number(u'2')"
             Name.__repr__('')
             return "Name(u'k')"
            Binop.__init__("Number(u'2'), u'*', Name(u'k')")
            return
            Parser.expect('OPERATOR')
             Parser.nexttoken('')
             return (NUMBER, u'1')
            return u'+'
            Parser.parse_expr('6')
             Parser.parse_term('')
              Parser.parse_atom('')
               Parser.expect('NUMBER')
                Parser.nexttoken('')
                return (OPERATOR, u',')
               return u'1'
               Literal.__init__("u'1'")
                Number.evalit('')
                return 1
               return
               Literal.__repr__('')
               return "Number(u'1')"
              return Number(u'1')
              Literal.__repr__('')
              return "Number(u'1')"
             return Number(u'1')
             Literal.__repr__('')
             return "Number(u'1')"
            return Number(u'1')
             Binop.__repr__('')
              Literal.__repr__('')
              return "Number(u'2')"
              Name.__repr__('')
              return "Name(u'k')"
             return "Binop(Number(u'2'), u'*', Name(u'k'))"
             Literal.__repr__('')
             return "Number(u'1')"
            Binop.__init__("Binop(Number(u'2'), u'*', Name(u'k')), u'+', Number(u'1')")
            return
            Binop.__repr__('')
             Binop.__repr__('')
              Literal.__repr__('')
              return "Number(u'2')"
              Name.__repr__('')
              return "Name(u'k')"
             return "Binop(Number(u'2'), u'*', Name(u'k'))"
             Literal.__repr__('')
             return "Number(u'1')"
            return "Binop(Binop(Number(u'2'), u'*', Name(u'k')), u'+', Number(u'1'))"
           return Binop(Binop(Number(u'2'), u'*', Name(u'k')), u'+', Number(u'1'))
           Parser.nexttoken('')
           return (NAME, u'k')
           Parser.parse_expr('')
            Parser.parse_term('')
             Parser.parse_atom('')
              Parser.expect('NAME')
               Parser.nexttoken('')
               return (OPERATOR, u'+')
              return u'k'
              Name.__init__("u'k'")
              return
              Name.__repr__('')
              return "Name(u'k')"
             return Name(u'k')
             Name.__repr__('')
             return "Name(u'k')"
            return Name(u'k')
            Parser.expect('OPERATOR')
             Parser.nexttoken('')
             return (NUMBER, u'1')
            return u'+'
            Parser.parse_expr('6')
             Parser.parse_term('')
              Parser.parse_atom('')
               Parser.expect('NUMBER')
                Parser.nexttoken('')
                return (NEWLINE, '')
               return u'1'
               Literal.__init__("u'1'")
                Number.evalit('')
                return 1
               return
               Literal.__repr__('')
               return "Number(u'1')"
              return Number(u'1')
              Literal.__repr__('')
              return "Number(u'1')"
             return Number(u'1')
             Literal.__repr__('')
             return "Number(u'1')"
            return Number(u'1')
             Name.__repr__('')
             return "Name(u'k')"
             Literal.__repr__('')
             return "Number(u'1')"
            Binop.__init__("Name(u'k'), u'+', Number(u'1')")
            return
            Binop.__repr__('')
             Name.__repr__('')
             return "Name(u'k')"
             Literal.__repr__('')
             return "Number(u'1')"
            return "Binop(Name(u'k'), u'+', Number(u'1'))"
           return Binop(Name(u'k'), u'+', Number(u'1'))
            Binop.__repr__('')
             Name.__repr__('')
             return "Name(u'k')"
             Name.__repr__('')
             return "Name(u'k')"
            return "Binop(Name(u'k'), u'*', Name(u'k'))"
            Binop.__repr__('')
             Binop.__repr__('')
              Literal.__repr__('')
              return "Number(u'2')"
              Name.__repr__('')
              return "Name(u'k')"
             return "Binop(Number(u'2'), u'*', Name(u'k'))"
             Literal.__repr__('')
             return "Number(u'1')"
            return "Binop(Binop(Number(u'2'), u'*', Name(u'k')), u'+', Number(u'1'))"
            Binop.__repr__('')
             Name.__repr__('')
             return "Name(u'k')"
             Literal.__repr__('')
             return "Number(u'1')"
            return "Binop(Name(u'k'), u'+', Number(u'1'))"
           Exprs.__init__("[Binop(Name(u'k'), u...u'+', Number(u'1'))]")
           return
           Exprs.__repr__('')
            Binop.__repr__('')
             Name.__repr__('')
             return "Name(u'k')"
             Name.__repr__('')
             return "Name(u'k')"
            return "Binop(Name(u'k'), u'*', Name(u'k'))"
            Binop.__repr__('')
             Binop.__repr__('')
              Literal.__repr__('')
              return "Number(u'2')"
              Name.__repr__('')
              return "Name(u'k')"
             return "Binop(Number(u'2'), u'*', Name(u'k'))"
             Literal.__repr__('')
             return "Number(u'1')"
            return "Binop(Binop(Number(u'2'), u'*', Name(u'k')), u'+', Number(u'1'))"
            Binop.__repr__('')
             Name.__repr__('')
             return "Name(u'k')"
             Literal.__repr__('')
             return "Number(u'1')"
            return "Binop(Name(u'k'), u'+', Number(u'1'))"
           return "Exprs([Binop(Name(u'k'), u'*', Name(u'k')), Binop(Binop(Number(u'2'), u'*', Name(u'k')), u'+', Number(u'1')), Binop(Name(u'k'), u'+', Number(u'1'))])"
          return Exprs([Binop(Name(u'k'), u'*', Name(u'k')), Binop(Binop(Number(u'2'), u'*', Name(u'k')), u'+', Number(u'1')), Binop(Name(u'k'), u'+', Number(u'1'))])
          Parser.expect('NEWLINE')
           Parser.nexttoken('')
           return (NAME, u'a')
          return ''
           Exprs.__repr__('')
            Name.__repr__('')
            return "Name(u'p')"
            Name.__repr__('')
            return "Name(u'q')"
            Name.__repr__('')
            return "Name(u'k')"
           return "Exprs([Name(u'p'), Name(u'q'), Name(u'k')])"
           Exprs.__repr__('')
            Binop.__repr__('')
             Name.__repr__('')
             return "Name(u'k')"
             Name.__repr__('')
             return "Name(u'k')"
            return "Binop(Name(u'k'), u'*', Name(u'k'))"
            Binop.__repr__('')
             Binop.__repr__('')
              Literal.__repr__('')
              return "Number(u'2')"
              Name.__repr__('')
              return "Name(u'k')"
             return "Binop(Number(u'2'), u'*', Name(u'k'))"
             Literal.__repr__('')
             return "Number(u'1')"
            return "Binop(Binop(Number(u'2'), u'*', Name(u'k')), u'+', Number(u'1'))"
            Binop.__repr__('')
             Name.__repr__('')
             return "Name(u'k')"
             Literal.__repr__('')
             return "Number(u'1')"
            return "Binop(Name(u'k'), u'+', Number(u'1'))"
           return "Exprs([Binop(Name(u'k'), u'*', Name(u'k')), Binop(Binop(Number(u'2'), u'*', Name(u'k')), u'+', Number(u'1')), Binop(Name(u'k'), u'+', Number(u'1'))])"
          Assign.__init__("[Exprs([Name(u'p'), ...u'q'), Name(u'k')])], Exprs([Binop(Name(u'...'+', Number(u'1'))])")
          return
          Assign.__repr__('')
           Exprs.__repr__('')
            Name.__repr__('')
            return "Name(u'p')"
            Name.__repr__('')
            return "Name(u'q')"
            Name.__repr__('')
            return "Name(u'k')"
           return "Exprs([Name(u'p'), Name(u'q'), Name(u'k')])"
           Exprs.__repr__('')
            Binop.__repr__('')
             Name.__repr__('')
             return "Name(u'k')"
             Name.__repr__('')
             return "Name(u'k')"
            return "Binop(Name(u'k'), u'*', Name(u'k'))"
            Binop.__repr__('')
             Binop.__repr__('')
              Literal.__repr__('')
              return "Number(u'2')"
              Name.__repr__('')
              return "Name(u'k')"
             return "Binop(Number(u'2'), u'*', Name(u'k'))"
             Literal.__repr__('')
             return "Number(u'1')"
            return "Binop(Binop(Number(u'2'), u'*', Name(u'k')), u'+', Number(u'1'))"
            Binop.__repr__('')
             Name.__repr__('')
             return "Name(u'k')"
             Literal.__repr__('')
             return "Number(u'1')"
            return "Binop(Name(u'k'), u'+', Number(u'1'))"
           return "Exprs([Binop(Name(u'k'), u'*', Name(u'k')), Binop(Binop(Number(u'2'), u'*', Name(u'k')), u'+', Number(u'1')), Binop(Name(u'k'), u'+', Number(u'1'))])"
          return "Assign([Exprs([Name(u'p'), Name(u'q'), Name(u'k')])], Exprs([Binop(Name(u'k'), u'*', Name(u'k')), Binop(Binop(Number(u'2'), u'*', Name(u'k')), u'+', Number(u'1')), Binop(Name(u'k'), u'+', Number(u'1'))]))"
         return Assign([Exprs([Name(u'p'), Name(u'q'), Name(u'k')])], Exprs([Binop(Name(u'k'), u'*', Name(u'k')), Binop(Binop(Number(u'2'), u'*', Name(u'k')), u'+', Number(u'1')), Binop(Name(u'k'), u'+', Number(u'1'))]))
         Assign.__repr__('')
          Exprs.__repr__('')
           Name.__repr__('')
           return "Name(u'p')"
           Name.__repr__('')
           return "Name(u'q')"
           Name.__repr__('')
           return "Name(u'k')"
          return "Exprs([Name(u'p'), Name(u'q'), Name(u'k')])"
          Exprs.__repr__('')
           Binop.__repr__('')
            Name.__repr__('')
            return "Name(u'k')"
            Name.__repr__('')
            return "Name(u'k')"
           return "Binop(Name(u'k'), u'*', Name(u'k'))"
           Binop.__repr__('')
            Binop.__repr__('')
             Literal.__repr__('')
             return "Number(u'2')"
             Name.__repr__('')
             return "Name(u'k')"
            return "Binop(Number(u'2'), u'*', Name(u'k'))"
            Literal.__repr__('')
            return "Number(u'1')"
           return "Binop(Binop(Number(u'2'), u'*', Name(u'k')), u'+', Number(u'1'))"
           Binop.__repr__('')
            Name.__repr__('')
            return "Name(u'k')"
            Literal.__repr__('')
            return "Number(u'1')"
           return "Binop(Name(u'k'), u'+', Number(u'1'))"
          return "Exprs([Binop(Name(u'k'), u'*', Name(u'k')), Binop(Binop(Number(u'2'), u'*', Name(u'k')), u'+', Number(u'1')), Binop(Name(u'k'), u'+', Number(u'1'))])"
         return "Assign([Exprs([Name(u'p'), Name(u'q'), Name(u'k')])], Exprs([Binop(Name(u'k'), u'*', Name(u'k')), Binop(Binop(Number(u'2'), u'*', Name(u'k')), u'+', Number(u'1')), Binop(Name(u'k'), u'+', Number(u'1'))]))"
        return Assign([Exprs([Name(u'p'), Name(u'q'), Name(u'k')])], Exprs([Binop(Name(u'k'), u'*', Name(u'k')), Binop(Binop(Number(u'2'), u'*', Name(u'k')), u'+', Number(u'1')), Binop(Name(u'k'), u'+', Number(u'1'))]))
        Parser.parse_stmt('')
         Parser.parse_simple('')
          Parser.parse_exprs('')
           Parser.parse_expr('')
            Parser.parse_term('')
             Parser.parse_atom('')
              Parser.expect('NAME')
               Parser.nexttoken('')
               return (OPERATOR, u',')
              return u'a'
              Name.__init__("u'a'")
              return
              Name.__repr__('')
              return "Name(u'a')"
             return Name(u'a')
             Name.__repr__('')
             return "Name(u'a')"
            return Name(u'a')
            Name.__repr__('')
            return "Name(u'a')"
           return Name(u'a')
           Parser.nexttoken('')
           return (NAME, u'b')
           Parser.parse_expr('')
            Parser.parse_term('')
             Parser.parse_atom('')
              Parser.expect('NAME')
               Parser.nexttoken('')
               return (OPERATOR, u',')
              return u'b'
              Name.__init__("u'b'")
              return
              Name.__repr__('')
              return "Name(u'b')"
             return Name(u'b')
             Name.__repr__('')
             return "Name(u'b')"
            return Name(u'b')
            Name.__repr__('')
            return "Name(u'b')"
           return Name(u'b')
           Parser.nexttoken('')
           return (NAME, u'a1')
           Parser.parse_expr('')
            Parser.parse_term('')
             Parser.parse_atom('')
              Parser.expect('NAME')
               Parser.nexttoken('')
               return (OPERATOR, u',')
              return u'a1'
              Name.__init__("u'a1'")
              return
              Name.__repr__('')
              return "Name(u'a1')"
             return Name(u'a1')
             Name.__repr__('')
             return "Name(u'a1')"
            return Name(u'a1')
            Name.__repr__('')
            return "Name(u'a1')"
           return Name(u'a1')
           Parser.nexttoken('')
           return (NAME, u'b1')
           Parser.parse_expr('')
            Parser.parse_term('')
             Parser.parse_atom('')
              Parser.expect('NAME')
               Parser.nexttoken('')
               return (OPERATOR, u'=')
              return u'b1'
              Name.__init__("u'b1'")
              return
              Name.__repr__('')
              return "Name(u'b1')"
             return Name(u'b1')
             Name.__repr__('')
             return "Name(u'b1')"
            return Name(u'b1')
            Name.__repr__('')
            return "Name(u'b1')"
           return Name(u'b1')
            Name.__repr__('')
            return "Name(u'a')"
            Name.__repr__('')
            return "Name(u'b')"
            Name.__repr__('')
            return "Name(u'a1')"
            Name.__repr__('')
            return "Name(u'b1')"
           Exprs.__init__("[Name(u'a'), Name(u'...u'a1'), Name(u'b1')]")
           return
           Exprs.__repr__('')
            Name.__repr__('')
            return "Name(u'a')"
            Name.__repr__('')
            return "Name(u'b')"
            Name.__repr__('')
            return "Name(u'a1')"
            Name.__repr__('')
            return "Name(u'b1')"
           return "Exprs([Name(u'a'), Name(u'b'), Name(u'a1'), Name(u'b1')])"
          return Exprs([Name(u'a'), Name(u'b'), Name(u'a1'), Name(u'b1')])
          Parser.nexttoken('')
          return (NAME, u'a1')
          Parser.parse_exprs('')
           Parser.parse_expr('')
            Parser.parse_term('')
             Parser.parse_atom('')
              Parser.expect('NAME')
               Parser.nexttoken('')
               return (OPERATOR, u',')
              return u'a1'
              Name.__init__("u'a1'")
              return
              Name.__repr__('')
              return "Name(u'a1')"
             return Name(u'a1')
             Name.__repr__('')
             return "Name(u'a1')"
            return Name(u'a1')
            Name.__repr__('')
            return "Name(u'a1')"
           return Name(u'a1')
           Parser.nexttoken('')
           return (NAME, u'b1')
           Parser.parse_expr('')
            Parser.parse_term('')
             Parser.parse_atom('')
              Parser.expect('NAME')
               Parser.nexttoken('')
               return (OPERATOR, u',')
              return u'b1'
              Name.__init__("u'b1'")
              return
              Name.__repr__('')
              return "Name(u'b1')"
             return Name(u'b1')
             Name.__repr__('')
             return "Name(u'b1')"
            return Name(u'b1')
            Name.__repr__('')
            return "Name(u'b1')"
           return Name(u'b1')
           Parser.nexttoken('')
           return (NAME, u'p')
           Parser.parse_expr('')
            Parser.parse_term('')
             Parser.parse_atom('')
              Parser.expect('NAME')
               Parser.nexttoken('')
               return (OPERATOR, u'*')
              return u'p'
              Name.__init__("u'p'")
              return
              Name.__repr__('')
              return "Name(u'p')"
             return Name(u'p')
             Name.__repr__('')
             return "Name(u'p')"
            return Name(u'p')
            Parser.expect('OPERATOR')
             Parser.nexttoken('')
             return (NAME, u'a')
            return u'*'
            Parser.parse_expr('7')
             Parser.parse_term('')
              Parser.parse_atom('')
               Parser.expect('NAME')
                Parser.nexttoken('')
                return (OPERATOR, u'+')
               return u'a'
               Name.__init__("u'a'")
               return
               Name.__repr__('')
               return "Name(u'a')"
              return Name(u'a')
              Name.__repr__('')
              return "Name(u'a')"
             return Name(u'a')
             Name.__repr__('')
             return "Name(u'a')"
            return Name(u'a')
             Name.__repr__('')
             return "Name(u'p')"
             Name.__repr__('')
             return "Name(u'a')"
            Binop.__init__("Name(u'p'), u'*', Name(u'a')")
            return
            Parser.expect('OPERATOR')
             Parser.nexttoken('')
             return (NAME, u'q')
            return u'+'
            Parser.parse_expr('6')
             Parser.parse_term('')
              Parser.parse_atom('')
               Parser.expect('NAME')
                Parser.nexttoken('')
                return (OPERATOR, u'*')
               return u'q'
               Name.__init__("u'q'")
               return
               Name.__repr__('')
               return "Name(u'q')"
              return Name(u'q')
              Name.__repr__('')
              return "Name(u'q')"
             return Name(u'q')
             Parser.expect('OPERATOR')
              Parser.nexttoken('')
              return (NAME, u'a1')
             return u'*'
             Parser.parse_expr('7')
              Parser.parse_term('')
               Parser.parse_atom('')
                Parser.expect('NAME')
                 Parser.nexttoken('')
                 return (OPERATOR, u',')
                return u'a1'
                Name.__init__("u'a1'")
                return
                Name.__repr__('')
                return "Name(u'a1')"
               return Name(u'a1')
               Name.__repr__('')
               return "Name(u'a1')"
              return Name(u'a1')
              Name.__repr__('')
              return "Name(u'a1')"
             return Name(u'a1')
              Name.__repr__('')
              return "Name(u'q')"
              Name.__repr__('')
              return "Name(u'a1')"
             Binop.__init__("Name(u'q'), u'*', Name(u'a1')")
             return
             Binop.__repr__('')
              Name.__repr__('')
              return "Name(u'q')"
              Name.__repr__('')
              return "Name(u'a1')"
             return "Binop(Name(u'q'), u'*', Name(u'a1'))"
            return Binop(Name(u'q'), u'*', Name(u'a1'))
             Binop.__repr__('')
              Name.__repr__('')
              return "Name(u'p')"
              Name.__repr__('')
              return "Name(u'a')"
             return "Binop(Name(u'p'), u'*', Name(u'a'))"
             Binop.__repr__('')
              Name.__repr__('')
              return "Name(u'q')"
              Name.__repr__('')
              return "Name(u'a1')"
             return "Binop(Name(u'q'), u'*', Name(u'a1'))"
            Binop.__init__("Binop(Name(u'p'), u'*', Name(u'a')), u'+', Binop(Name(u'q'), u'*', Name(u'a1'))")
            return
            Binop.__repr__('')
             Binop.__repr__('')
              Name.__repr__('')
              return "Name(u'p')"
              Name.__repr__('')
              return "Name(u'a')"
             return "Binop(Name(u'p'), u'*', Name(u'a'))"
             Binop.__repr__('')
              Name.__repr__('')
              return "Name(u'q')"
              Name.__repr__('')
              return "Name(u'a1')"
             return "Binop(Name(u'q'), u'*', Name(u'a1'))"
            return "Binop(Binop(Name(u'p'), u'*', Name(u'a')), u'+', Binop(Name(u'q'), u'*', Name(u'a1')))"
           return Binop(Binop(Name(u'p'), u'*', Name(u'a')), u'+', Binop(Name(u'q'), u'*', Name(u'a1')))
           Parser.nexttoken('')
           return (NAME, u'p')
           Parser.parse_expr('')
            Parser.parse_term('')
             Parser.parse_atom('')
              Parser.expect('NAME')
               Parser.nexttoken('')
               return (OPERATOR, u'*')
              return u'p'
              Name.__init__("u'p'")
              return
              Name.__repr__('')
              return "Name(u'p')"
             return Name(u'p')
             Name.__repr__('')
             return "Name(u'p')"
            return Name(u'p')
            Parser.expect('OPERATOR')
             Parser.nexttoken('')
             return (NAME, u'b')
            return u'*'
            Parser.parse_expr('7')
             Parser.parse_term('')
              Parser.parse_atom('')
               Parser.expect('NAME')
                Parser.nexttoken('')
                return (OPERATOR, u'+')
               return u'b'
               Name.__init__("u'b'")
               return
               Name.__repr__('')
               return "Name(u'b')"
              return Name(u'b')
              Name.__repr__('')
              return "Name(u'b')"
             return Name(u'b')
             Name.__repr__('')
             return "Name(u'b')"
            return Name(u'b')
             Name.__repr__('')
             return "Name(u'p')"
             Name.__repr__('')
             return "Name(u'b')"
            Binop.__init__("Name(u'p'), u'*', Name(u'b')")
            return
            Parser.expect('OPERATOR')
             Parser.nexttoken('')
             return (NAME, u'q')
            return u'+'
            Parser.parse_expr('6')
             Parser.parse_term('')
              Parser.parse_atom('')
               Parser.expect('NAME')
                Parser.nexttoken('')
                return (OPERATOR, u'*')
               return u'q'
               Name.__init__("u'q'")
               return
               Name.__repr__('')
               return "Name(u'q')"
              return Name(u'q')
              Name.__repr__('')
              return "Name(u'q')"
             return Name(u'q')
             Parser.expect('OPERATOR')
              Parser.nexttoken('')
              return (NAME, u'b1')
             return u'*'
             Parser.parse_expr('7')
              Parser.parse_term('')
               Parser.parse_atom('')
                Parser.expect('NAME')
                 Parser.nexttoken('')
                 return (NEWLINE, '')
                return u'b1'
                Name.__init__("u'b1'")
                return
                Name.__repr__('')
                return "Name(u'b1')"
               return Name(u'b1')
               Name.__repr__('')
               return "Name(u'b1')"
              return Name(u'b1')
              Name.__repr__('')
              return "Name(u'b1')"
             return Name(u'b1')
              Name.__repr__('')
              return "Name(u'q')"
              Name.__repr__('')
              return "Name(u'b1')"
             Binop.__init__("Name(u'q'), u'*', Name(u'b1')")
             return
             Binop.__repr__('')
              Name.__repr__('')
              return "Name(u'q')"
              Name.__repr__('')
              return "Name(u'b1')"
             return "Binop(Name(u'q'), u'*', Name(u'b1'))"
            return Binop(Name(u'q'), u'*', Name(u'b1'))
             Binop.__repr__('')
              Name.__repr__('')
              return "Name(u'p')"
              Name.__repr__('')
              return "Name(u'b')"
             return "Binop(Name(u'p'), u'*', Name(u'b'))"
             Binop.__repr__('')
              Name.__repr__('')
              return "Name(u'q')"
              Name.__repr__('')
              return "Name(u'b1')"
             return "Binop(Name(u'q'), u'*', Name(u'b1'))"
            Binop.__init__("Binop(Name(u'p'), u'*', Name(u'b')), u'+', Binop(Name(u'q'), u'*', Name(u'b1'))")
            return
            Binop.__repr__('')
             Binop.__repr__('')
              Name.__repr__('')
              return "Name(u'p')"
              Name.__repr__('')
              return "Name(u'b')"
             return "Binop(Name(u'p'), u'*', Name(u'b'))"
             Binop.__repr__('')
              Name.__repr__('')
              return "Name(u'q')"
              Name.__repr__('')
              return "Name(u'b1')"
             return "Binop(Name(u'q'), u'*', Name(u'b1'))"
            return "Binop(Binop(Name(u'p'), u'*', Name(u'b')), u'+', Binop(Name(u'q'), u'*', Name(u'b1')))"
           return Binop(Binop(Name(u'p'), u'*', Name(u'b')), u'+', Binop(Name(u'q'), u'*', Name(u'b1')))
            Name.__repr__('')
            return "Name(u'a1')"
            Name.__repr__('')
            return "Name(u'b1')"
            Binop.__repr__('')
             Binop.__repr__('')
              Name.__repr__('')
              return "Name(u'p')"
              Name.__repr__('')
              return "Name(u'a')"
             return "Binop(Name(u'p'), u'*', Name(u'a'))"
             Binop.__repr__('')
              Name.__repr__('')
              return "Name(u'q')"
              Name.__repr__('')
              return "Name(u'a1')"
             return "Binop(Name(u'q'), u'*', Name(u'a1'))"
            return "Binop(Binop(Name(u'p'), u'*', Name(u'a')), u'+', Binop(Name(u'q'), u'*', Name(u'a1')))"
            Binop.__repr__('')
             Binop.__repr__('')
              Name.__repr__('')
              return "Name(u'p')"
              Name.__repr__('')
              return "Name(u'b')"
             return "Binop(Name(u'p'), u'*', Name(u'b'))"
             Binop.__repr__('')
              Name.__repr__('')
              return "Name(u'q')"
              Name.__repr__('')
              return "Name(u'b1')"
             return "Binop(Name(u'q'), u'*', Name(u'b1'))"
            return "Binop(Binop(Name(u'p'), u'*', Name(u'b')), u'+', Binop(Name(u'q'), u'*', Name(u'b1')))"
           Exprs.__init__("[Name(u'a1'), Name(u...u'*', Name(u'b1')))]")
           return
           Exprs.__repr__('')
            Name.__repr__('')
            return "Name(u'a1')"
            Name.__repr__('')
            return "Name(u'b1')"
            Binop.__repr__('')
             Binop.__repr__('')
              Name.__repr__('')
              return "Name(u'p')"
              Name.__repr__('')
              return "Name(u'a')"
             return "Binop(Name(u'p'), u'*', Name(u'a'))"
             Binop.__repr__('')
              Name.__repr__('')
              return "Name(u'q')"
              Name.__repr__('')
              return "Name(u'a1')"
             return "Binop(Name(u'q'), u'*', Name(u'a1'))"
            return "Binop(Binop(Name(u'p'), u'*', Name(u'a')), u'+', Binop(Name(u'q'), u'*', Name(u'a1')))"
            Binop.__repr__('')
             Binop.__repr__('')
              Name.__repr__('')
              return "Name(u'p')"
              Name.__repr__('')
              return "Name(u'b')"
             return "Binop(Name(u'p'), u'*', Name(u'b'))"
             Binop.__repr__('')
              Name.__repr__('')
              return "Name(u'q')"
              Name.__repr__('')
              return "Name(u'b1')"
             return "Binop(Name(u'q'), u'*', Name(u'b1'))"
            return "Binop(Binop(Name(u'p'), u'*', Name(u'b')), u'+', Binop(Name(u'q'), u'*', Name(u'b1')))"
           return "Exprs([Name(u'a1'), Name(u'b1'), Binop(Binop(Name(u'p'), u'*', Name(u'a')), u'+', Binop(Name(u'q'), u'*', Name(u'a1'))), Binop(Binop(Name(u'p'), u'*', Name(u'b')), u'+', Binop(Name(u'q'), u'*', Name(u'b1')))])"
          return Exprs([Name(u'a1'), Name(u'b1'), Binop(Binop(Name(u'p'), u'*', Name(u'a')), u'+', Binop(Name(u'q'), u'*', Name(u'a1'))), Binop(Binop(Name(u'p'), u'*', Name(u'b')), u'+', Binop(Name(u'q'), u'*', Name(u'b1')))])
          Parser.expect('NEWLINE')
           Parser.nexttoken('')
           return (NAME, u'd')
          return ''
           Exprs.__repr__('')
            Name.__repr__('')
            return "Name(u'a')"
            Name.__repr__('')
            return "Name(u'b')"
            Name.__repr__('')
            return "Name(u'a1')"
            Name.__repr__('')
            return "Name(u'b1')"
           return "Exprs([Name(u'a'), Name(u'b'), Name(u'a1'), Name(u'b1')])"
           Exprs.__repr__('')
            Name.__repr__('')
            return "Name(u'a1')"
            Name.__repr__('')
            return "Name(u'b1')"
            Binop.__repr__('')
             Binop.__repr__('')
              Name.__repr__('')
              return "Name(u'p')"
              Name.__repr__('')
              return "Name(u'a')"
             return "Binop(Name(u'p'), u'*', Name(u'a'))"
             Binop.__repr__('')
              Name.__repr__('')
              return "Name(u'q')"
              Name.__repr__('')
              return "Name(u'a1')"
             return "Binop(Name(u'q'), u'*', Name(u'a1'))"
            return "Binop(Binop(Name(u'p'), u'*', Name(u'a')), u'+', Binop(Name(u'q'), u'*', Name(u'a1')))"
            Binop.__repr__('')
             Binop.__repr__('')
              Name.__repr__('')
              return "Name(u'p')"
              Name.__repr__('')
              return "Name(u'b')"
             return "Binop(Name(u'p'), u'*', Name(u'b'))"
             Binop.__repr__('')
              Name.__repr__('')
              return "Name(u'q')"
              Name.__repr__('')
              return "Name(u'b1')"
             return "Binop(Name(u'q'), u'*', Name(u'b1'))"
            return "Binop(Binop(Name(u'p'), u'*', Name(u'b')), u'+', Binop(Name(u'q'), u'*', Name(u'b1')))"
           return "Exprs([Name(u'a1'), Name(u'b1'), Binop(Binop(Name(u'p'), u'*', Name(u'a')), u'+', Binop(Name(u'q'), u'*', Name(u'a1'))), Binop(Binop(Name(u'p'), u'*', Name(u'b')), u'+', Binop(Name(u'q'), u'*', Name(u'b1')))])"
          Assign.__init__("[Exprs([Name(u'a'), ...a1'), Name(u'b1')])], Exprs([Name(u'a1'), ...'*', Name(u'b1')))])")
          return
          Assign.__repr__('')
           Exprs.__repr__('')
            Name.__repr__('')
            return "Name(u'a')"
            Name.__repr__('')
            return "Name(u'b')"
            Name.__repr__('')
            return "Name(u'a1')"
            Name.__repr__('')
            return "Name(u'b1')"
           return "Exprs([Name(u'a'), Name(u'b'), Name(u'a1'), Name(u'b1')])"
           Exprs.__repr__('')
            Name.__repr__('')
            return "Name(u'a1')"
            Name.__repr__('')
            return "Name(u'b1')"
            Binop.__repr__('')
             Binop.__repr__('')
              Name.__repr__('')
              return "Name(u'p')"
              Name.__repr__('')
              return "Name(u'a')"
             return "Binop(Name(u'p'), u'*', Name(u'a'))"
             Binop.__repr__('')
              Name.__repr__('')
              return "Name(u'q')"
              Name.__repr__('')
              return "Name(u'a1')"
             return "Binop(Name(u'q'), u'*', Name(u'a1'))"
            return "Binop(Binop(Name(u'p'), u'*', Name(u'a')), u'+', Binop(Name(u'q'), u'*', Name(u'a1')))"
            Binop.__repr__('')
             Binop.__repr__('')
              Name.__repr__('')
              return "Name(u'p')"
              Name.__repr__('')
              return "Name(u'b')"
             return "Binop(Name(u'p'), u'*', Name(u'b'))"
             Binop.__repr__('')
              Name.__repr__('')
              return "Name(u'q')"
              Name.__repr__('')
              return "Name(u'b1')"
             return "Binop(Name(u'q'), u'*', Name(u'b1'))"
            return "Binop(Binop(Name(u'p'), u'*', Name(u'b')), u'+', Binop(Name(u'q'), u'*', Name(u'b1')))"
           return "Exprs([Name(u'a1'), Name(u'b1'), Binop(Binop(Name(u'p'), u'*', Name(u'a')), u'+', Binop(Name(u'q'), u'*', Name(u'a1'))), Binop(Binop(Name(u'p'), u'*', Name(u'b')), u'+', Binop(Name(u'q'), u'*', Name(u'b1')))])"
          return "Assign([Exprs([Name(u'a'), Name(u'b'), Name(u'a1'), Name(u'b1')])], Exprs([Name(u'a1'), Name(u'b1'), Binop(Binop(Name(u'p'), u'*', Name(u'a')), u'+', Binop(Name(u'q'), u'*', Name(u'a1'))), Binop(Binop(Name(u'p'), u'*', Name(u'b')), u'+', Binop(Name(u'q'), u'*', Name(u'b1')))]))"
         return Assign([Exprs([Name(u'a'), Name(u'b'), Name(u'a1'), Name(u'b1')])], Exprs([Name(u'a1'), Name(u'b1'), Binop(Binop(Name(u'p'), u'*', Name(u'a')), u'+', Binop(Name(u'q'), u'*', Name(u'a1'))), Binop(Binop(Name(u'p'), u'*', Name(u'b')), u'+', Binop(Name(u'q'), u'*', Name(u'b1')))]))
         Assign.__repr__('')
          Exprs.__repr__('')
           Name.__repr__('')
           return "Name(u'a')"
           Name.__repr__('')
           return "Name(u'b')"
           Name.__repr__('')
           return "Name(u'a1')"
           Name.__repr__('')
           return "Name(u'b1')"
          return "Exprs([Name(u'a'), Name(u'b'), Name(u'a1'), Name(u'b1')])"
          Exprs.__repr__('')
           Name.__repr__('')
           return "Name(u'a1')"
           Name.__repr__('')
           return "Name(u'b1')"
           Binop.__repr__('')
            Binop.__repr__('')
             Name.__repr__('')
             return "Name(u'p')"
             Name.__repr__('')
             return "Name(u'a')"
            return "Binop(Name(u'p'), u'*', Name(u'a'))"
            Binop.__repr__('')
             Name.__repr__('')
             return "Name(u'q')"
             Name.__repr__('')
             return "Name(u'a1')"
            return "Binop(Name(u'q'), u'*', Name(u'a1'))"
           return "Binop(Binop(Name(u'p'), u'*', Name(u'a')), u'+', Binop(Name(u'q'), u'*', Name(u'a1')))"
           Binop.__repr__('')
            Binop.__repr__('')
             Name.__repr__('')
             return "Name(u'p')"
             Name.__repr__('')
             return "Name(u'b')"
            return "Binop(Name(u'p'), u'*', Name(u'b'))"
            Binop.__repr__('')
             Name.__repr__('')
             return "Name(u'q')"
             Name.__repr__('')
             return "Name(u'b1')"
            return "Binop(Name(u'q'), u'*', Name(u'b1'))"
           return "Binop(Binop(Name(u'p'), u'*', Name(u'b')), u'+', Binop(Name(u'q'), u'*', Name(u'b1')))"
          return "Exprs([Name(u'a1'), Name(u'b1'), Binop(Binop(Name(u'p'), u'*', Name(u'a')), u'+', Binop(Name(u'q'), u'*', Name(u'a1'))), Binop(Binop(Name(u'p'), u'*', Name(u'b')), u'+', Binop(Name(u'q'), u'*', Name(u'b1')))])"
         return "Assign([Exprs([Name(u'a'), Name(u'b'), Name(u'a1'), Name(u'b1')])], Exprs([Name(u'a1'), Name(u'b1'), Binop(Binop(Name(u'p'), u'*', Name(u'a')), u'+', Binop(Name(u'q'), u'*', Name(u'a1'))), Binop(Binop(Name(u'p'), u'*', Name(u'b')), u'+', Binop(Name(u'q'), u'*', Name(u'b1')))]))"
        return Assign([Exprs([Name(u'a'), Name(u'b'), Name(u'a1'), Name(u'b1')])], Exprs([Name(u'a1'), Name(u'b1'), Binop(Binop(Name(u'p'), u'*', Name(u'a')), u'+', Binop(Name(u'q'), u'*', Name(u'a1'))), Binop(Binop(Name(u'p'), u'*', Name(u'b')), u'+', Binop(Name(u'q'), u'*', Name(u'b1')))]))
        Parser.parse_stmt('')
         Parser.parse_simple('')
          Parser.parse_exprs('')
           Parser.parse_expr('')
            Parser.parse_term('')
             Parser.parse_atom('')
              Parser.expect('NAME')
               Parser.nexttoken('')
               return (OPERATOR, u',')
              return u'd'
              Name.__init__("u'd'")
              return
              Name.__repr__('')
              return "Name(u'd')"
             return Name(u'd')
             Name.__repr__('')
             return "Name(u'd')"
            return Name(u'd')
            Name.__repr__('')
            return "Name(u'd')"
           return Name(u'd')
           Parser.nexttoken('')
           return (NAME, u'd1')
           Parser.parse_expr('')
            Parser.parse_term('')
             Parser.parse_atom('')
              Parser.expect('NAME')
               Parser.nexttoken('')
               return (OPERATOR, u'=')
              return u'd1'
              Name.__init__("u'd1'")
              return
              Name.__repr__('')
              return "Name(u'd1')"
             return Name(u'd1')
             Name.__repr__('')
             return "Name(u'd1')"
            return Name(u'd1')
            Name.__repr__('')
            return "Name(u'd1')"
           return Name(u'd1')
            Name.__repr__('')
            return "Name(u'd')"
            Name.__repr__('')
            return "Name(u'd1')"
           Exprs.__init__("[Name(u'd'), Name(u'd1')]")
           return
           Exprs.__repr__('')
            Name.__repr__('')
            return "Name(u'd')"
            Name.__repr__('')
            return "Name(u'd1')"
           return "Exprs([Name(u'd'), Name(u'd1')])"
          return Exprs([Name(u'd'), Name(u'd1')])
          Parser.nexttoken('')
          return (NAME, u'a')
          Parser.parse_exprs('')
           Parser.parse_expr('')
            Parser.parse_term('')
             Parser.parse_atom('')
              Parser.expect('NAME')
               Parser.nexttoken('')
               return (OPERATOR, u'//')
              return u'a'
              Name.__init__("u'a'")
              return
              Name.__repr__('')
              return "Name(u'a')"
             return Name(u'a')
             Name.__repr__('')
             return "Name(u'a')"
            return Name(u'a')
            Parser.expect('OPERATOR')
             Parser.nexttoken('')
             return (NAME, u'b')
            return u'//'
            Parser.parse_expr('7')
             Parser.parse_term('')
              Parser.parse_atom('')
               Parser.expect('NAME')
                Parser.nexttoken('')
                return (OPERATOR, u',')
               return u'b'
               Name.__init__("u'b'")
               return
               Name.__repr__('')
               return "Name(u'b')"
              return Name(u'b')
              Name.__repr__('')
              return "Name(u'b')"
             return Name(u'b')
             Name.__repr__('')
             return "Name(u'b')"
            return Name(u'b')
             Name.__repr__('')
             return "Name(u'a')"
             Name.__repr__('')
             return "Name(u'b')"
            Binop.__init__("Name(u'a'), u'//', Name(u'b')")
            return
            Binop.__repr__('')
             Name.__repr__('')
             return "Name(u'a')"
             Name.__repr__('')
             return "Name(u'b')"
            return "Binop(Name(u'a'), u'//', Name(u'b'))"
           return Binop(Name(u'a'), u'//', Name(u'b'))
           Parser.nexttoken('')
           return (NAME, u'a1')
           Parser.parse_expr('')
            Parser.parse_term('')
             Parser.parse_atom('')
              Parser.expect('NAME')
               Parser.nexttoken('')
               return (OPERATOR, u'//')
              return u'a1'
              Name.__init__("u'a1'")
              return
              Name.__repr__('')
              return "Name(u'a1')"
             return Name(u'a1')
             Name.__repr__('')
             return "Name(u'a1')"
            return Name(u'a1')
            Parser.expect('OPERATOR')
             Parser.nexttoken('')
             return (NAME, u'b1')
            return u'//'
            Parser.parse_expr('7')
             Parser.parse_term('')
              Parser.parse_atom('')
               Parser.expect('NAME')
                Parser.nexttoken('')
                return (NEWLINE, '')
               return u'b1'
               Name.__init__("u'b1'")
               return
               Name.__repr__('')
               return "Name(u'b1')"
              return Name(u'b1')
              Name.__repr__('')
              return "Name(u'b1')"
             return Name(u'b1')
             Name.__repr__('')
             return "Name(u'b1')"
            return Name(u'b1')
             Name.__repr__('')
             return "Name(u'a1')"
             Name.__repr__('')
             return "Name(u'b1')"
            Binop.__init__("Name(u'a1'), u'//', Name(u'b1')")
            return
            Binop.__repr__('')
             Name.__repr__('')
             return "Name(u'a1')"
             Name.__repr__('')
             return "Name(u'b1')"
            return "Binop(Name(u'a1'), u'//', Name(u'b1'))"
           return Binop(Name(u'a1'), u'//', Name(u'b1'))
            Binop.__repr__('')
             Name.__repr__('')
             return "Name(u'a')"
             Name.__repr__('')
             return "Name(u'b')"
            return "Binop(Name(u'a'), u'//', Name(u'b'))"
            Binop.__repr__('')
             Name.__repr__('')
             return "Name(u'a1')"
             Name.__repr__('')
             return "Name(u'b1')"
            return "Binop(Name(u'a1'), u'//', Name(u'b1'))"
           Exprs.__init__("[Binop(Name(u'a'), u...u'//', Name(u'b1'))]")
           return
           Exprs.__repr__('')
            Binop.__repr__('')
             Name.__repr__('')
             return "Name(u'a')"
             Name.__repr__('')
             return "Name(u'b')"
            return "Binop(Name(u'a'), u'//', Name(u'b'))"
            Binop.__repr__('')
             Name.__repr__('')
             return "Name(u'a1')"
             Name.__repr__('')
             return "Name(u'b1')"
            return "Binop(Name(u'a1'), u'//', Name(u'b1'))"
           return "Exprs([Binop(Name(u'a'), u'//', Name(u'b')), Binop(Name(u'a1'), u'//', Name(u'b1'))])"
          return Exprs([Binop(Name(u'a'), u'//', Name(u'b')), Binop(Name(u'a1'), u'//', Name(u'b1'))])
          Parser.expect('NEWLINE')
           Parser.nexttoken('')
           return (NAME, u'while')
          return ''
           Exprs.__repr__('')
            Name.__repr__('')
            return "Name(u'd')"
            Name.__repr__('')
            return "Name(u'd1')"
           return "Exprs([Name(u'd'), Name(u'd1')])"
           Exprs.__repr__('')
            Binop.__repr__('')
             Name.__repr__('')
             return "Name(u'a')"
             Name.__repr__('')
             return "Name(u'b')"
            return "Binop(Name(u'a'), u'//', Name(u'b'))"
            Binop.__repr__('')
             Name.__repr__('')
             return "Name(u'a1')"
             Name.__repr__('')
             return "Name(u'b1')"
            return "Binop(Name(u'a1'), u'//', Name(u'b1'))"
           return "Exprs([Binop(Name(u'a'), u'//', Name(u'b')), Binop(Name(u'a1'), u'//', Name(u'b1'))])"
          Assign.__init__("[Exprs([Name(u'd'), Name(u'd1')])], Exprs([Binop(Name(u'...'//', Name(u'b1'))])")
          return
          Assign.__repr__('')
           Exprs.__repr__('')
            Name.__repr__('')
            return "Name(u'd')"
            Name.__repr__('')
            return "Name(u'd1')"
           return "Exprs([Name(u'd'), Name(u'd1')])"
           Exprs.__repr__('')
            Binop.__repr__('')
             Name.__repr__('')
             return "Name(u'a')"
             Name.__repr__('')
             return "Name(u'b')"
            return "Binop(Name(u'a'), u'//', Name(u'b'))"
            Binop.__repr__('')
             Name.__repr__('')
             return "Name(u'a1')"
             Name.__repr__('')
             return "Name(u'b1')"
            return "Binop(Name(u'a1'), u'//', Name(u'b1'))"
           return "Exprs([Binop(Name(u'a'), u'//', Name(u'b')), Binop(Name(u'a1'), u'//', Name(u'b1'))])"
          return "Assign([Exprs([Name(u'd'), Name(u'd1')])], Exprs([Binop(Name(u'a'), u'//', Name(u'b')), Binop(Name(u'a1'), u'//', Name(u'b1'))]))"
         return Assign([Exprs([Name(u'd'), Name(u'd1')])], Exprs([Binop(Name(u'a'), u'//', Name(u'b')), Binop(Name(u'a1'), u'//', Name(u'b1'))]))
         Assign.__repr__('')
          Exprs.__repr__('')
           Name.__repr__('')
           return "Name(u'd')"
           Name.__repr__('')
           return "Name(u'd1')"
          return "Exprs([Name(u'd'), Name(u'd1')])"
          Exprs.__repr__('')
           Binop.__repr__('')
            Name.__repr__('')
            return "Name(u'a')"
            Name.__repr__('')
            return "Name(u'b')"
           return "Binop(Name(u'a'), u'//', Name(u'b'))"
           Binop.__repr__('')
            Name.__repr__('')
            return "Name(u'a1')"
            Name.__repr__('')
            return "Name(u'b1')"
           return "Binop(Name(u'a1'), u'//', Name(u'b1'))"
          return "Exprs([Binop(Name(u'a'), u'//', Name(u'b')), Binop(Name(u'a1'), u'//', Name(u'b1'))])"
         return "Assign([Exprs([Name(u'd'), Name(u'd1')])], Exprs([Binop(Name(u'a'), u'//', Name(u'b')), Binop(Name(u'a1'), u'//', Name(u'b1'))]))"
        return Assign([Exprs([Name(u'd'), Name(u'd1')])], Exprs([Binop(Name(u'a'), u'//', Name(u'b')), Binop(Name(u'a1'), u'//', Name(u'b1'))]))
        Parser.parse_stmt('')
         Parser.parse_while('')
          Parser.expect("NAME, 'while'")
           Parser.nexttoken('')
           return (NAME, u'd')
          return u'while'
          Parser.parse_expr('')
           Parser.parse_term('')
            Parser.parse_atom('')
             Parser.expect('NAME')
              Parser.nexttoken('')
              return (OPERATOR, u'==')
             return u'd'
             Name.__init__("u'd'")
             return
             Name.__repr__('')
             return "Name(u'd')"
            return Name(u'd')
            Name.__repr__('')
            return "Name(u'd')"
           return Name(u'd')
           Parser.expect('OPERATOR')
            Parser.nexttoken('')
            return (NAME, u'd1')
           return u'=='
           Parser.parse_expr('1')
            Parser.parse_term('')
             Parser.parse_atom('')
              Parser.expect('NAME')
               Parser.nexttoken('')
               return (OPERATOR, u':')
              return u'd1'
              Name.__init__("u'd1'")
              return
              Name.__repr__('')
              return "Name(u'd1')"
             return Name(u'd1')
             Name.__repr__('')
             return "Name(u'd1')"
            return Name(u'd1')
            Name.__repr__('')
            return "Name(u'd1')"
           return Name(u'd1')
            Name.__repr__('')
            return "Name(u'd')"
            Name.__repr__('')
            return "Name(u'd1')"
           Binop.__init__("Name(u'd'), u'==', Name(u'd1')")
           return
           Binop.__repr__('')
            Name.__repr__('')
            return "Name(u'd')"
            Name.__repr__('')
            return "Name(u'd1')"
           return "Binop(Name(u'd'), u'==', Name(u'd1'))"
          return Binop(Name(u'd'), u'==', Name(u'd1'))
          Parser.expect("OPERATOR, ':'")
           Parser.nexttoken('')
           return (NEWLINE, '')
          return u':'
          Parser.expect('NEWLINE')
           Parser.nexttoken('')
           return (INDENT, '')
          return ''
          Parser.parse_body('')
           Parser.expect('INDENT')
            Parser.nexttoken('')
            return (NAME, u'yield')
           return ''
           Parser.parse_stmt('')
            Parser.parse_yield('')
             Parser.expect("NAME, 'yield'")
              Parser.nexttoken('')
              return (NAME, u'd')
             return u'yield'
             Parser.parse_exprs('')
              Parser.parse_expr('')
               Parser.parse_term('')
                Parser.parse_atom('')
                 Parser.expect('NAME')
                  Parser.nexttoken('')
                  return (NEWLINE, '')
                 return u'd'
                 Name.__init__("u'd'")
                 return
                 Name.__repr__('')
                 return "Name(u'd')"
                return Name(u'd')
                Name.__repr__('')
                return "Name(u'd')"
               return Name(u'd')
               Name.__repr__('')
               return "Name(u'd')"
              return Name(u'd')
              Name.__repr__('')
              return "Name(u'd')"
             return Name(u'd')
             Parser.expect('NEWLINE')
              Parser.nexttoken('')
              return (NAME, u'a')
             return ''
              Name.__repr__('')
              return "Name(u'd')"
             Yield.__init__("Name(u'd')")
             return
             Yield.__repr__('')
              Name.__repr__('')
              return "Name(u'd')"
             return "Yield(Name(u'd'))"
            return Yield(Name(u'd'))
            Yield.__repr__('')
             Name.__repr__('')
             return "Name(u'd')"
            return "Yield(Name(u'd'))"
           return Yield(Name(u'd'))
           Parser.parse_stmt('')
            Parser.parse_simple('')
             Parser.parse_exprs('')
              Parser.parse_expr('')
               Parser.parse_term('')
                Parser.parse_atom('')
                 Parser.expect('NAME')
                  Parser.nexttoken('')
                  return (OPERATOR, u',')
                 return u'a'
                 Name.__init__("u'a'")
                 return
                 Name.__repr__('')
                 return "Name(u'a')"
                return Name(u'a')
                Name.__repr__('')
                return "Name(u'a')"
               return Name(u'a')
               Name.__repr__('')
               return "Name(u'a')"
              return Name(u'a')
              Parser.nexttoken('')
              return (NAME, u'a1')
              Parser.parse_expr('')
               Parser.parse_term('')
                Parser.parse_atom('')
                 Parser.expect('NAME')
                  Parser.nexttoken('')
                  return (OPERATOR, u'=')
                 return u'a1'
                 Name.__init__("u'a1'")
                 return
                 Name.__repr__('')
                 return "Name(u'a1')"
                return Name(u'a1')
                Name.__repr__('')
                return "Name(u'a1')"
               return Name(u'a1')
               Name.__repr__('')
               return "Name(u'a1')"
              return Name(u'a1')
               Name.__repr__('')
               return "Name(u'a')"
               Name.__repr__('')
               return "Name(u'a1')"
              Exprs.__init__("[Name(u'a'), Name(u'a1')]")
              return
              Exprs.__repr__('')
               Name.__repr__('')
               return "Name(u'a')"
               Name.__repr__('')
               return "Name(u'a1')"
              return "Exprs([Name(u'a'), Name(u'a1')])"
             return Exprs([Name(u'a'), Name(u'a1')])
             Parser.nexttoken('')
             return (NUMBER, u'10')
             Parser.parse_exprs('')
              Parser.parse_expr('')
               Parser.parse_term('')
                Parser.parse_atom('')
                 Parser.expect('NUMBER')
                  Parser.nexttoken('')
                  return (OPERATOR, u'*')
                 return u'10'
                 Literal.__init__("u'10'")
                  Number.evalit('')
                  return 10
                 return
                 Literal.__repr__('')
                 return "Number(u'10')"
                return Number(u'10')
                Literal.__repr__('')
                return "Number(u'10')"
               return Number(u'10')
               Parser.expect('OPERATOR')
                Parser.nexttoken('')
                return (OPERATOR, u'(')
               return u'*'
               Parser.parse_expr('7')
                Parser.parse_term('')
                 Parser.parse_atom('')
                  Parser.nexttoken('')
                  return (NAME, u'a')
                  Parser.parse_exprs('')
                   Parser.parse_expr('')
                    Parser.parse_term('')
                     Parser.parse_atom('')
                      Parser.expect('NAME')
                       Parser.nexttoken('')
                       return (OPERATOR, u'%')
                      return u'a'
                      Name.__init__("u'a'")
                      return
                      Name.__repr__('')
                      return "Name(u'a')"
                     return Name(u'a')
                     Name.__repr__('')
                     return "Name(u'a')"
                    return Name(u'a')
                    Parser.expect('OPERATOR')
                     Parser.nexttoken('')
                     return (NAME, u'b')
                    return u'%'
                    Parser.parse_expr('7')
                     Parser.parse_term('')
                      Parser.parse_atom('')
                       Parser.expect('NAME')
                        Parser.nexttoken('')
                        return (OPERATOR, u')')
                       return u'b'
                       Name.__init__("u'b'")
                       return
                       Name.__repr__('')
                       return "Name(u'b')"
                      return Name(u'b')
                      Name.__repr__('')
                      return "Name(u'b')"
                     return Name(u'b')
                     Name.__repr__('')
                     return "Name(u'b')"
                    return Name(u'b')
                     Name.__repr__('')
                     return "Name(u'a')"
                     Name.__repr__('')
                     return "Name(u'b')"
                    Binop.__init__("Name(u'a'), u'%', Name(u'b')")
                    return
                    Binop.__repr__('')
                     Name.__repr__('')
                     return "Name(u'a')"
                     Name.__repr__('')
                     return "Name(u'b')"
                    return "Binop(Name(u'a'), u'%', Name(u'b'))"
                   return Binop(Name(u'a'), u'%', Name(u'b'))
                   Binop.__repr__('')
                    Name.__repr__('')
                    return "Name(u'a')"
                    Name.__repr__('')
                    return "Name(u'b')"
                   return "Binop(Name(u'a'), u'%', Name(u'b'))"
                  return Binop(Name(u'a'), u'%', Name(u'b'))
                  Parser.expect("OPERATOR, ')'")
                   Parser.nexttoken('')
                   return (OPERATOR, u',')
                  return u')'
                  Binop.__repr__('')
                   Name.__repr__('')
                   return "Name(u'a')"
                   Name.__repr__('')
                   return "Name(u'b')"
                  return "Binop(Name(u'a'), u'%', Name(u'b'))"
                 return Binop(Name(u'a'), u'%', Name(u'b'))
                 Binop.__repr__('')
                  Name.__repr__('')
                  return "Name(u'a')"
                  Name.__repr__('')
                  return "Name(u'b')"
                 return "Binop(Name(u'a'), u'%', Name(u'b'))"
                return Binop(Name(u'a'), u'%', Name(u'b'))
                Binop.__repr__('')
                 Name.__repr__('')
                 return "Name(u'a')"
                 Name.__repr__('')
                 return "Name(u'b')"
                return "Binop(Name(u'a'), u'%', Name(u'b'))"
               return Binop(Name(u'a'), u'%', Name(u'b'))
                Literal.__repr__('')
                return "Number(u'10')"
                Binop.__repr__('')
                 Name.__repr__('')
                 return "Name(u'a')"
                 Name.__repr__('')
                 return "Name(u'b')"
                return "Binop(Name(u'a'), u'%', Name(u'b'))"
               Binop.__init__("Number(u'10'), u'*', Binop(Name(u'a'), u'%', Name(u'b'))")
               return
               Binop.__repr__('')
                Literal.__repr__('')
                return "Number(u'10')"
                Binop.__repr__('')
                 Name.__repr__('')
                 return "Name(u'a')"
                 Name.__repr__('')
                 return "Name(u'b')"
                return "Binop(Name(u'a'), u'%', Name(u'b'))"
               return "Binop(Number(u'10'), u'*', Binop(Name(u'a'), u'%', Name(u'b')))"
              return Binop(Number(u'10'), u'*', Binop(Name(u'a'), u'%', Name(u'b')))
              Parser.nexttoken('')
              return (NUMBER, u'10')
              Parser.parse_expr('')
               Parser.parse_term('')
                Parser.parse_atom('')
                 Parser.expect('NUMBER')
                  Parser.nexttoken('')
                  return (OPERATOR, u'*')
                 return u'10'
                 Literal.__init__("u'10'")
                  Number.evalit('')
                  return 10
                 return
                 Literal.__repr__('')
                 return "Number(u'10')"
                return Number(u'10')
                Literal.__repr__('')
                return "Number(u'10')"
               return Number(u'10')
               Parser.expect('OPERATOR')
                Parser.nexttoken('')
                return (OPERATOR, u'(')
               return u'*'
               Parser.parse_expr('7')
                Parser.parse_term('')
                 Parser.parse_atom('')
                  Parser.nexttoken('')
                  return (NAME, u'a1')
                  Parser.parse_exprs('')
                   Parser.parse_expr('')
                    Parser.parse_term('')
                     Parser.parse_atom('')
                      Parser.expect('NAME')
                       Parser.nexttoken('')
                       return (OPERATOR, u'%')
                      return u'a1'
                      Name.__init__("u'a1'")
                      return
                      Name.__repr__('')
                      return "Name(u'a1')"
                     return Name(u'a1')
                     Name.__repr__('')
                     return "Name(u'a1')"
                    return Name(u'a1')
                    Parser.expect('OPERATOR')
                     Parser.nexttoken('')
                     return (NAME, u'b1')
                    return u'%'
                    Parser.parse_expr('7')
                     Parser.parse_term('')
                      Parser.parse_atom('')
                       Parser.expect('NAME')
                        Parser.nexttoken('')
                        return (OPERATOR, u')')
                       return u'b1'
                       Name.__init__("u'b1'")
                       return
                       Name.__repr__('')
                       return "Name(u'b1')"
                      return Name(u'b1')
                      Name.__repr__('')
                      return "Name(u'b1')"
                     return Name(u'b1')
                     Name.__repr__('')
                     return "Name(u'b1')"
                    return Name(u'b1')
                     Name.__repr__('')
                     return "Name(u'a1')"
                     Name.__repr__('')
                     return "Name(u'b1')"
                    Binop.__init__("Name(u'a1'), u'%', Name(u'b1')")
                    return
                    Binop.__repr__('')
                     Name.__repr__('')
                     return "Name(u'a1')"
                     Name.__repr__('')
                     return "Name(u'b1')"
                    return "Binop(Name(u'a1'), u'%', Name(u'b1'))"
                   return Binop(Name(u'a1'), u'%', Name(u'b1'))
                   Binop.__repr__('')
                    Name.__repr__('')
                    return "Name(u'a1')"
                    Name.__repr__('')
                    return "Name(u'b1')"
                   return "Binop(Name(u'a1'), u'%', Name(u'b1'))"
                  return Binop(Name(u'a1'), u'%', Name(u'b1'))
                  Parser.expect("OPERATOR, ')'")
                   Parser.nexttoken('')
                   return (NEWLINE, '')
                  return u')'
                  Binop.__repr__('')
                   Name.__repr__('')
                   return "Name(u'a1')"
                   Name.__repr__('')
                   return "Name(u'b1')"
                  return "Binop(Name(u'a1'), u'%', Name(u'b1'))"
                 return Binop(Name(u'a1'), u'%', Name(u'b1'))
                 Binop.__repr__('')
                  Name.__repr__('')
                  return "Name(u'a1')"
                  Name.__repr__('')
                  return "Name(u'b1')"
                 return "Binop(Name(u'a1'), u'%', Name(u'b1'))"
                return Binop(Name(u'a1'), u'%', Name(u'b1'))
                Binop.__repr__('')
                 Name.__repr__('')
                 return "Name(u'a1')"
                 Name.__repr__('')
                 return "Name(u'b1')"
                return "Binop(Name(u'a1'), u'%', Name(u'b1'))"
               return Binop(Name(u'a1'), u'%', Name(u'b1'))
                Literal.__repr__('')
                return "Number(u'10')"
                Binop.__repr__('')
                 Name.__repr__('')
                 return "Name(u'a1')"
                 Name.__repr__('')
                 return "Name(u'b1')"
                return "Binop(Name(u'a1'), u'%', Name(u'b1'))"
               Binop.__init__("Number(u'10'), u'*', Binop(Name(u'a1'), u'%', Name(u'b1'))")
               return
               Binop.__repr__('')
                Literal.__repr__('')
                return "Number(u'10')"
                Binop.__repr__('')
                 Name.__repr__('')
                 return "Name(u'a1')"
                 Name.__repr__('')
                 return "Name(u'b1')"
                return "Binop(Name(u'a1'), u'%', Name(u'b1'))"
               return "Binop(Number(u'10'), u'*', Binop(Name(u'a1'), u'%', Name(u'b1')))"
              return Binop(Number(u'10'), u'*', Binop(Name(u'a1'), u'%', Name(u'b1')))
               Binop.__repr__('')
                Literal.__repr__('')
                return "Number(u'10')"
                Binop.__repr__('')
                 Name.__repr__('')
                 return "Name(u'a')"
                 Name.__repr__('')
                 return "Name(u'b')"
                return "Binop(Name(u'a'), u'%', Name(u'b'))"
               return "Binop(Number(u'10'), u'*', Binop(Name(u'a'), u'%', Name(u'b')))"
               Binop.__repr__('')
                Literal.__repr__('')
                return "Number(u'10')"
                Binop.__repr__('')
                 Name.__repr__('')
                 return "Name(u'a1')"
                 Name.__repr__('')
                 return "Name(u'b1')"
                return "Binop(Name(u'a1'), u'%', Name(u'b1'))"
               return "Binop(Number(u'10'), u'*', Binop(Name(u'a1'), u'%', Name(u'b1')))"
              Exprs.__init__("[Binop(Number(u'10')...u'%', Name(u'b1')))]")
              return
              Exprs.__repr__('')
               Binop.__repr__('')
                Literal.__repr__('')
                return "Number(u'10')"
                Binop.__repr__('')
                 Name.__repr__('')
                 return "Name(u'a')"
                 Name.__repr__('')
                 return "Name(u'b')"
                return "Binop(Name(u'a'), u'%', Name(u'b'))"
               return "Binop(Number(u'10'), u'*', Binop(Name(u'a'), u'%', Name(u'b')))"
               Binop.__repr__('')
                Literal.__repr__('')
                return "Number(u'10')"
                Binop.__repr__('')
                 Name.__repr__('')
                 return "Name(u'a1')"
                 Name.__repr__('')
                 return "Name(u'b1')"
                return "Binop(Name(u'a1'), u'%', Name(u'b1'))"
               return "Binop(Number(u'10'), u'*', Binop(Name(u'a1'), u'%', Name(u'b1')))"
              return "Exprs([Binop(Number(u'10'), u'*', Binop(Name(u'a'), u'%', Name(u'b'))), Binop(Number(u'10'), u'*', Binop(Name(u'a1'), u'%', Name(u'b1')))])"
             return Exprs([Binop(Number(u'10'), u'*', Binop(Name(u'a'), u'%', Name(u'b'))), Binop(Number(u'10'), u'*', Binop(Name(u'a1'), u'%', Name(u'b1')))])
             Parser.expect('NEWLINE')
              Parser.nexttoken('')
              return (NAME, u'd')
             return ''
              Exprs.__repr__('')
               Name.__repr__('')
               return "Name(u'a')"
               Name.__repr__('')
               return "Name(u'a1')"
              return "Exprs([Name(u'a'), Name(u'a1')])"
              Exprs.__repr__('')
               Binop.__repr__('')
                Literal.__repr__('')
                return "Number(u'10')"
                Binop.__repr__('')
                 Name.__repr__('')
                 return "Name(u'a')"
                 Name.__repr__('')
                 return "Name(u'b')"
                return "Binop(Name(u'a'), u'%', Name(u'b'))"
               return "Binop(Number(u'10'), u'*', Binop(Name(u'a'), u'%', Name(u'b')))"
               Binop.__repr__('')
                Literal.__repr__('')
                return "Number(u'10')"
                Binop.__repr__('')
                 Name.__repr__('')
                 return "Name(u'a1')"
                 Name.__repr__('')
                 return "Name(u'b1')"
                return "Binop(Name(u'a1'), u'%', Name(u'b1'))"
               return "Binop(Number(u'10'), u'*', Binop(Name(u'a1'), u'%', Name(u'b1')))"
              return "Exprs([Binop(Number(u'10'), u'*', Binop(Name(u'a'), u'%', Name(u'b'))), Binop(Number(u'10'), u'*', Binop(Name(u'a1'), u'%', Name(u'b1')))])"
             Assign.__init__("[Exprs([Name(u'a'), Name(u'a1')])], Exprs([Binop(Number(...'%', Name(u'b1')))])")
             return
             Assign.__repr__('')
              Exprs.__repr__('')
               Name.__repr__('')
               return "Name(u'a')"
               Name.__repr__('')
               return "Name(u'a1')"
              return "Exprs([Name(u'a'), Name(u'a1')])"
              Exprs.__repr__('')
               Binop.__repr__('')
                Literal.__repr__('')
                return "Number(u'10')"
                Binop.__repr__('')
                 Name.__repr__('')
                 return "Name(u'a')"
                 Name.__repr__('')
                 return "Name(u'b')"
                return "Binop(Name(u'a'), u'%', Name(u'b'))"
               return "Binop(Number(u'10'), u'*', Binop(Name(u'a'), u'%', Name(u'b')))"
               Binop.__repr__('')
                Literal.__repr__('')
                return "Number(u'10')"
                Binop.__repr__('')
                 Name.__repr__('')
                 return "Name(u'a1')"
                 Name.__repr__('')
                 return "Name(u'b1')"
                return "Binop(Name(u'a1'), u'%', Name(u'b1'))"
               return "Binop(Number(u'10'), u'*', Binop(Name(u'a1'), u'%', Name(u'b1')))"
              return "Exprs([Binop(Number(u'10'), u'*', Binop(Name(u'a'), u'%', Name(u'b'))), Binop(Number(u'10'), u'*', Binop(Name(u'a1'), u'%', Name(u'b1')))])"
             return "Assign([Exprs([Name(u'a'), Name(u'a1')])], Exprs([Binop(Number(u'10'), u'*', Binop(Name(u'a'), u'%', Name(u'b'))), Binop(Number(u'10'), u'*', Binop(Name(u'a1'), u'%', Name(u'b1')))]))"
            return Assign([Exprs([Name(u'a'), Name(u'a1')])], Exprs([Binop(Number(u'10'), u'*', Binop(Name(u'a'), u'%', Name(u'b'))), Binop(Number(u'10'), u'*', Binop(Name(u'a1'), u'%', Name(u'b1')))]))
            Assign.__repr__('')
             Exprs.__repr__('')
              Name.__repr__('')
              return "Name(u'a')"
              Name.__repr__('')
              return "Name(u'a1')"
             return "Exprs([Name(u'a'), Name(u'a1')])"
             Exprs.__repr__('')
              Binop.__repr__('')
               Literal.__repr__('')
               return "Number(u'10')"
               Binop.__repr__('')
                Name.__repr__('')
                return "Name(u'a')"
                Name.__repr__('')
                return "Name(u'b')"
               return "Binop(Name(u'a'), u'%', Name(u'b'))"
              return "Binop(Number(u'10'), u'*', Binop(Name(u'a'), u'%', Name(u'b')))"
              Binop.__repr__('')
               Literal.__repr__('')
               return "Number(u'10')"
               Binop.__repr__('')
                Name.__repr__('')
                return "Name(u'a1')"
                Name.__repr__('')
                return "Name(u'b1')"
               return "Binop(Name(u'a1'), u'%', Name(u'b1'))"
              return "Binop(Number(u'10'), u'*', Binop(Name(u'a1'), u'%', Name(u'b1')))"
             return "Exprs([Binop(Number(u'10'), u'*', Binop(Name(u'a'), u'%', Name(u'b'))), Binop(Number(u'10'), u'*', Binop(Name(u'a1'), u'%', Name(u'b1')))])"
            return "Assign([Exprs([Name(u'a'), Name(u'a1')])], Exprs([Binop(Number(u'10'), u'*', Binop(Name(u'a'), u'%', Name(u'b'))), Binop(Number(u'10'), u'*', Binop(Name(u'a1'), u'%', Name(u'b1')))]))"
           return Assign([Exprs([Name(u'a'), Name(u'a1')])], Exprs([Binop(Number(u'10'), u'*', Binop(Name(u'a'), u'%', Name(u'b'))), Binop(Number(u'10'), u'*', Binop(Name(u'a1'), u'%', Name(u'b1')))]))
           Parser.parse_stmt('')
            Parser.parse_simple('')
             Parser.parse_exprs('')
              Parser.parse_expr('')
               Parser.parse_term('')
                Parser.parse_atom('')
                 Parser.expect('NAME')
                  Parser.nexttoken('')
                  return (OPERATOR, u',')
                 return u'd'
                 Name.__init__("u'd'")
                 return
                 Name.__repr__('')
                 return "Name(u'd')"
                return Name(u'd')
                Name.__repr__('')
                return "Name(u'd')"
               return Name(u'd')
               Name.__repr__('')
               return "Name(u'd')"
              return Name(u'd')
              Parser.nexttoken('')
              return (NAME, u'd1')
              Parser.parse_expr('')
               Parser.parse_term('')
                Parser.parse_atom('')
                 Parser.expect('NAME')
                  Parser.nexttoken('')
                  return (OPERATOR, u'=')
                 return u'd1'
                 Name.__init__("u'd1'")
                 return
                 Name.__repr__('')
                 return "Name(u'd1')"
                return Name(u'd1')
                Name.__repr__('')
                return "Name(u'd1')"
               return Name(u'd1')
               Name.__repr__('')
               return "Name(u'd1')"
              return Name(u'd1')
               Name.__repr__('')
               return "Name(u'd')"
               Name.__repr__('')
               return "Name(u'd1')"
              Exprs.__init__("[Name(u'd'), Name(u'd1')]")
              return
              Exprs.__repr__('')
               Name.__repr__('')
               return "Name(u'd')"
               Name.__repr__('')
               return "Name(u'd1')"
              return "Exprs([Name(u'd'), Name(u'd1')])"
             return Exprs([Name(u'd'), Name(u'd1')])
             Parser.nexttoken('')
             return (NAME, u'a')
             Parser.parse_exprs('')
              Parser.parse_expr('')
               Parser.parse_term('')
                Parser.parse_atom('')
                 Parser.expect('NAME')
                  Parser.nexttoken('')
                  return (OPERATOR, u'//')
                 return u'a'
                 Name.__init__("u'a'")
                 return
                 Name.__repr__('')
                 return "Name(u'a')"
                return Name(u'a')
                Name.__repr__('')
                return "Name(u'a')"
               return Name(u'a')
               Parser.expect('OPERATOR')
                Parser.nexttoken('')
                return (NAME, u'b')
               return u'//'
               Parser.parse_expr('7')
                Parser.parse_term('')
                 Parser.parse_atom('')
                  Parser.expect('NAME')
                   Parser.nexttoken('')
                   return (OPERATOR, u',')
                  return u'b'
                  Name.__init__("u'b'")
                  return
                  Name.__repr__('')
                  return "Name(u'b')"
                 return Name(u'b')
                 Name.__repr__('')
                 return "Name(u'b')"
                return Name(u'b')
                Name.__repr__('')
                return "Name(u'b')"
               return Name(u'b')
                Name.__repr__('')
                return "Name(u'a')"
                Name.__repr__('')
                return "Name(u'b')"
               Binop.__init__("Name(u'a'), u'//', Name(u'b')")
               return
               Binop.__repr__('')
                Name.__repr__('')
                return "Name(u'a')"
                Name.__repr__('')
                return "Name(u'b')"
               return "Binop(Name(u'a'), u'//', Name(u'b'))"
              return Binop(Name(u'a'), u'//', Name(u'b'))
              Parser.nexttoken('')
              return (NAME, u'a1')
              Parser.parse_expr('')
               Parser.parse_term('')
                Parser.parse_atom('')
                 Parser.expect('NAME')
                  Parser.nexttoken('')
                  return (OPERATOR, u'//')
                 return u'a1'
                 Name.__init__("u'a1'")
                 return
                 Name.__repr__('')
                 return "Name(u'a1')"
                return Name(u'a1')
                Name.__repr__('')
                return "Name(u'a1')"
               return Name(u'a1')
               Parser.expect('OPERATOR')
                Parser.nexttoken('')
                return (NAME, u'b1')
               return u'//'
               Parser.parse_expr('7')
                Parser.parse_term('')
                 Parser.parse_atom('')
                  Parser.expect('NAME')
                   Parser.nexttoken('')
                   return (NEWLINE, '')
                  return u'b1'
                  Name.__init__("u'b1'")
                  return
                  Name.__repr__('')
                  return "Name(u'b1')"
                 return Name(u'b1')
                 Name.__repr__('')
                 return "Name(u'b1')"
                return Name(u'b1')
                Name.__repr__('')
                return "Name(u'b1')"
               return Name(u'b1')
                Name.__repr__('')
                return "Name(u'a1')"
                Name.__repr__('')
                return "Name(u'b1')"
               Binop.__init__("Name(u'a1'), u'//', Name(u'b1')")
               return
               Binop.__repr__('')
                Name.__repr__('')
                return "Name(u'a1')"
                Name.__repr__('')
                return "Name(u'b1')"
               return "Binop(Name(u'a1'), u'//', Name(u'b1'))"
              return Binop(Name(u'a1'), u'//', Name(u'b1'))
               Binop.__repr__('')
                Name.__repr__('')
                return "Name(u'a')"
                Name.__repr__('')
                return "Name(u'b')"
               return "Binop(Name(u'a'), u'//', Name(u'b'))"
               Binop.__repr__('')
                Name.__repr__('')
                return "Name(u'a1')"
                Name.__repr__('')
                return "Name(u'b1')"
               return "Binop(Name(u'a1'), u'//', Name(u'b1'))"
              Exprs.__init__("[Binop(Name(u'a'), u...u'//', Name(u'b1'))]")
              return
              Exprs.__repr__('')
               Binop.__repr__('')
                Name.__repr__('')
                return "Name(u'a')"
                Name.__repr__('')
                return "Name(u'b')"
               return "Binop(Name(u'a'), u'//', Name(u'b'))"
               Binop.__repr__('')
                Name.__repr__('')
                return "Name(u'a1')"
                Name.__repr__('')
                return "Name(u'b1')"
               return "Binop(Name(u'a1'), u'//', Name(u'b1'))"
              return "Exprs([Binop(Name(u'a'), u'//', Name(u'b')), Binop(Name(u'a1'), u'//', Name(u'b1'))])"
             return Exprs([Binop(Name(u'a'), u'//', Name(u'b')), Binop(Name(u'a1'), u'//', Name(u'b1'))])
             Parser.expect('NEWLINE')
              Parser.nexttoken('')
              return (DEDENT, '')
             return ''
              Exprs.__repr__('')
               Name.__repr__('')
               return "Name(u'd')"
               Name.__repr__('')
               return "Name(u'd1')"
              return "Exprs([Name(u'd'), Name(u'd1')])"
              Exprs.__repr__('')
               Binop.__repr__('')
                Name.__repr__('')
                return "Name(u'a')"
                Name.__repr__('')
                return "Name(u'b')"
               return "Binop(Name(u'a'), u'//', Name(u'b'))"
               Binop.__repr__('')
                Name.__repr__('')
                return "Name(u'a1')"
                Name.__repr__('')
                return "Name(u'b1')"
               return "Binop(Name(u'a1'), u'//', Name(u'b1'))"
              return "Exprs([Binop(Name(u'a'), u'//', Name(u'b')), Binop(Name(u'a1'), u'//', Name(u'b1'))])"
             Assign.__init__("[Exprs([Name(u'd'), Name(u'd1')])], Exprs([Binop(Name(u'...'//', Name(u'b1'))])")
             return
             Assign.__repr__('')
              Exprs.__repr__('')
               Name.__repr__('')
               return "Name(u'd')"
               Name.__repr__('')
               return "Name(u'd1')"
              return "Exprs([Name(u'd'), Name(u'd1')])"
              Exprs.__repr__('')
               Binop.__repr__('')
                Name.__repr__('')
                return "Name(u'a')"
                Name.__repr__('')
                return "Name(u'b')"
               return "Binop(Name(u'a'), u'//', Name(u'b'))"
               Binop.__repr__('')
                Name.__repr__('')
                return "Name(u'a1')"
                Name.__repr__('')
                return "Name(u'b1')"
               return "Binop(Name(u'a1'), u'//', Name(u'b1'))"
              return "Exprs([Binop(Name(u'a'), u'//', Name(u'b')), Binop(Name(u'a1'), u'//', Name(u'b1'))])"
             return "Assign([Exprs([Name(u'd'), Name(u'd1')])], Exprs([Binop(Name(u'a'), u'//', Name(u'b')), Binop(Name(u'a1'), u'//', Name(u'b1'))]))"
            return Assign([Exprs([Name(u'd'), Name(u'd1')])], Exprs([Binop(Name(u'a'), u'//', Name(u'b')), Binop(Name(u'a1'), u'//', Name(u'b1'))]))
            Assign.__repr__('')
             Exprs.__repr__('')
              Name.__repr__('')
              return "Name(u'd')"
              Name.__repr__('')
              return "Name(u'd1')"
             return "Exprs([Name(u'd'), Name(u'd1')])"
             Exprs.__repr__('')
              Binop.__repr__('')
               Name.__repr__('')
               return "Name(u'a')"
               Name.__repr__('')
               return "Name(u'b')"
              return "Binop(Name(u'a'), u'//', Name(u'b'))"
              Binop.__repr__('')
               Name.__repr__('')
               return "Name(u'a1')"
               Name.__repr__('')
               return "Name(u'b1')"
              return "Binop(Name(u'a1'), u'//', Name(u'b1'))"
             return "Exprs([Binop(Name(u'a'), u'//', Name(u'b')), Binop(Name(u'a1'), u'//', Name(u'b1'))])"
            return "Assign([Exprs([Name(u'd'), Name(u'd1')])], Exprs([Binop(Name(u'a'), u'//', Name(u'b')), Binop(Name(u'a1'), u'//', Name(u'b1'))]))"
           return Assign([Exprs([Name(u'd'), Name(u'd1')])], Exprs([Binop(Name(u'a'), u'//', Name(u'b')), Binop(Name(u'a1'), u'//', Name(u'b1'))]))
           Parser.expect('DEDENT')
            Parser.nexttoken('')
            return (DEDENT, '')
           return ''
           Yield.__repr__('')
            Name.__repr__('')
            return "Name(u'd')"
           return "Yield(Name(u'd'))"
           Assign.__repr__('')
            Exprs.__repr__('')
             Name.__repr__('')
             return "Name(u'a')"
             Name.__repr__('')
             return "Name(u'a1')"
            return "Exprs([Name(u'a'), Name(u'a1')])"
            Exprs.__repr__('')
             Binop.__repr__('')
              Literal.__repr__('')
              return "Number(u'10')"
              Binop.__repr__('')
               Name.__repr__('')
               return "Name(u'a')"
               Name.__repr__('')
               return "Name(u'b')"
              return "Binop(Name(u'a'), u'%', Name(u'b'))"
             return "Binop(Number(u'10'), u'*', Binop(Name(u'a'), u'%', Name(u'b')))"
             Binop.__repr__('')
              Literal.__repr__('')
              return "Number(u'10')"
              Binop.__repr__('')
               Name.__repr__('')
               return "Name(u'a1')"
               Name.__repr__('')
               return "Name(u'b1')"
              return "Binop(Name(u'a1'), u'%', Name(u'b1'))"
             return "Binop(Number(u'10'), u'*', Binop(Name(u'a1'), u'%', Name(u'b1')))"
            return "Exprs([Binop(Number(u'10'), u'*', Binop(Name(u'a'), u'%', Name(u'b'))), Binop(Number(u'10'), u'*', Binop(Name(u'a1'), u'%', Name(u'b1')))])"
           return "Assign([Exprs([Name(u'a'), Name(u'a1')])], Exprs([Binop(Number(u'10'), u'*', Binop(Name(u'a'), u'%', Name(u'b'))), Binop(Number(u'10'), u'*', Binop(Name(u'a1'), u'%', Name(u'b1')))]))"
           Assign.__repr__('')
            Exprs.__repr__('')
             Name.__repr__('')
             return "Name(u'd')"
             Name.__repr__('')
             return "Name(u'd1')"
            return "Exprs([Name(u'd'), Name(u'd1')])"
            Exprs.__repr__('')
             Binop.__repr__('')
              Name.__repr__('')
              return "Name(u'a')"
              Name.__repr__('')
              return "Name(u'b')"
             return "Binop(Name(u'a'), u'//', Name(u'b'))"
             Binop.__repr__('')
              Name.__repr__('')
              return "Name(u'a1')"
              Name.__repr__('')
              return "Name(u'b1')"
             return "Binop(Name(u'a1'), u'//', Name(u'b1'))"
            return "Exprs([Binop(Name(u'a'), u'//', Name(u'b')), Binop(Name(u'a1'), u'//', Name(u'b1'))])"
           return "Assign([Exprs([Name(u'd'), Name(u'd1')])], Exprs([Binop(Name(u'a'), u'//', Name(u'b')), Binop(Name(u'a1'), u'//', Name(u'b1'))]))"
          return [Yield(Name(u'd')), Assign([Exprs([Name(u'a'), Name(u'a1')])], Exprs([Binop(Number(u'10'), u'*', Binop(Name(u'a'), u'%', Name(u'b'))), Binop(Number(u'10'), u'*', Binop(Name(u'a1'), u'%', Name(u'b1')))])), Assign([Exprs([Name(u'd'), Name(u'd1')])], Exprs([Binop(Name(u'a'), u'//', Name(u'b')), Binop(Name(u'a1'), u'//', Name(u'b1'))]))]
           Binop.__repr__('')
            Name.__repr__('')
            return "Name(u'd')"
            Name.__repr__('')
            return "Name(u'd1')"
           return "Binop(Name(u'd'), u'==', Name(u'd1'))"
           Yield.__repr__('')
            Name.__repr__('')
            return "Name(u'd')"
           return "Yield(Name(u'd'))"
           Assign.__repr__('')
            Exprs.__repr__('')
             Name.__repr__('')
             return "Name(u'a')"
             Name.__repr__('')
             return "Name(u'a1')"
            return "Exprs([Name(u'a'), Name(u'a1')])"
            Exprs.__repr__('')
             Binop.__repr__('')
              Literal.__repr__('')
              return "Number(u'10')"
              Binop.__repr__('')
               Name.__repr__('')
               return "Name(u'a')"
               Name.__repr__('')
               return "Name(u'b')"
              return "Binop(Name(u'a'), u'%', Name(u'b'))"
             return "Binop(Number(u'10'), u'*', Binop(Name(u'a'), u'%', Name(u'b')))"
             Binop.__repr__('')
              Literal.__repr__('')
              return "Number(u'10')"
              Binop.__repr__('')
               Name.__repr__('')
               return "Name(u'a1')"
               Name.__repr__('')
               return "Name(u'b1')"
              return "Binop(Name(u'a1'), u'%', Name(u'b1'))"
             return "Binop(Number(u'10'), u'*', Binop(Name(u'a1'), u'%', Name(u'b1')))"
            return "Exprs([Binop(Number(u'10'), u'*', Binop(Name(u'a'), u'%', Name(u'b'))), Binop(Number(u'10'), u'*', Binop(Name(u'a1'), u'%', Name(u'b1')))])"
           return "Assign([Exprs([Name(u'a'), Name(u'a1')])], Exprs([Binop(Number(u'10'), u'*', Binop(Name(u'a'), u'%', Name(u'b'))), Binop(Number(u'10'), u'*', Binop(Name(u'a1'), u'%', Name(u'b1')))]))"
           Assign.__repr__('')
            Exprs.__repr__('')
             Name.__repr__('')
             return "Name(u'd')"
             Name.__repr__('')
             return "Name(u'd1')"
            return "Exprs([Name(u'd'), Name(u'd1')])"
            Exprs.__repr__('')
             Binop.__repr__('')
              Name.__repr__('')
              return "Name(u'a')"
              Name.__repr__('')
              return "Name(u'b')"
             return "Binop(Name(u'a'), u'//', Name(u'b'))"
             Binop.__repr__('')
              Name.__repr__('')
              return "Name(u'a1')"
              Name.__repr__('')
              return "Name(u'b1')"
             return "Binop(Name(u'a1'), u'//', Name(u'b1'))"
            return "Exprs([Binop(Name(u'a'), u'//', Name(u'b')), Binop(Name(u'a1'), u'//', Name(u'b1'))])"
           return "Assign([Exprs([Name(u'd'), Name(u'd1')])], Exprs([Binop(Name(u'a'), u'//', Name(u'b')), Binop(Name(u'a1'), u'//', Name(u'b1'))]))"
          While.__init__("Binop(Name(u'd'), u'==', Name(u'd1')), [Yield(Name(u'd')), .../', Name(u'b1'))]))]")
          return
          While.__repr__('')
           Binop.__repr__('')
            Name.__repr__('')
            return "Name(u'd')"
            Name.__repr__('')
            return "Name(u'd1')"
           return "Binop(Name(u'd'), u'==', Name(u'd1'))"
          return "While(Binop(Name(u'd'), u'==', Name(u'd1')), ...)"
         return While(Binop(Name(u'd'), u'==', Name(u'd1')), ...)
         While.__repr__('')
          Binop.__repr__('')
           Name.__repr__('')
           return "Name(u'd')"
           Name.__repr__('')
           return "Name(u'd1')"
          return "Binop(Name(u'd'), u'==', Name(u'd1'))"
         return "While(Binop(Name(u'd'), u'==', Name(u'd1')), ...)"
        return While(Binop(Name(u'd'), u'==', Name(u'd1')), ...)
        Parser.expect('DEDENT')
         Parser.nexttoken('')
         return (DEDENT, '')
        return ''
        Assign.__repr__('')
         Exprs.__repr__('')
          Name.__repr__('')
          return "Name(u'p')"
          Name.__repr__('')
          return "Name(u'q')"
          Name.__repr__('')
          return "Name(u'k')"
         return "Exprs([Name(u'p'), Name(u'q'), Name(u'k')])"
         Exprs.__repr__('')
          Binop.__repr__('')
           Name.__repr__('')
           return "Name(u'k')"
           Name.__repr__('')
           return "Name(u'k')"
          return "Binop(Name(u'k'), u'*', Name(u'k'))"
          Binop.__repr__('')
           Binop.__repr__('')
            Literal.__repr__('')
            return "Number(u'2')"
            Name.__repr__('')
            return "Name(u'k')"
           return "Binop(Number(u'2'), u'*', Name(u'k'))"
           Literal.__repr__('')
           return "Number(u'1')"
          return "Binop(Binop(Number(u'2'), u'*', Name(u'k')), u'+', Number(u'1'))"
          Binop.__repr__('')
           Name.__repr__('')
           return "Name(u'k')"
           Literal.__repr__('')
           return "Number(u'1')"
          return "Binop(Name(u'k'), u'+', Number(u'1'))"
         return "Exprs([Binop(Name(u'k'), u'*', Name(u'k')), Binop(Binop(Number(u'2'), u'*', Name(u'k')), u'+', Number(u'1')), Binop(Name(u'k'), u'+', Number(u'1'))])"
        return "Assign([Exprs([Name(u'p'), Name(u'q'), Name(u'k')])], Exprs([Binop(Name(u'k'), u'*', Name(u'k')), Binop(Binop(Number(u'2'), u'*', Name(u'k')), u'+', Number(u'1')), Binop(Name(u'k'), u'+', Number(u'1'))]))"
        Assign.__repr__('')
         Exprs.__repr__('')
          Name.__repr__('')
          return "Name(u'a')"
          Name.__repr__('')
          return "Name(u'b')"
          Name.__repr__('')
          return "Name(u'a1')"
          Name.__repr__('')
          return "Name(u'b1')"
         return "Exprs([Name(u'a'), Name(u'b'), Name(u'a1'), Name(u'b1')])"
         Exprs.__repr__('')
          Name.__repr__('')
          return "Name(u'a1')"
          Name.__repr__('')
          return "Name(u'b1')"
          Binop.__repr__('')
           Binop.__repr__('')
            Name.__repr__('')
            return "Name(u'p')"
            Name.__repr__('')
            return "Name(u'a')"
           return "Binop(Name(u'p'), u'*', Name(u'a'))"
           Binop.__repr__('')
            Name.__repr__('')
            return "Name(u'q')"
            Name.__repr__('')
            return "Name(u'a1')"
           return "Binop(Name(u'q'), u'*', Name(u'a1'))"
          return "Binop(Binop(Name(u'p'), u'*', Name(u'a')), u'+', Binop(Name(u'q'), u'*', Name(u'a1')))"
          Binop.__repr__('')
           Binop.__repr__('')
            Name.__repr__('')
            return "Name(u'p')"
            Name.__repr__('')
            return "Name(u'b')"
           return "Binop(Name(u'p'), u'*', Name(u'b'))"
           Binop.__repr__('')
            Name.__repr__('')
            return "Name(u'q')"
            Name.__repr__('')
            return "Name(u'b1')"
           return "Binop(Name(u'q'), u'*', Name(u'b1'))"
          return "Binop(Binop(Name(u'p'), u'*', Name(u'b')), u'+', Binop(Name(u'q'), u'*', Name(u'b1')))"
         return "Exprs([Name(u'a1'), Name(u'b1'), Binop(Binop(Name(u'p'), u'*', Name(u'a')), u'+', Binop(Name(u'q'), u'*', Name(u'a1'))), Binop(Binop(Name(u'p'), u'*', Name(u'b')), u'+', Binop(Name(u'q'), u'*', Name(u'b1')))])"
        return "Assign([Exprs([Name(u'a'), Name(u'b'), Name(u'a1'), Name(u'b1')])], Exprs([Name(u'a1'), Name(u'b1'), Binop(Binop(Name(u'p'), u'*', Name(u'a')), u'+', Binop(Name(u'q'), u'*', Name(u'a1'))), Binop(Binop(Name(u'p'), u'*', Name(u'b')), u'+', Binop(Name(u'q'), u'*', Name(u'b1')))]))"
        Assign.__repr__('')
         Exprs.__repr__('')
          Name.__repr__('')
          return "Name(u'd')"
          Name.__repr__('')
          return "Name(u'd1')"
         return "Exprs([Name(u'd'), Name(u'd1')])"
         Exprs.__repr__('')
          Binop.__repr__('')
           Name.__repr__('')
           return "Name(u'a')"
           Name.__repr__('')
           return "Name(u'b')"
          return "Binop(Name(u'a'), u'//', Name(u'b'))"
          Binop.__repr__('')
           Name.__repr__('')
           return "Name(u'a1')"
           Name.__repr__('')
           return "Name(u'b1')"
          return "Binop(Name(u'a1'), u'//', Name(u'b1'))"
         return "Exprs([Binop(Name(u'a'), u'//', Name(u'b')), Binop(Name(u'a1'), u'//', Name(u'b1'))])"
        return "Assign([Exprs([Name(u'd'), Name(u'd1')])], Exprs([Binop(Name(u'a'), u'//', Name(u'b')), Binop(Name(u'a1'), u'//', Name(u'b1'))]))"
        While.__repr__('')
         Binop.__repr__('')
          Name.__repr__('')
          return "Name(u'd')"
          Name.__repr__('')
          return "Name(u'd1')"
         return "Binop(Name(u'd'), u'==', Name(u'd1'))"
        return "While(Binop(Name(u'd'), u'==', Name(u'd1')), ...)"
       return [Assign([Exprs([Name(u'p'), Name(u'q'), Name(u'k')])], Exprs([Binop(Name(u'k'), u'*', Name(u'k')), Binop(Binop(Number(u'2'), u'*', Name(u'k')), u'+', Number(u'1')), Binop(Name(u'k'), u'+', Number(u'1'))])), Assign([Exprs([Name(u'a'), Name(u'b'), Name(u'a1'), Name(u'b1')])], Exprs([Name(u'a1'), Name(u'b1'), Binop(Binop(Name(u'p'), u'*', Name(u'a')), u'+', Binop(Name(u'q'), u'*', Name(u'a1'))), Binop(Binop(Name(u'p'), u'*', Name(u'b')), u'+', Binop(Name(u'q'), u'*', Name(u'b1')))])), Assign([Exprs([Name(u'd'), Name(u'd1')])], Exprs([Binop(Name(u'a'), u'//', Name(u'b')), Binop(Name(u'a1'), u'//', Name(u'b1'))])), While(Binop(Name(u'd'), u'==', Name(u'd1')), ...)]
        Literal.__repr__('')
        return "Number(u'1')"
        Assign.__repr__('')
         Exprs.__repr__('')
          Name.__repr__('')
          return "Name(u'p')"
          Name.__repr__('')
          return "Name(u'q')"
          Name.__repr__('')
          return "Name(u'k')"
         return "Exprs([Name(u'p'), Name(u'q'), Name(u'k')])"
         Exprs.__repr__('')
          Binop.__repr__('')
           Name.__repr__('')
           return "Name(u'k')"
           Name.__repr__('')
           return "Name(u'k')"
          return "Binop(Name(u'k'), u'*', Name(u'k'))"
          Binop.__repr__('')
           Binop.__repr__('')
            Literal.__repr__('')
            return "Number(u'2')"
            Name.__repr__('')
            return "Name(u'k')"
           return "Binop(Number(u'2'), u'*', Name(u'k'))"
           Literal.__repr__('')
           return "Number(u'1')"
          return "Binop(Binop(Number(u'2'), u'*', Name(u'k')), u'+', Number(u'1'))"
          Binop.__repr__('')
           Name.__repr__('')
           return "Name(u'k')"
           Literal.__repr__('')
           return "Number(u'1')"
          return "Binop(Name(u'k'), u'+', Number(u'1'))"
         return "Exprs([Binop(Name(u'k'), u'*', Name(u'k')), Binop(Binop(Number(u'2'), u'*', Name(u'k')), u'+', Number(u'1')), Binop(Name(u'k'), u'+', Number(u'1'))])"
        return "Assign([Exprs([Name(u'p'), Name(u'q'), Name(u'k')])], Exprs([Binop(Name(u'k'), u'*', Name(u'k')), Binop(Binop(Number(u'2'), u'*', Name(u'k')), u'+', Number(u'1')), Binop(Name(u'k'), u'+', Number(u'1'))]))"
        Assign.__repr__('')
         Exprs.__repr__('')
          Name.__repr__('')
          return "Name(u'a')"
          Name.__repr__('')
          return "Name(u'b')"
          Name.__repr__('')
          return "Name(u'a1')"
          Name.__repr__('')
          return "Name(u'b1')"
         return "Exprs([Name(u'a'), Name(u'b'), Name(u'a1'), Name(u'b1')])"
         Exprs.__repr__('')
          Name.__repr__('')
          return "Name(u'a1')"
          Name.__repr__('')
          return "Name(u'b1')"
          Binop.__repr__('')
           Binop.__repr__('')
            Name.__repr__('')
            return "Name(u'p')"
            Name.__repr__('')
            return "Name(u'a')"
           return "Binop(Name(u'p'), u'*', Name(u'a'))"
           Binop.__repr__('')
            Name.__repr__('')
            return "Name(u'q')"
            Name.__repr__('')
            return "Name(u'a1')"
           return "Binop(Name(u'q'), u'*', Name(u'a1'))"
          return "Binop(Binop(Name(u'p'), u'*', Name(u'a')), u'+', Binop(Name(u'q'), u'*', Name(u'a1')))"
          Binop.__repr__('')
           Binop.__repr__('')
            Name.__repr__('')
            return "Name(u'p')"
            Name.__repr__('')
            return "Name(u'b')"
           return "Binop(Name(u'p'), u'*', Name(u'b'))"
           Binop.__repr__('')
            Name.__repr__('')
            return "Name(u'q')"
            Name.__repr__('')
            return "Name(u'b1')"
           return "Binop(Name(u'q'), u'*', Name(u'b1'))"
          return "Binop(Binop(Name(u'p'), u'*', Name(u'b')), u'+', Binop(Name(u'q'), u'*', Name(u'b1')))"
         return "Exprs([Name(u'a1'), Name(u'b1'), Binop(Binop(Name(u'p'), u'*', Name(u'a')), u'+', Binop(Name(u'q'), u'*', Name(u'a1'))), Binop(Binop(Name(u'p'), u'*', Name(u'b')), u'+', Binop(Name(u'q'), u'*', Name(u'b1')))])"
        return "Assign([Exprs([Name(u'a'), Name(u'b'), Name(u'a1'), Name(u'b1')])], Exprs([Name(u'a1'), Name(u'b1'), Binop(Binop(Name(u'p'), u'*', Name(u'a')), u'+', Binop(Name(u'q'), u'*', Name(u'a1'))), Binop(Binop(Name(u'p'), u'*', Name(u'b')), u'+', Binop(Name(u'q'), u'*', Name(u'b1')))]))"
        Assign.__repr__('')
         Exprs.__repr__('')
          Name.__repr__('')
          return "Name(u'd')"
          Name.__repr__('')
          return "Name(u'd1')"
         return "Exprs([Name(u'd'), Name(u'd1')])"
         Exprs.__repr__('')
          Binop.__repr__('')
           Name.__repr__('')
           return "Name(u'a')"
           Name.__repr__('')
           return "Name(u'b')"
          return "Binop(Name(u'a'), u'//', Name(u'b'))"
          Binop.__repr__('')
           Name.__repr__('')
           return "Name(u'a1')"
           Name.__repr__('')
           return "Name(u'b1')"
          return "Binop(Name(u'a1'), u'//', Name(u'b1'))"
         return "Exprs([Binop(Name(u'a'), u'//', Name(u'b')), Binop(Name(u'a1'), u'//', Name(u'b1'))])"
        return "Assign([Exprs([Name(u'd'), Name(u'd1')])], Exprs([Binop(Name(u'a'), u'//', Name(u'b')), Binop(Name(u'a1'), u'//', Name(u'b1'))]))"
        While.__repr__('')
         Binop.__repr__('')
          Name.__repr__('')
          return "Name(u'd')"
          Name.__repr__('')
          return "Name(u'd1')"
         return "Binop(Name(u'd'), u'==', Name(u'd1'))"
        return "While(Binop(Name(u'd'), u'==', Name(u'd1')), ...)"
       While.__init__("Number(u'1'), [Assign([Exprs([Name... Name(u'd1')), ...)]")
       return
       While.__repr__('')
        Literal.__repr__('')
        return "Number(u'1')"
       return "While(Number(u'1'), ...)"
      return While(Number(u'1'), ...)
      While.__repr__('')
       Literal.__repr__('')
       return "Number(u'1')"
      return "While(Number(u'1'), ...)"
     return While(Number(u'1'), ...)
     Parser.expect('DEDENT')
      Parser.nexttoken('')
      return (NAME, u'def')
     return ''
     Assign.__repr__('')
      Exprs.__repr__('')
       Name.__repr__('')
       return "Name(u'k')"
       Name.__repr__('')
       return "Name(u'a')"
       Name.__repr__('')
       return "Name(u'b')"
       Name.__repr__('')
       return "Name(u'a1')"
       Name.__repr__('')
       return "Name(u'b1')"
      return "Exprs([Name(u'k'), Name(u'a'), Name(u'b'), Name(u'a1'), Name(u'b1')])"
      Exprs.__repr__('')
       Literal.__repr__('')
       return "Number(u'2')"
       Literal.__repr__('')
       return "Number(u'4')"
       Literal.__repr__('')
       return "Number(u'1')"
       Literal.__repr__('')
       return "Number(u'12')"
       Literal.__repr__('')
       return "Number(u'4')"
      return "Exprs([Number(u'2'), Number(u'4'), Number(u'1'), Number(u'12'), Number(u'4')])"
     return "Assign([Exprs([Name(u'k'), Name(u'a'), Name(u'b'), Name(u'a1'), Name(u'b1')])], Exprs([Number(u'2'), Number(u'4'), Number(u'1'), Number(u'12'), Number(u'4')]))"
     While.__repr__('')
      Literal.__repr__('')
      return "Number(u'1')"
     return "While(Number(u'1'), ...)"
    return [Assign([Exprs([Name(u'k'), Name(u'a'), Name(u'b'), Name(u'a1'), Name(u'b1')])], Exprs([Number(u'2'), Number(u'4'), Number(u'1'), Number(u'12'), Number(u'4')])), While(Number(u'1'), ...)]
     Assign.__repr__('')
      Exprs.__repr__('')
       Name.__repr__('')
       return "Name(u'k')"
       Name.__repr__('')
       return "Name(u'a')"
       Name.__repr__('')
       return "Name(u'b')"
       Name.__repr__('')
       return "Name(u'a1')"
       Name.__repr__('')
       return "Name(u'b1')"
      return "Exprs([Name(u'k'), Name(u'a'), Name(u'b'), Name(u'a1'), Name(u'b1')])"
      Exprs.__repr__('')
       Literal.__repr__('')
       return "Number(u'2')"
       Literal.__repr__('')
       return "Number(u'4')"
       Literal.__repr__('')
       return "Number(u'1')"
       Literal.__repr__('')
       return "Number(u'12')"
       Literal.__repr__('')
       return "Number(u'4')"
      return "Exprs([Number(u'2'), Number(u'4'), Number(u'1'), Number(u'12'), Number(u'4')])"
     return "Assign([Exprs([Name(u'k'), Name(u'a'), Name(u'b'), Name(u'a1'), Name(u'b1')])], Exprs([Number(u'2'), Number(u'4'), Number(u'1'), Number(u'12'), Number(u'4')]))"
     While.__repr__('')
      Literal.__repr__('')
      return "Number(u'1')"
     return "While(Number(u'1'), ...)"
    Define.__init__("u'pi', [], [Assign([Exprs([Name...(Number(u'1'), ...)]")
    return
    Define.__repr__('')
    return "Define(u'pi', [], ...)"
   return Define(u'pi', [], ...)
   Define.__repr__('')
   return "Define(u'pi', [], ...)"
  return Define(u'pi', [], ...)
  Parser.parse_stmt('')
   Parser.parse_def('')
    Parser.expect("NAME, 'def'")
     Parser.nexttoken('')
     return (NAME, u'strhash')
    return u'def'
    Parser.expect('NAME')
     Parser.nexttoken('')
     return (OPERATOR, u'(')
    return u'strhash'
    Parser.expect("OPERATOR, '('")
     Parser.nexttoken('')
     return (NAME, u's')
    return u'('
    Parser.expect('NAME')
     Parser.nexttoken('')
     return (OPERATOR, u')')
    return u's'
    Parser.expect("OPERATOR, ')'")
     Parser.nexttoken('')
     return (OPERATOR, u':')
    return u')'
    Parser.expect("OPERATOR, ':'")
     Parser.nexttoken('')
     return (NEWLINE, '')
    return u':'
    Parser.expect('NEWLINE')
     Parser.nexttoken('')
     return (INDENT, '')
    return ''
    Parser.parse_body('')
     Parser.expect('INDENT')
      Parser.nexttoken('')
      return (NAME, u'if')
     return ''
     Parser.parse_stmt('')
      Parser.parse_if('')
       Parser.expect("NAME, 'if'")
        Parser.nexttoken('')
        return (NAME, u's')
       return u'if'
       Parser.parse_expr('')
        Parser.parse_term('')
         Parser.parse_atom('')
          Parser.expect('NAME')
           Parser.nexttoken('')
           return (OPERATOR, u'==')
          return u's'
          Name.__init__("u's'")
          return
          Name.__repr__('')
          return "Name(u's')"
         return Name(u's')
         Name.__repr__('')
         return "Name(u's')"
        return Name(u's')
        Parser.expect('OPERATOR')
         Parser.nexttoken('')
         return (STRING, u"''")
        return u'=='
        Parser.parse_expr('1')
         Parser.parse_term('')
          Parser.parse_atom('')
           Parser.expect('STRING')
            Parser.nexttoken('')
            return (OPERATOR, u':')
           return u"''"
           Literal.__init__('u"\'\'"')
            String.evalit('')
            return u''
           return
           Literal.__repr__('')
           return 'String(u"\'\'")'
          return String(u"''")
          Literal.__repr__('')
          return 'String(u"\'\'")'
         return String(u"''")
         Literal.__repr__('')
         return 'String(u"\'\'")'
        return String(u"''")
         Name.__repr__('')
         return "Name(u's')"
         Literal.__repr__('')
         return 'String(u"\'\'")'
        Binop.__init__('Name(u\'s\'), u\'==\', String(u"\'\'")')
        return
        Binop.__repr__('')
         Name.__repr__('')
         return "Name(u's')"
         Literal.__repr__('')
         return 'String(u"\'\'")'
        return 'Binop(Name(u\'s\'), u\'==\', String(u"\'\'"))'
       return Binop(Name(u's'), u'==', String(u"''"))
       Parser.expect("OPERATOR, ':'")
        Parser.nexttoken('')
        return (NEWLINE, '')
       return u':'
       Parser.expect('NEWLINE')
        Parser.nexttoken('')
        return (INDENT, '')
       return ''
       Parser.parse_body('')
        Parser.expect('INDENT')
         Parser.nexttoken('')
         return (NAME, u'return')
        return ''
        Parser.parse_stmt('')
         Parser.parse_return('')
          Parser.expect("NAME, 'return'")
           Parser.nexttoken('')
           return (NUMBER, u'0')
          return u'return'
          Parser.parse_exprs('')
           Parser.parse_expr('')
            Parser.parse_term('')
             Parser.parse_atom('')
              Parser.expect('NUMBER')
               Parser.nexttoken('')
               return (NEWLINE, '')
              return u'0'
              Literal.__init__("u'0'")
               Number.evalit('')
               return 0
              return
              Literal.__repr__('')
              return "Number(u'0')"
             return Number(u'0')
             Literal.__repr__('')
             return "Number(u'0')"
            return Number(u'0')
            Literal.__repr__('')
            return "Number(u'0')"
           return Number(u'0')
           Literal.__repr__('')
           return "Number(u'0')"
          return Number(u'0')
          Parser.expect('NEWLINE')
           Parser.nexttoken('')
           return (DEDENT, '')
          return ''
           Literal.__repr__('')
           return "Number(u'0')"
          Return.__init__("Number(u'0')")
          return
          Return.__repr__('')
           Literal.__repr__('')
           return "Number(u'0')"
          return "Return(Number(u'0'))"
         return Return(Number(u'0'))
         Return.__repr__('')
          Literal.__repr__('')
          return "Number(u'0')"
         return "Return(Number(u'0'))"
        return Return(Number(u'0'))
        Parser.expect('DEDENT')
         Parser.nexttoken('')
         return (NAME, u'x')
        return ''
        Return.__repr__('')
         Literal.__repr__('')
         return "Number(u'0')"
        return "Return(Number(u'0'))"
       return [Return(Number(u'0'))]
        Binop.__repr__('')
         Name.__repr__('')
         return "Name(u's')"
         Literal.__repr__('')
         return 'String(u"\'\'")'
        return 'Binop(Name(u\'s\'), u\'==\', String(u"\'\'"))'
        Return.__repr__('')
         Literal.__repr__('')
         return "Number(u'0')"
        return "Return(Number(u'0'))"
       If.__init__('Binop(Name(u\'s\'), u\'==\', String(u"\'\'")), [Return(Number(u\'0\'))], None')
       return
       If.__repr__('')
        Binop.__repr__('')
         Name.__repr__('')
         return "Name(u's')"
         Literal.__repr__('')
         return 'String(u"\'\'")'
        return 'Binop(Name(u\'s\'), u\'==\', String(u"\'\'"))'
       return 'If(Binop(Name(u\'s\'), u\'==\', String(u"\'\'")), ...)'
      return If(Binop(Name(u's'), u'==', String(u"''")), ...)
      If.__repr__('')
       Binop.__repr__('')
        Name.__repr__('')
        return "Name(u's')"
        Literal.__repr__('')
        return 'String(u"\'\'")'
       return 'Binop(Name(u\'s\'), u\'==\', String(u"\'\'"))'
      return 'If(Binop(Name(u\'s\'), u\'==\', String(u"\'\'")), ...)'
     return If(Binop(Name(u's'), u'==', String(u"''")), ...)
     Parser.parse_stmt('')
      Parser.parse_simple('')
       Parser.parse_exprs('')
        Parser.parse_expr('')
         Parser.parse_term('')
          Parser.parse_atom('')
           Parser.expect('NAME')
            Parser.nexttoken('')
            return (OPERATOR, u'=')
           return u'x'
           Name.__init__("u'x'")
           return
           Name.__repr__('')
           return "Name(u'x')"
          return Name(u'x')
          Name.__repr__('')
          return "Name(u'x')"
         return Name(u'x')
         Name.__repr__('')
         return "Name(u'x')"
        return Name(u'x')
        Name.__repr__('')
        return "Name(u'x')"
       return Name(u'x')
       Parser.nexttoken('')
       return (NAME, u'ord')
       Parser.parse_exprs('')
        Parser.parse_expr('')
         Parser.parse_term('')
          Parser.parse_atom('')
           Parser.expect('NAME')
            Parser.nexttoken('')
            return (OPERATOR, u'(')
           return u'ord'
           Name.__init__("u'ord'")
           return
           Name.__repr__('')
           return "Name(u'ord')"
          return Name(u'ord')
          Parser.nexttoken('')
          return (NAME, u's')
          Parser.parse_exprs('')
           Parser.parse_expr('')
            Parser.parse_term('')
             Parser.parse_atom('')
              Parser.expect('NAME')
               Parser.nexttoken('')
               return (OPERATOR, u'[')
              return u's'
              Name.__init__("u's'")
              return
              Name.__repr__('')
              return "Name(u's')"
             return Name(u's')
             Parser.nexttoken('')
             return (NUMBER, u'0')
             Parser.parse_exprs('')
              Parser.parse_expr('')
               Parser.parse_term('')
                Parser.parse_atom('')
                 Parser.expect('NUMBER')
                  Parser.nexttoken('')
                  return (OPERATOR, u']')
                 return u'0'
                 Literal.__init__("u'0'")
                  Number.evalit('')
                  return 0
                 return
                 Literal.__repr__('')
                 return "Number(u'0')"
                return Number(u'0')
                Literal.__repr__('')
                return "Number(u'0')"
               return Number(u'0')
               Literal.__repr__('')
               return "Number(u'0')"
              return Number(u'0')
              Literal.__repr__('')
              return "Number(u'0')"
             return Number(u'0')
             Parser.expect("OPERATOR, ']'")
              Parser.nexttoken('')
              return (OPERATOR, u')')
             return u']'
              Name.__repr__('')
              return "Name(u's')"
              Literal.__repr__('')
              return "Number(u'0')"
             Index.__init__("Name(u's'), Number(u'0')")
             return
             Index.__repr__('')
              Name.__repr__('')
              return "Name(u's')"
              Literal.__repr__('')
              return "Number(u'0')"
             return "Index(Name(u's'), Number(u'0'))"
            return Index(Name(u's'), Number(u'0'))
            Index.__repr__('')
             Name.__repr__('')
             return "Name(u's')"
             Literal.__repr__('')
             return "Number(u'0')"
            return "Index(Name(u's'), Number(u'0'))"
           return Index(Name(u's'), Number(u'0'))
           Index.__repr__('')
            Name.__repr__('')
            return "Name(u's')"
            Literal.__repr__('')
            return "Number(u'0')"
           return "Index(Name(u's'), Number(u'0'))"
          return Index(Name(u's'), Number(u'0'))
          Parser.expect("OPERATOR, ')'")
           Parser.nexttoken('')
           return (OPERATOR, u'<<')
          return u')'
           Name.__repr__('')
           return "Name(u'ord')"
           Index.__repr__('')
            Name.__repr__('')
            return "Name(u's')"
            Literal.__repr__('')
            return "Number(u'0')"
           return "Index(Name(u's'), Number(u'0'))"
          Call.__init__("Name(u'ord'), Index(Name(u's'), Number(u'0'))")
          return
          Call.__repr__('')
           Name.__repr__('')
           return "Name(u'ord')"
           Index.__repr__('')
            Name.__repr__('')
            return "Name(u's')"
            Literal.__repr__('')
            return "Number(u'0')"
           return "Index(Name(u's'), Number(u'0'))"
          return "Call(Name(u'ord'), [Index(Name(u's'), Number(u'0'))])"
         return Call(Name(u'ord'), [Index(Name(u's'), Number(u'0'))])
         Parser.expect('OPERATOR')
          Parser.nexttoken('')
          return (NUMBER, u'7')
         return u'<<'
         Parser.parse_expr('5')
          Parser.parse_term('')
           Parser.parse_atom('')
            Parser.expect('NUMBER')
             Parser.nexttoken('')
             return (NEWLINE, '')
            return u'7'
            Literal.__init__("u'7'")
             Number.evalit('')
             return 7
            return
            Literal.__repr__('')
            return "Number(u'7')"
           return Number(u'7')
           Literal.__repr__('')
           return "Number(u'7')"
          return Number(u'7')
          Literal.__repr__('')
          return "Number(u'7')"
         return Number(u'7')
          Call.__repr__('')
           Name.__repr__('')
           return "Name(u'ord')"
           Index.__repr__('')
            Name.__repr__('')
            return "Name(u's')"
            Literal.__repr__('')
            return "Number(u'0')"
           return "Index(Name(u's'), Number(u'0'))"
          return "Call(Name(u'ord'), [Index(Name(u's'), Number(u'0'))])"
          Literal.__repr__('')
          return "Number(u'7')"
         Binop.__init__("Call(Name(u'ord'), [...s'), Number(u'0'))]), u'<<', Number(u'7')")
         return
         Binop.__repr__('')
          Call.__repr__('')
           Name.__repr__('')
           return "Name(u'ord')"
           Index.__repr__('')
            Name.__repr__('')
            return "Name(u's')"
            Literal.__repr__('')
            return "Number(u'0')"
           return "Index(Name(u's'), Number(u'0'))"
          return "Call(Name(u'ord'), [Index(Name(u's'), Number(u'0'))])"
          Literal.__repr__('')
          return "Number(u'7')"
         return "Binop(Call(Name(u'ord'), [Index(Name(u's'), Number(u'0'))]), u'<<', Number(u'7'))"
        return Binop(Call(Name(u'ord'), [Index(Name(u's'), Number(u'0'))]), u'<<', Number(u'7'))
        Binop.__repr__('')
         Call.__repr__('')
          Name.__repr__('')
          return "Name(u'ord')"
          Index.__repr__('')
           Name.__repr__('')
           return "Name(u's')"
           Literal.__repr__('')
           return "Number(u'0')"
          return "Index(Name(u's'), Number(u'0'))"
         return "Call(Name(u'ord'), [Index(Name(u's'), Number(u'0'))])"
         Literal.__repr__('')
         return "Number(u'7')"
        return "Binop(Call(Name(u'ord'), [Index(Name(u's'), Number(u'0'))]), u'<<', Number(u'7'))"
       return Binop(Call(Name(u'ord'), [Index(Name(u's'), Number(u'0'))]), u'<<', Number(u'7'))
       Parser.expect('NEWLINE')
        Parser.nexttoken('')
        return (NAME, u'for')
       return ''
        Name.__repr__('')
        return "Name(u'x')"
        Binop.__repr__('')
         Call.__repr__('')
          Name.__repr__('')
          return "Name(u'ord')"
          Index.__repr__('')
           Name.__repr__('')
           return "Name(u's')"
           Literal.__repr__('')
           return "Number(u'0')"
          return "Index(Name(u's'), Number(u'0'))"
         return "Call(Name(u'ord'), [Index(Name(u's'), Number(u'0'))])"
         Literal.__repr__('')
         return "Number(u'7')"
        return "Binop(Call(Name(u'ord'), [Index(Name(u's'), Number(u'0'))]), u'<<', Number(u'7'))"
       Assign.__init__("[Name(u'x')], Binop(Call(Name(u'or...u'<<', Number(u'7'))")
       return
       Assign.__repr__('')
        Name.__repr__('')
        return "Name(u'x')"
        Binop.__repr__('')
         Call.__repr__('')
          Name.__repr__('')
          return "Name(u'ord')"
          Index.__repr__('')
           Name.__repr__('')
           return "Name(u's')"
           Literal.__repr__('')
           return "Number(u'0')"
          return "Index(Name(u's'), Number(u'0'))"
         return "Call(Name(u'ord'), [Index(Name(u's'), Number(u'0'))])"
         Literal.__repr__('')
         return "Number(u'7')"
        return "Binop(Call(Name(u'ord'), [Index(Name(u's'), Number(u'0'))]), u'<<', Number(u'7'))"
       return "Assign([Name(u'x')], Binop(Call(Name(u'ord'), [Index(Name(u's'), Number(u'0'))]), u'<<', Number(u'7')))"
      return Assign([Name(u'x')], Binop(Call(Name(u'ord'), [Index(Name(u's'), Number(u'0'))]), u'<<', Number(u'7')))
      Assign.__repr__('')
       Name.__repr__('')
       return "Name(u'x')"
       Binop.__repr__('')
        Call.__repr__('')
         Name.__repr__('')
         return "Name(u'ord')"
         Index.__repr__('')
          Name.__repr__('')
          return "Name(u's')"
          Literal.__repr__('')
          return "Number(u'0')"
         return "Index(Name(u's'), Number(u'0'))"
        return "Call(Name(u'ord'), [Index(Name(u's'), Number(u'0'))])"
        Literal.__repr__('')
        return "Number(u'7')"
       return "Binop(Call(Name(u'ord'), [Index(Name(u's'), Number(u'0'))]), u'<<', Number(u'7'))"
      return "Assign([Name(u'x')], Binop(Call(Name(u'ord'), [Index(Name(u's'), Number(u'0'))]), u'<<', Number(u'7')))"
     return Assign([Name(u'x')], Binop(Call(Name(u'ord'), [Index(Name(u's'), Number(u'0'))]), u'<<', Number(u'7')))
     Parser.parse_stmt('')
      Parser.parse_for('')
       Parser.expect("NAME, 'for'")
        Parser.nexttoken('')
        return (NAME, u'c')
       return u'for'
       Parser.parse_expr('')
        Parser.parse_term('')
         Parser.parse_atom('')
          Parser.expect('NAME')
           Parser.nexttoken('')
           return (NAME, u'in')
          return u'c'
          Name.__init__("u'c'")
          return
          Name.__repr__('')
          return "Name(u'c')"
         return Name(u'c')
         Name.__repr__('')
         return "Name(u'c')"
        return Name(u'c')
        Name.__repr__('')
        return "Name(u'c')"
       return Name(u'c')
       Parser.expect("NAME, 'in'")
        Parser.nexttoken('')
        return (NAME, u's')
       return u'in'
       Parser.parse_expr('')
        Parser.parse_term('')
         Parser.parse_atom('')
          Parser.expect('NAME')
           Parser.nexttoken('')
           return (OPERATOR, u':')
          return u's'
          Name.__init__("u's'")
          return
          Name.__repr__('')
          return "Name(u's')"
         return Name(u's')
         Name.__repr__('')
         return "Name(u's')"
        return Name(u's')
        Name.__repr__('')
        return "Name(u's')"
       return Name(u's')
       Parser.expect("OPERATOR, ':'")
        Parser.nexttoken('')
        return (NEWLINE, '')
       return u':'
       Parser.expect('NEWLINE')
        Parser.nexttoken('')
        return (INDENT, '')
       return ''
       Parser.parse_body('')
        Parser.expect('INDENT')
         Parser.nexttoken('')
         return (NAME, u'x')
        return ''
        Parser.parse_stmt('')
         Parser.parse_simple('')
          Parser.parse_exprs('')
           Parser.parse_expr('')
            Parser.parse_term('')
             Parser.parse_atom('')
              Parser.expect('NAME')
               Parser.nexttoken('')
               return (OPERATOR, u'=')
              return u'x'
              Name.__init__("u'x'")
              return
              Name.__repr__('')
              return "Name(u'x')"
             return Name(u'x')
             Name.__repr__('')
             return "Name(u'x')"
            return Name(u'x')
            Name.__repr__('')
            return "Name(u'x')"
           return Name(u'x')
           Name.__repr__('')
           return "Name(u'x')"
          return Name(u'x')
          Parser.nexttoken('')
          return (OPERATOR, u'(')
          Parser.parse_exprs('')
           Parser.parse_expr('')
            Parser.parse_term('')
             Parser.parse_atom('')
              Parser.nexttoken('')
              return (OPERATOR, u'(')
              Parser.parse_exprs('')
               Parser.parse_expr('')
                Parser.parse_term('')
                 Parser.parse_atom('')
                  Parser.nexttoken('')
                  return (NUMBER, u'1000003')
                  Parser.parse_exprs('')
                   Parser.parse_expr('')
                    Parser.parse_term('')
                     Parser.parse_atom('')
                      Parser.expect('NUMBER')
                       Parser.nexttoken('')
                       return (OPERATOR, u'*')
                      return u'1000003'
                      Literal.__init__("u'1000003'")
                       Number.evalit('')
                       return 1000003
                      return
                      Literal.__repr__('')
                      return "Number(u'1000003')"
                     return Number(u'1000003')
                     Literal.__repr__('')
                     return "Number(u'1000003')"
                    return Number(u'1000003')
                    Parser.expect('OPERATOR')
                     Parser.nexttoken('')
                     return (NAME, u'x')
                    return u'*'
                    Parser.parse_expr('7')
                     Parser.parse_term('')
                      Parser.parse_atom('')
                       Parser.expect('NAME')
                        Parser.nexttoken('')
                        return (OPERATOR, u')')
                       return u'x'
                       Name.__init__("u'x'")
                       return
                       Name.__repr__('')
                       return "Name(u'x')"
                      return Name(u'x')
                      Name.__repr__('')
                      return "Name(u'x')"
                     return Name(u'x')
                     Name.__repr__('')
                     return "Name(u'x')"
                    return Name(u'x')
                     Literal.__repr__('')
                     return "Number(u'1000003')"
                     Name.__repr__('')
                     return "Name(u'x')"
                    Binop.__init__("Number(u'1000003'), u'*', Name(u'x')")
                    return
                    Binop.__repr__('')
                     Literal.__repr__('')
                     return "Number(u'1000003')"
                     Name.__repr__('')
                     return "Name(u'x')"
                    return "Binop(Number(u'1000003'), u'*', Name(u'x'))"
                   return Binop(Number(u'1000003'), u'*', Name(u'x'))
                   Binop.__repr__('')
                    Literal.__repr__('')
                    return "Number(u'1000003')"
                    Name.__repr__('')
                    return "Name(u'x')"
                   return "Binop(Number(u'1000003'), u'*', Name(u'x'))"
                  return Binop(Number(u'1000003'), u'*', Name(u'x'))
                  Parser.expect("OPERATOR, ')'")
                   Parser.nexttoken('')
                   return (OPERATOR, u'^')
                  return u')'
                  Binop.__repr__('')
                   Literal.__repr__('')
                   return "Number(u'1000003')"
                   Name.__repr__('')
                   return "Name(u'x')"
                  return "Binop(Number(u'1000003'), u'*', Name(u'x'))"
                 return Binop(Number(u'1000003'), u'*', Name(u'x'))
                 Binop.__repr__('')
                  Literal.__repr__('')
                  return "Number(u'1000003')"
                  Name.__repr__('')
                  return "Name(u'x')"
                 return "Binop(Number(u'1000003'), u'*', Name(u'x'))"
                return Binop(Number(u'1000003'), u'*', Name(u'x'))
                Parser.expect('OPERATOR')
                 Parser.nexttoken('')
                 return (NAME, u'ord')
                return u'^'
                Parser.parse_expr('3')
                 Parser.parse_term('')
                  Parser.parse_atom('')
                   Parser.expect('NAME')
                    Parser.nexttoken('')
                    return (OPERATOR, u'(')
                   return u'ord'
                   Name.__init__("u'ord'")
                   return
                   Name.__repr__('')
                   return "Name(u'ord')"
                  return Name(u'ord')
                  Parser.nexttoken('')
                  return (NAME, u'c')
                  Parser.parse_exprs('')
                   Parser.parse_expr('')
                    Parser.parse_term('')
                     Parser.parse_atom('')
                      Parser.expect('NAME')
                       Parser.nexttoken('')
                       return (OPERATOR, u')')
                      return u'c'
                      Name.__init__("u'c'")
                      return
                      Name.__repr__('')
                      return "Name(u'c')"
                     return Name(u'c')
                     Name.__repr__('')
                     return "Name(u'c')"
                    return Name(u'c')
                    Name.__repr__('')
                    return "Name(u'c')"
                   return Name(u'c')
                   Name.__repr__('')
                   return "Name(u'c')"
                  return Name(u'c')
                  Parser.expect("OPERATOR, ')'")
                   Parser.nexttoken('')
                   return (OPERATOR, u')')
                  return u')'
                   Name.__repr__('')
                   return "Name(u'ord')"
                   Name.__repr__('')
                   return "Name(u'c')"
                  Call.__init__("Name(u'ord'), Name(u'c')")
                  return
                  Call.__repr__('')
                   Name.__repr__('')
                   return "Name(u'ord')"
                   Name.__repr__('')
                   return "Name(u'c')"
                  return "Call(Name(u'ord'), [Name(u'c')])"
                 return Call(Name(u'ord'), [Name(u'c')])
                 Call.__repr__('')
                  Name.__repr__('')
                  return "Name(u'ord')"
                  Name.__repr__('')
                  return "Name(u'c')"
                 return "Call(Name(u'ord'), [Name(u'c')])"
                return Call(Name(u'ord'), [Name(u'c')])
                 Binop.__repr__('')
                  Literal.__repr__('')
                  return "Number(u'1000003')"
                  Name.__repr__('')
                  return "Name(u'x')"
                 return "Binop(Number(u'1000003'), u'*', Name(u'x'))"
                 Call.__repr__('')
                  Name.__repr__('')
                  return "Name(u'ord')"
                  Name.__repr__('')
                  return "Name(u'c')"
                 return "Call(Name(u'ord'), [Name(u'c')])"
                Binop.__init__("Binop(Number(u'1000003'), u'*', Name(u'x')), u'^', Call(Name(u'ord'), [Name(u'c')])")
                return
                Binop.__repr__('')
                 Binop.__repr__('')
                  Literal.__repr__('')
                  return "Number(u'1000003')"
                  Name.__repr__('')
                  return "Name(u'x')"
                 return "Binop(Number(u'1000003'), u'*', Name(u'x'))"
                 Call.__repr__('')
                  Name.__repr__('')
                  return "Name(u'ord')"
                  Name.__repr__('')
                  return "Name(u'c')"
                 return "Call(Name(u'ord'), [Name(u'c')])"
                return "Binop(Binop(Number(u'1000003'), u'*', Name(u'x')), u'^', Call(Name(u'ord'), [Name(u'c')]))"
               return Binop(Binop(Number(u'1000003'), u'*', Name(u'x')), u'^', Call(Name(u'ord'), [Name(u'c')]))
               Binop.__repr__('')
                Binop.__repr__('')
                 Literal.__repr__('')
                 return "Number(u'1000003')"
                 Name.__repr__('')
                 return "Name(u'x')"
                return "Binop(Number(u'1000003'), u'*', Name(u'x'))"
                Call.__repr__('')
                 Name.__repr__('')
                 return "Name(u'ord')"
                 Name.__repr__('')
                 return "Name(u'c')"
                return "Call(Name(u'ord'), [Name(u'c')])"
               return "Binop(Binop(Number(u'1000003'), u'*', Name(u'x')), u'^', Call(Name(u'ord'), [Name(u'c')]))"
              return Binop(Binop(Number(u'1000003'), u'*', Name(u'x')), u'^', Call(Name(u'ord'), [Name(u'c')]))
              Parser.expect("OPERATOR, ')'")
               Parser.nexttoken('')
               return (OPERATOR, u'&')
              return u')'
              Binop.__repr__('')
               Binop.__repr__('')
                Literal.__repr__('')
                return "Number(u'1000003')"
                Name.__repr__('')
                return "Name(u'x')"
               return "Binop(Number(u'1000003'), u'*', Name(u'x'))"
               Call.__repr__('')
                Name.__repr__('')
                return "Name(u'ord')"
                Name.__repr__('')
                return "Name(u'c')"
               return "Call(Name(u'ord'), [Name(u'c')])"
              return "Binop(Binop(Number(u'1000003'), u'*', Name(u'x')), u'^', Call(Name(u'ord'), [Name(u'c')]))"
             return Binop(Binop(Number(u'1000003'), u'*', Name(u'x')), u'^', Call(Name(u'ord'), [Name(u'c')]))
             Binop.__repr__('')
              Binop.__repr__('')
               Literal.__repr__('')
               return "Number(u'1000003')"
               Name.__repr__('')
               return "Name(u'x')"
              return "Binop(Number(u'1000003'), u'*', Name(u'x'))"
              Call.__repr__('')
               Name.__repr__('')
               return "Name(u'ord')"
               Name.__repr__('')
               return "Name(u'c')"
              return "Call(Name(u'ord'), [Name(u'c')])"
             return "Binop(Binop(Number(u'1000003'), u'*', Name(u'x')), u'^', Call(Name(u'ord'), [Name(u'c')]))"
            return Binop(Binop(Number(u'1000003'), u'*', Name(u'x')), u'^', Call(Name(u'ord'), [Name(u'c')]))
            Parser.expect('OPERATOR')
             Parser.nexttoken('')
             return (NUMBER, u'4294967295')
            return u'&'
            Parser.parse_expr('4')
             Parser.parse_term('')
              Parser.parse_atom('')
               Parser.expect('NUMBER')
                Parser.nexttoken('')
                return (NEWLINE, '')
               return u'4294967295'
               Literal.__init__("u'4294967295'")
                Number.evalit('')
                return 4294967295L
               return
               Literal.__repr__('')
               return "Number(u'4294967295')"
              return Number(u'4294967295')
              Literal.__repr__('')
              return "Number(u'4294967295')"
             return Number(u'4294967295')
             Literal.__repr__('')
             return "Number(u'4294967295')"
            return Number(u'4294967295')
             Binop.__repr__('')
              Binop.__repr__('')
               Literal.__repr__('')
               return "Number(u'1000003')"
               Name.__repr__('')
               return "Name(u'x')"
              return "Binop(Number(u'1000003'), u'*', Name(u'x'))"
              Call.__repr__('')
               Name.__repr__('')
               return "Name(u'ord')"
               Name.__repr__('')
               return "Name(u'c')"
              return "Call(Name(u'ord'), [Name(u'c')])"
             return "Binop(Binop(Number(u'1000003'), u'*', Name(u'x')), u'^', Call(Name(u'ord'), [Name(u'c')]))"
             Literal.__repr__('')
             return "Number(u'4294967295')"
            Binop.__init__("Binop(Binop(Number(u...rd'), [Name(u'c')])), u'&', Number(u'4294967295')")
            return
            Binop.__repr__('')
             Binop.__repr__('')
              Binop.__repr__('')
               Literal.__repr__('')
               return "Number(u'1000003')"
               Name.__repr__('')
               return "Name(u'x')"
              return "Binop(Number(u'1000003'), u'*', Name(u'x'))"
              Call.__repr__('')
               Name.__repr__('')
               return "Name(u'ord')"
               Name.__repr__('')
               return "Name(u'c')"
              return "Call(Name(u'ord'), [Name(u'c')])"
             return "Binop(Binop(Number(u'1000003'), u'*', Name(u'x')), u'^', Call(Name(u'ord'), [Name(u'c')]))"
             Literal.__repr__('')
             return "Number(u'4294967295')"
            return "Binop(Binop(Binop(Number(u'1000003'), u'*', Name(u'x')), u'^', Call(Name(u'ord'), [Name(u'c')])), u'&', Number(u'4294967295'))"
           return Binop(Binop(Binop(Number(u'1000003'), u'*', Name(u'x')), u'^', Call(Name(u'ord'), [Name(u'c')])), u'&', Number(u'4294967295'))
           Binop.__repr__('')
            Binop.__repr__('')
             Binop.__repr__('')
              Literal.__repr__('')
              return "Number(u'1000003')"
              Name.__repr__('')
              return "Name(u'x')"
             return "Binop(Number(u'1000003'), u'*', Name(u'x'))"
             Call.__repr__('')
              Name.__repr__('')
              return "Name(u'ord')"
              Name.__repr__('')
              return "Name(u'c')"
             return "Call(Name(u'ord'), [Name(u'c')])"
            return "Binop(Binop(Number(u'1000003'), u'*', Name(u'x')), u'^', Call(Name(u'ord'), [Name(u'c')]))"
            Literal.__repr__('')
            return "Number(u'4294967295')"
           return "Binop(Binop(Binop(Number(u'1000003'), u'*', Name(u'x')), u'^', Call(Name(u'ord'), [Name(u'c')])), u'&', Number(u'4294967295'))"
          return Binop(Binop(Binop(Number(u'1000003'), u'*', Name(u'x')), u'^', Call(Name(u'ord'), [Name(u'c')])), u'&', Number(u'4294967295'))
          Parser.expect('NEWLINE')
           Parser.nexttoken('')
           return (DEDENT, '')
          return ''
           Name.__repr__('')
           return "Name(u'x')"
           Binop.__repr__('')
            Binop.__repr__('')
             Binop.__repr__('')
              Literal.__repr__('')
              return "Number(u'1000003')"
              Name.__repr__('')
              return "Name(u'x')"
             return "Binop(Number(u'1000003'), u'*', Name(u'x'))"
             Call.__repr__('')
              Name.__repr__('')
              return "Name(u'ord')"
              Name.__repr__('')
              return "Name(u'c')"
             return "Call(Name(u'ord'), [Name(u'c')])"
            return "Binop(Binop(Number(u'1000003'), u'*', Name(u'x')), u'^', Call(Name(u'ord'), [Name(u'c')]))"
            Literal.__repr__('')
            return "Number(u'4294967295')"
           return "Binop(Binop(Binop(Number(u'1000003'), u'*', Name(u'x')), u'^', Call(Name(u'ord'), [Name(u'c')])), u'&', Number(u'4294967295'))"
          Assign.__init__("[Name(u'x')], Binop(Binop(Binop(Nu...mber(u'4294967295'))")
          return
          Assign.__repr__('')
           Name.__repr__('')
           return "Name(u'x')"
           Binop.__repr__('')
            Binop.__repr__('')
             Binop.__repr__('')
              Literal.__repr__('')
              return "Number(u'1000003')"
              Name.__repr__('')
              return "Name(u'x')"
             return "Binop(Number(u'1000003'), u'*', Name(u'x'))"
             Call.__repr__('')
              Name.__repr__('')
              return "Name(u'ord')"
              Name.__repr__('')
              return "Name(u'c')"
             return "Call(Name(u'ord'), [Name(u'c')])"
            return "Binop(Binop(Number(u'1000003'), u'*', Name(u'x')), u'^', Call(Name(u'ord'), [Name(u'c')]))"
            Literal.__repr__('')
            return "Number(u'4294967295')"
           return "Binop(Binop(Binop(Number(u'1000003'), u'*', Name(u'x')), u'^', Call(Name(u'ord'), [Name(u'c')])), u'&', Number(u'4294967295'))"
          return "Assign([Name(u'x')], Binop(Binop(Binop(Number(u'1000003'), u'*', Name(u'x')), u'^', Call(Name(u'ord'), [Name(u'c')])), u'&', Number(u'4294967295')))"
         return Assign([Name(u'x')], Binop(Binop(Binop(Number(u'1000003'), u'*', Name(u'x')), u'^', Call(Name(u'ord'), [Name(u'c')])), u'&', Number(u'4294967295')))
         Assign.__repr__('')
          Name.__repr__('')
          return "Name(u'x')"
          Binop.__repr__('')
           Binop.__repr__('')
            Binop.__repr__('')
             Literal.__repr__('')
             return "Number(u'1000003')"
             Name.__repr__('')
             return "Name(u'x')"
            return "Binop(Number(u'1000003'), u'*', Name(u'x'))"
            Call.__repr__('')
             Name.__repr__('')
             return "Name(u'ord')"
             Name.__repr__('')
             return "Name(u'c')"
            return "Call(Name(u'ord'), [Name(u'c')])"
           return "Binop(Binop(Number(u'1000003'), u'*', Name(u'x')), u'^', Call(Name(u'ord'), [Name(u'c')]))"
           Literal.__repr__('')
           return "Number(u'4294967295')"
          return "Binop(Binop(Binop(Number(u'1000003'), u'*', Name(u'x')), u'^', Call(Name(u'ord'), [Name(u'c')])), u'&', Number(u'4294967295'))"
         return "Assign([Name(u'x')], Binop(Binop(Binop(Number(u'1000003'), u'*', Name(u'x')), u'^', Call(Name(u'ord'), [Name(u'c')])), u'&', Number(u'4294967295')))"
        return Assign([Name(u'x')], Binop(Binop(Binop(Number(u'1000003'), u'*', Name(u'x')), u'^', Call(Name(u'ord'), [Name(u'c')])), u'&', Number(u'4294967295')))
        Parser.expect('DEDENT')
         Parser.nexttoken('')
         return (NAME, u'return')
        return ''
        Assign.__repr__('')
         Name.__repr__('')
         return "Name(u'x')"
         Binop.__repr__('')
          Binop.__repr__('')
           Binop.__repr__('')
            Literal.__repr__('')
            return "Number(u'1000003')"
            Name.__repr__('')
            return "Name(u'x')"
           return "Binop(Number(u'1000003'), u'*', Name(u'x'))"
           Call.__repr__('')
            Name.__repr__('')
            return "Name(u'ord')"
            Name.__repr__('')
            return "Name(u'c')"
           return "Call(Name(u'ord'), [Name(u'c')])"
          return "Binop(Binop(Number(u'1000003'), u'*', Name(u'x')), u'^', Call(Name(u'ord'), [Name(u'c')]))"
          Literal.__repr__('')
          return "Number(u'4294967295')"
         return "Binop(Binop(Binop(Number(u'1000003'), u'*', Name(u'x')), u'^', Call(Name(u'ord'), [Name(u'c')])), u'&', Number(u'4294967295'))"
        return "Assign([Name(u'x')], Binop(Binop(Binop(Number(u'1000003'), u'*', Name(u'x')), u'^', Call(Name(u'ord'), [Name(u'c')])), u'&', Number(u'4294967295')))"
       return [Assign([Name(u'x')], Binop(Binop(Binop(Number(u'1000003'), u'*', Name(u'x')), u'^', Call(Name(u'ord'), [Name(u'c')])), u'&', Number(u'4294967295')))]
        Name.__repr__('')
        return "Name(u'c')"
        Name.__repr__('')
        return "Name(u's')"
        Assign.__repr__('')
         Name.__repr__('')
         return "Name(u'x')"
         Binop.__repr__('')
          Binop.__repr__('')
           Binop.__repr__('')
            Literal.__repr__('')
            return "Number(u'1000003')"
            Name.__repr__('')
            return "Name(u'x')"
           return "Binop(Number(u'1000003'), u'*', Name(u'x'))"
           Call.__repr__('')
            Name.__repr__('')
            return "Name(u'ord')"
            Name.__repr__('')
            return "Name(u'c')"
           return "Call(Name(u'ord'), [Name(u'c')])"
          return "Binop(Binop(Number(u'1000003'), u'*', Name(u'x')), u'^', Call(Name(u'ord'), [Name(u'c')]))"
          Literal.__repr__('')
          return "Number(u'4294967295')"
         return "Binop(Binop(Binop(Number(u'1000003'), u'*', Name(u'x')), u'^', Call(Name(u'ord'), [Name(u'c')])), u'&', Number(u'4294967295'))"
        return "Assign([Name(u'x')], Binop(Binop(Binop(Number(u'1000003'), u'*', Name(u'x')), u'^', Call(Name(u'ord'), [Name(u'c')])), u'&', Number(u'4294967295')))"
       For.__init__("Name(u'c'), Name(u's'), [Assign([Name(u'x')]...er(u'4294967295')))]")
       return
       For.__repr__('')
        Name.__repr__('')
        return "Name(u'c')"
        Name.__repr__('')
        return "Name(u's')"
       return "For(Name(u'c'), Name(u's'), ...)"
      return For(Name(u'c'), Name(u's'), ...)
      For.__repr__('')
       Name.__repr__('')
       return "Name(u'c')"
       Name.__repr__('')
       return "Name(u's')"
      return "For(Name(u'c'), Name(u's'), ...)"
     return For(Name(u'c'), Name(u's'), ...)
     Parser.parse_stmt('')
      Parser.parse_return('')
       Parser.expect("NAME, 'return'")
        Parser.nexttoken('')
        return (NAME, u'x')
       return u'return'
       Parser.parse_exprs('')
        Parser.parse_expr('')
         Parser.parse_term('')
          Parser.parse_atom('')
           Parser.expect('NAME')
            Parser.nexttoken('')
            return (OPERATOR, u'^')
           return u'x'
           Name.__init__("u'x'")
           return
           Name.__repr__('')
           return "Name(u'x')"
          return Name(u'x')
          Name.__repr__('')
          return "Name(u'x')"
         return Name(u'x')
         Parser.expect('OPERATOR')
          Parser.nexttoken('')
          return (NAME, u'len')
         return u'^'
         Parser.parse_expr('3')
          Parser.parse_term('')
           Parser.parse_atom('')
            Parser.expect('NAME')
             Parser.nexttoken('')
             return (OPERATOR, u'(')
            return u'len'
            Name.__init__("u'len'")
            return
            Name.__repr__('')
            return "Name(u'len')"
           return Name(u'len')
           Parser.nexttoken('')
           return (NAME, u's')
           Parser.parse_exprs('')
            Parser.parse_expr('')
             Parser.parse_term('')
              Parser.parse_atom('')
               Parser.expect('NAME')
                Parser.nexttoken('')
                return (OPERATOR, u')')
               return u's'
               Name.__init__("u's'")
               return
               Name.__repr__('')
               return "Name(u's')"
              return Name(u's')
              Name.__repr__('')
              return "Name(u's')"
             return Name(u's')
             Name.__repr__('')
             return "Name(u's')"
            return Name(u's')
            Name.__repr__('')
            return "Name(u's')"
           return Name(u's')
           Parser.expect("OPERATOR, ')'")
            Parser.nexttoken('')
            return (NEWLINE, '')
           return u')'
            Name.__repr__('')
            return "Name(u'len')"
            Name.__repr__('')
            return "Name(u's')"
           Call.__init__("Name(u'len'), Name(u's')")
           return
           Call.__repr__('')
            Name.__repr__('')
            return "Name(u'len')"
            Name.__repr__('')
            return "Name(u's')"
           return "Call(Name(u'len'), [Name(u's')])"
          return Call(Name(u'len'), [Name(u's')])
          Call.__repr__('')
           Name.__repr__('')
           return "Name(u'len')"
           Name.__repr__('')
           return "Name(u's')"
          return "Call(Name(u'len'), [Name(u's')])"
         return Call(Name(u'len'), [Name(u's')])
          Name.__repr__('')
          return "Name(u'x')"
          Call.__repr__('')
           Name.__repr__('')
           return "Name(u'len')"
           Name.__repr__('')
           return "Name(u's')"
          return "Call(Name(u'len'), [Name(u's')])"
         Binop.__init__("Name(u'x'), u'^', Call(Name(u'len'), [Name(u's')])")
         return
         Binop.__repr__('')
          Name.__repr__('')
          return "Name(u'x')"
          Call.__repr__('')
           Name.__repr__('')
           return "Name(u'len')"
           Name.__repr__('')
           return "Name(u's')"
          return "Call(Name(u'len'), [Name(u's')])"
         return "Binop(Name(u'x'), u'^', Call(Name(u'len'), [Name(u's')]))"
        return Binop(Name(u'x'), u'^', Call(Name(u'len'), [Name(u's')]))
        Binop.__repr__('')
         Name.__repr__('')
         return "Name(u'x')"
         Call.__repr__('')
          Name.__repr__('')
          return "Name(u'len')"
          Name.__repr__('')
          return "Name(u's')"
         return "Call(Name(u'len'), [Name(u's')])"
        return "Binop(Name(u'x'), u'^', Call(Name(u'len'), [Name(u's')]))"
       return Binop(Name(u'x'), u'^', Call(Name(u'len'), [Name(u's')]))
       Parser.expect('NEWLINE')
        Parser.nexttoken('')
        return (DEDENT, '')
       return ''
        Binop.__repr__('')
         Name.__repr__('')
         return "Name(u'x')"
         Call.__repr__('')
          Name.__repr__('')
          return "Name(u'len')"
          Name.__repr__('')
          return "Name(u's')"
         return "Call(Name(u'len'), [Name(u's')])"
        return "Binop(Name(u'x'), u'^', Call(Name(u'len'), [Name(u's')]))"
       Return.__init__("Binop(Name(u'x'), u'...en'), [Name(u's')]))")
       return
       Return.__repr__('')
        Binop.__repr__('')
         Name.__repr__('')
         return "Name(u'x')"
         Call.__repr__('')
          Name.__repr__('')
          return "Name(u'len')"
          Name.__repr__('')
          return "Name(u's')"
         return "Call(Name(u'len'), [Name(u's')])"
        return "Binop(Name(u'x'), u'^', Call(Name(u'len'), [Name(u's')]))"
       return "Return(Binop(Name(u'x'), u'^', Call(Name(u'len'), [Name(u's')])))"
      return Return(Binop(Name(u'x'), u'^', Call(Name(u'len'), [Name(u's')])))
      Return.__repr__('')
       Binop.__repr__('')
        Name.__repr__('')
        return "Name(u'x')"
        Call.__repr__('')
         Name.__repr__('')
         return "Name(u'len')"
         Name.__repr__('')
         return "Name(u's')"
        return "Call(Name(u'len'), [Name(u's')])"
       return "Binop(Name(u'x'), u'^', Call(Name(u'len'), [Name(u's')]))"
      return "Return(Binop(Name(u'x'), u'^', Call(Name(u'len'), [Name(u's')])))"
     return Return(Binop(Name(u'x'), u'^', Call(Name(u'len'), [Name(u's')])))
     Parser.expect('DEDENT')
      Parser.nexttoken('')
      return (EOF, '')
     return ''
     If.__repr__('')
      Binop.__repr__('')
       Name.__repr__('')
       return "Name(u's')"
       Literal.__repr__('')
       return 'String(u"\'\'")'
      return 'Binop(Name(u\'s\'), u\'==\', String(u"\'\'"))'
     return 'If(Binop(Name(u\'s\'), u\'==\', String(u"\'\'")), ...)'
     Assign.__repr__('')
      Name.__repr__('')
      return "Name(u'x')"
      Binop.__repr__('')
       Call.__repr__('')
        Name.__repr__('')
        return "Name(u'ord')"
        Index.__repr__('')
         Name.__repr__('')
         return "Name(u's')"
         Literal.__repr__('')
         return "Number(u'0')"
        return "Index(Name(u's'), Number(u'0'))"
       return "Call(Name(u'ord'), [Index(Name(u's'), Number(u'0'))])"
       Literal.__repr__('')
       return "Number(u'7')"
      return "Binop(Call(Name(u'ord'), [Index(Name(u's'), Number(u'0'))]), u'<<', Number(u'7'))"
     return "Assign([Name(u'x')], Binop(Call(Name(u'ord'), [Index(Name(u's'), Number(u'0'))]), u'<<', Number(u'7')))"
     For.__repr__('')
      Name.__repr__('')
      return "Name(u'c')"
      Name.__repr__('')
      return "Name(u's')"
     return "For(Name(u'c'), Name(u's'), ...)"
     Return.__repr__('')
      Binop.__repr__('')
       Name.__repr__('')
       return "Name(u'x')"
       Call.__repr__('')
        Name.__repr__('')
        return "Name(u'len')"
        Name.__repr__('')
        return "Name(u's')"
       return "Call(Name(u'len'), [Name(u's')])"
      return "Binop(Name(u'x'), u'^', Call(Name(u'len'), [Name(u's')]))"
     return "Return(Binop(Name(u'x'), u'^', Call(Name(u'len'), [Name(u's')])))"
    return [If(Binop(Name(u's'), u'==', String(u"''")), ...), Assign([Name(u'x')], Binop(Call(Name(u'ord'), [Index(Name(u's'), Number(u'0'))]), u'<<', Number(u'7'))), For(Name(u'c'), Name(u's'), ...), Return(Binop(Name(u'x'), u'^', Call(Name(u'len'), [Name(u's')])))]
     If.__repr__('')
      Binop.__repr__('')
       Name.__repr__('')
       return "Name(u's')"
       Literal.__repr__('')
       return 'String(u"\'\'")'
      return 'Binop(Name(u\'s\'), u\'==\', String(u"\'\'"))'
     return 'If(Binop(Name(u\'s\'), u\'==\', String(u"\'\'")), ...)'
     Assign.__repr__('')
      Name.__repr__('')
      return "Name(u'x')"
      Binop.__repr__('')
       Call.__repr__('')
        Name.__repr__('')
        return "Name(u'ord')"
        Index.__repr__('')
         Name.__repr__('')
         return "Name(u's')"
         Literal.__repr__('')
         return "Number(u'0')"
        return "Index(Name(u's'), Number(u'0'))"
       return "Call(Name(u'ord'), [Index(Name(u's'), Number(u'0'))])"
       Literal.__repr__('')
       return "Number(u'7')"
      return "Binop(Call(Name(u'ord'), [Index(Name(u's'), Number(u'0'))]), u'<<', Number(u'7'))"
     return "Assign([Name(u'x')], Binop(Call(Name(u'ord'), [Index(Name(u's'), Number(u'0'))]), u'<<', Number(u'7')))"
     For.__repr__('')
      Name.__repr__('')
      return "Name(u'c')"
      Name.__repr__('')
      return "Name(u's')"
     return "For(Name(u'c'), Name(u's'), ...)"
     Return.__repr__('')
      Binop.__repr__('')
       Name.__repr__('')
       return "Name(u'x')"
       Call.__repr__('')
        Name.__repr__('')
        return "Name(u'len')"
        Name.__repr__('')
        return "Name(u's')"
       return "Call(Name(u'len'), [Name(u's')])"
      return "Binop(Name(u'x'), u'^', Call(Name(u'len'), [Name(u's')]))"
     return "Return(Binop(Name(u'x'), u'^', Call(Name(u'len'), [Name(u's')])))"
    Define.__init__("u'strhash', [u's'], [If(Binop(Name(u's')...'), [Name(u's')])))]")
    return
    Define.__repr__('')
    return "Define(u'strhash', [u's'], ...)"
   return Define(u'strhash', [u's'], ...)
   Define.__repr__('')
   return "Define(u'strhash', [u's'], ...)"
  return Define(u'strhash', [u's'], ...)
  Define.__repr__('')
  return "Define(u'pi', [], ...)"
  Define.__repr__('')
  return "Define(u'strhash', [u's'], ...)"
 return [Define(u'pi', [], ...), Define(u'strhash', [u's'], ...)]
 Define.eval('{}, {}')
  Node.isgenerator('')
  return False
  While.isgenerator('')
   Node.isgenerator('')
   return False
   Node.isgenerator('')
   return False
   Node.isgenerator('')
   return False
   While.isgenerator('')
    Yield.isgenerator('')
    return True
   return True
  return True
 return
 Define.eval("{u'pi': <Generator object at 0>}, {u'pi': <Generator object at 0>}")
  If.isgenerator('')
   Node.isgenerator('')
   return False
  return False
  Node.isgenerator('')
  return False
  Node.isgenerator('')
  return False
  Node.isgenerator('')
  return False
 return
 Node.geneval("{u'pi': <Generator o...nction object at 0>}, {}")
 return <generator object at 0>
 Assign.eval("{u'pi': <Generator o...nction object at 0>}, {}")
  Exprs.eval("{u'pi': <Generator o...nction object at 0>}, {}")
   Literal.eval("{u'pi': <Generator o...nction object at 0>}, {}")
   return 2
   Literal.eval("{u'pi': <Generator o...nction object at 0>}, {}")
   return 4
   Literal.eval("{u'pi': <Generator o...nction object at 0>}, {}")
   return 1
   Literal.eval("{u'pi': <Generator o...nction object at 0>}, {}")
   return 12
   Literal.eval("{u'pi': <Generator o...nction object at 0>}, {}")
   return 4
  return (2, 4, 1, 12, 4)
  Exprs.assign("(2, 4, 1, 12, 4), {u'pi': <Generator o...nction object at 0>}, {}")
   Name.assign("2, {u'pi': <Generator o...nction object at 0>}, {}")
   return
   Name.assign("4, {u'pi': <Generator o...nction object at 0>}, {u'k': 2}")
   return
   Name.assign("1, {u'pi': <Generator o...nction object at 0>}, {u'a': 4, u'k': 2}")
   return
   Name.assign("12, {u'pi': <Generator o...nction object at 0>}, {u'a': 4, u'b': 1, u'k': 2}")
   return
   Name.assign("4, {u'pi': <Generator o...nction object at 0>}, {u'a': 4, u'a1': 12, u'b': 1, u'k': 2}")
   return
  return
 return
 While.geneval("{u'pi': <Generator o...nction object at 0>}, {u'a': 4, u'a1': 12,..., u'b1': 4, u'k': 2}")
 return <generator object at 0>
 Literal.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 4, u'a1': 12,..., u'b1': 4, u'k': 2}")
 return 1
 Node.geneval("{u'pi': <Generator o...nction object at 0>}, {u'a': 4, u'a1': 12,..., u'b1': 4, u'k': 2}")
 return <generator object at 0>
 Assign.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 4, u'a1': 12,..., u'b1': 4, u'k': 2}")
  Exprs.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 4, u'a1': 12,..., u'b1': 4, u'k': 2}")
   Binop.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 4, u'a1': 12,..., u'b1': 4, u'k': 2}")
    Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 4, u'a1': 12,..., u'b1': 4, u'k': 2}")
    return 2
    Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 4, u'a1': 12,..., u'b1': 4, u'k': 2}")
    return 2
   return 4
   Binop.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 4, u'a1': 12,..., u'b1': 4, u'k': 2}")
    Binop.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 4, u'a1': 12,..., u'b1': 4, u'k': 2}")
     Literal.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 4, u'a1': 12,..., u'b1': 4, u'k': 2}")
     return 2
     Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 4, u'a1': 12,..., u'b1': 4, u'k': 2}")
     return 2
    return 4
    Literal.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 4, u'a1': 12,..., u'b1': 4, u'k': 2}")
    return 1
   return 5
   Binop.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 4, u'a1': 12,..., u'b1': 4, u'k': 2}")
    Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 4, u'a1': 12,..., u'b1': 4, u'k': 2}")
    return 2
    Literal.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 4, u'a1': 12,..., u'b1': 4, u'k': 2}")
    return 1
   return 3
  return (4, 5, 3)
  Exprs.assign("(4, 5, 3), {u'pi': <Generator o...nction object at 0>}, {u'a': 4, u'a1': 12,..., u'b1': 4, u'k': 2}")
   Name.assign("4, {u'pi': <Generator o...nction object at 0>}, {u'a': 4, u'a1': 12,..., u'b1': 4, u'k': 2}")
   return
   Name.assign("5, {u'pi': <Generator o...nction object at 0>}, {u'a': 4, u'a1': 12,...4, u'k': 2, u'p': 4}")
   return
   Name.assign("3, {u'pi': <Generator o...nction object at 0>}, {u'a': 4, u'a1': 12,...2, u'p': 4, u'q': 5}")
   return
  return
 return
 Node.geneval("{u'pi': <Generator o...nction object at 0>}, {u'a': 4, u'a1': 12,...3, u'p': 4, u'q': 5}")
 return <generator object at 0>
 Assign.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 4, u'a1': 12,...3, u'p': 4, u'q': 5}")
  Exprs.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 4, u'a1': 12,...3, u'p': 4, u'q': 5}")
   Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 4, u'a1': 12,...3, u'p': 4, u'q': 5}")
   return 12
   Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 4, u'a1': 12,...3, u'p': 4, u'q': 5}")
   return 4
   Binop.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 4, u'a1': 12,...3, u'p': 4, u'q': 5}")
    Binop.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 4, u'a1': 12,...3, u'p': 4, u'q': 5}")
     Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 4, u'a1': 12,...3, u'p': 4, u'q': 5}")
     return 4
     Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 4, u'a1': 12,...3, u'p': 4, u'q': 5}")
     return 4
    return 16
    Binop.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 4, u'a1': 12,...3, u'p': 4, u'q': 5}")
     Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 4, u'a1': 12,...3, u'p': 4, u'q': 5}")
     return 5
     Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 4, u'a1': 12,...3, u'p': 4, u'q': 5}")
     return 12
    return 60
   return 76
   Binop.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 4, u'a1': 12,...3, u'p': 4, u'q': 5}")
    Binop.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 4, u'a1': 12,...3, u'p': 4, u'q': 5}")
     Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 4, u'a1': 12,...3, u'p': 4, u'q': 5}")
     return 4
     Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 4, u'a1': 12,...3, u'p': 4, u'q': 5}")
     return 1
    return 4
    Binop.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 4, u'a1': 12,...3, u'p': 4, u'q': 5}")
     Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 4, u'a1': 12,...3, u'p': 4, u'q': 5}")
     return 5
     Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 4, u'a1': 12,...3, u'p': 4, u'q': 5}")
     return 4
    return 20
   return 24
  return (12, 4, 76, 24)
  Exprs.assign("(12, 4, 76, 24), {u'pi': <Generator o...nction object at 0>}, {u'a': 4, u'a1': 12,...3, u'p': 4, u'q': 5}")
   Name.assign("12, {u'pi': <Generator o...nction object at 0>}, {u'a': 4, u'a1': 12,...3, u'p': 4, u'q': 5}")
   return
   Name.assign("4, {u'pi': <Generator o...nction object at 0>}, {u'a': 12, u'a1': 12...3, u'p': 4, u'q': 5}")
   return
   Name.assign("76, {u'pi': <Generator o...nction object at 0>}, {u'a': 12, u'a1': 12...3, u'p': 4, u'q': 5}")
   return
   Name.assign("24, {u'pi': <Generator o...nction object at 0>}, {u'a': 12, u'a1': 76...3, u'p': 4, u'q': 5}")
   return
  return
 return
 Node.geneval("{u'pi': <Generator o...nction object at 0>}, {u'a': 12, u'a1': 76...3, u'p': 4, u'q': 5}")
 return <generator object at 0>
 Assign.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 12, u'a1': 76...3, u'p': 4, u'q': 5}")
  Exprs.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 12, u'a1': 76...3, u'p': 4, u'q': 5}")
   Binop.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 12, u'a1': 76...3, u'p': 4, u'q': 5}")
    Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 12, u'a1': 76...3, u'p': 4, u'q': 5}")
    return 12
    Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 12, u'a1': 76...3, u'p': 4, u'q': 5}")
    return 4
   return 3
   Binop.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 12, u'a1': 76...3, u'p': 4, u'q': 5}")
    Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 12, u'a1': 76...3, u'p': 4, u'q': 5}")
    return 76
    Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 12, u'a1': 76...3, u'p': 4, u'q': 5}")
    return 24
   return 3
  return (3, 3)
  Exprs.assign("(3, 3), {u'pi': <Generator o...nction object at 0>}, {u'a': 12, u'a1': 76...3, u'p': 4, u'q': 5}")
   Name.assign("3, {u'pi': <Generator o...nction object at 0>}, {u'a': 12, u'a1': 76...3, u'p': 4, u'q': 5}")
   return
   Name.assign("3, {u'pi': <Generator o...nction object at 0>}, {u'a': 12, u'a1': 76...3, u'p': 4, u'q': 5}")
   return
  return
 return
 While.geneval("{u'pi': <Generator o...nction object at 0>}, {u'a': 12, u'a1': 76...3, u'p': 4, u'q': 5}")
 return <generator object at 0>
 Binop.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 12, u'a1': 76...3, u'p': 4, u'q': 5}")
  Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 12, u'a1': 76...3, u'p': 4, u'q': 5}")
  return 3
  Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 12, u'a1': 76...3, u'p': 4, u'q': 5}")
  return 3
 return True
 Yield.geneval("{u'pi': <Generator o...nction object at 0>}, {u'a': 12, u'a1': 76...3, u'p': 4, u'q': 5}")
 return <generator object at 0>
 Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 12, u'a1': 76...3, u'p': 4, u'q': 5}")
 return 3
 Node.geneval("{u'pi': <Generator o...nction object at 0>}, {u'a': 12, u'a1': 76...3, u'p': 4, u'q': 5}")
 return <generator object at 0>
 Assign.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 12, u'a1': 76...3, u'p': 4, u'q': 5}")
  Exprs.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 12, u'a1': 76...3, u'p': 4, u'q': 5}")
   Binop.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 12, u'a1': 76...3, u'p': 4, u'q': 5}")
    Literal.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 12, u'a1': 76...3, u'p': 4, u'q': 5}")
    return 10
    Binop.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 12, u'a1': 76...3, u'p': 4, u'q': 5}")
     Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 12, u'a1': 76...3, u'p': 4, u'q': 5}")
     return 12
     Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 12, u'a1': 76...3, u'p': 4, u'q': 5}")
     return 4
    return 0
   return 0
   Binop.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 12, u'a1': 76...3, u'p': 4, u'q': 5}")
    Literal.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 12, u'a1': 76...3, u'p': 4, u'q': 5}")
    return 10
    Binop.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 12, u'a1': 76...3, u'p': 4, u'q': 5}")
     Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 12, u'a1': 76...3, u'p': 4, u'q': 5}")
     return 76
     Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 12, u'a1': 76...3, u'p': 4, u'q': 5}")
     return 24
    return 4
   return 40
  return (0, 40)
  Exprs.assign("(0, 40), {u'pi': <Generator o...nction object at 0>}, {u'a': 12, u'a1': 76...3, u'p': 4, u'q': 5}")
   Name.assign("0, {u'pi': <Generator o...nction object at 0>}, {u'a': 12, u'a1': 76...3, u'p': 4, u'q': 5}")
   return
   Name.assign("40, {u'pi': <Generator o...nction object at 0>}, {u'a': 0, u'a1': 76,...3, u'p': 4, u'q': 5}")
   return
  return
 return
 Node.geneval("{u'pi': <Generator o...nction object at 0>}, {u'a': 0, u'a1': 40,...3, u'p': 4, u'q': 5}")
 return <generator object at 0>
 Assign.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 0, u'a1': 40,...3, u'p': 4, u'q': 5}")
  Exprs.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 0, u'a1': 40,...3, u'p': 4, u'q': 5}")
   Binop.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 0, u'a1': 40,...3, u'p': 4, u'q': 5}")
    Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 0, u'a1': 40,...3, u'p': 4, u'q': 5}")
    return 0
    Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 0, u'a1': 40,...3, u'p': 4, u'q': 5}")
    return 4
   return 0
   Binop.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 0, u'a1': 40,...3, u'p': 4, u'q': 5}")
    Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 0, u'a1': 40,...3, u'p': 4, u'q': 5}")
    return 40
    Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 0, u'a1': 40,...3, u'p': 4, u'q': 5}")
    return 24
   return 1
  return (0, 1)
  Exprs.assign("(0, 1), {u'pi': <Generator o...nction object at 0>}, {u'a': 0, u'a1': 40,...3, u'p': 4, u'q': 5}")
   Name.assign("0, {u'pi': <Generator o...nction object at 0>}, {u'a': 0, u'a1': 40,...3, u'p': 4, u'q': 5}")
   return
   Name.assign("1, {u'pi': <Generator o...nction object at 0>}, {u'a': 0, u'a1': 40,...3, u'p': 4, u'q': 5}")
   return
  return
 return
 Binop.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 0, u'a1': 40,...3, u'p': 4, u'q': 5}")
  Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 0, u'a1': 40,...3, u'p': 4, u'q': 5}")
  return 0
  Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 0, u'a1': 40,...3, u'p': 4, u'q': 5}")
  return 1
 return False
 Literal.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 0, u'a1': 40,...3, u'p': 4, u'q': 5}")
 return 1
 Node.geneval("{u'pi': <Generator o...nction object at 0>}, {u'a': 0, u'a1': 40,...3, u'p': 4, u'q': 5}")
 return <generator object at 0>
 Assign.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 0, u'a1': 40,...3, u'p': 4, u'q': 5}")
  Exprs.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 0, u'a1': 40,...3, u'p': 4, u'q': 5}")
   Binop.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 0, u'a1': 40,...3, u'p': 4, u'q': 5}")
    Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 0, u'a1': 40,...3, u'p': 4, u'q': 5}")
    return 3
    Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 0, u'a1': 40,...3, u'p': 4, u'q': 5}")
    return 3
   return 9
   Binop.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 0, u'a1': 40,...3, u'p': 4, u'q': 5}")
    Binop.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 0, u'a1': 40,...3, u'p': 4, u'q': 5}")
     Literal.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 0, u'a1': 40,...3, u'p': 4, u'q': 5}")
     return 2
     Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 0, u'a1': 40,...3, u'p': 4, u'q': 5}")
     return 3
    return 6
    Literal.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 0, u'a1': 40,...3, u'p': 4, u'q': 5}")
    return 1
   return 7
   Binop.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 0, u'a1': 40,...3, u'p': 4, u'q': 5}")
    Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 0, u'a1': 40,...3, u'p': 4, u'q': 5}")
    return 3
    Literal.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 0, u'a1': 40,...3, u'p': 4, u'q': 5}")
    return 1
   return 4
  return (9, 7, 4)
  Exprs.assign("(9, 7, 4), {u'pi': <Generator o...nction object at 0>}, {u'a': 0, u'a1': 40,...3, u'p': 4, u'q': 5}")
   Name.assign("9, {u'pi': <Generator o...nction object at 0>}, {u'a': 0, u'a1': 40,...3, u'p': 4, u'q': 5}")
   return
   Name.assign("7, {u'pi': <Generator o...nction object at 0>}, {u'a': 0, u'a1': 40,...3, u'p': 9, u'q': 5}")
   return
   Name.assign("4, {u'pi': <Generator o...nction object at 0>}, {u'a': 0, u'a1': 40,...3, u'p': 9, u'q': 7}")
   return
  return
 return
 Node.geneval("{u'pi': <Generator o...nction object at 0>}, {u'a': 0, u'a1': 40,...4, u'p': 9, u'q': 7}")
 return <generator object at 0>
 Assign.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 0, u'a1': 40,...4, u'p': 9, u'q': 7}")
  Exprs.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 0, u'a1': 40,...4, u'p': 9, u'q': 7}")
   Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 0, u'a1': 40,...4, u'p': 9, u'q': 7}")
   return 40
   Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 0, u'a1': 40,...4, u'p': 9, u'q': 7}")
   return 24
   Binop.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 0, u'a1': 40,...4, u'p': 9, u'q': 7}")
    Binop.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 0, u'a1': 40,...4, u'p': 9, u'q': 7}")
     Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 0, u'a1': 40,...4, u'p': 9, u'q': 7}")
     return 9
     Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 0, u'a1': 40,...4, u'p': 9, u'q': 7}")
     return 0
    return 0
    Binop.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 0, u'a1': 40,...4, u'p': 9, u'q': 7}")
     Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 0, u'a1': 40,...4, u'p': 9, u'q': 7}")
     return 7
     Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 0, u'a1': 40,...4, u'p': 9, u'q': 7}")
     return 40
    return 280
   return 280
   Binop.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 0, u'a1': 40,...4, u'p': 9, u'q': 7}")
    Binop.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 0, u'a1': 40,...4, u'p': 9, u'q': 7}")
     Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 0, u'a1': 40,...4, u'p': 9, u'q': 7}")
     return 9
     Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 0, u'a1': 40,...4, u'p': 9, u'q': 7}")
     return 4
    return 36
    Binop.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 0, u'a1': 40,...4, u'p': 9, u'q': 7}")
     Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 0, u'a1': 40,...4, u'p': 9, u'q': 7}")
     return 7
     Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 0, u'a1': 40,...4, u'p': 9, u'q': 7}")
     return 24
    return 168
   return 204
  return (40, 24, 280, 204)
  Exprs.assign("(40, 24, 280, 204), {u'pi': <Generator o...nction object at 0>}, {u'a': 0, u'a1': 40,...4, u'p': 9, u'q': 7}")
   Name.assign("40, {u'pi': <Generator o...nction object at 0>}, {u'a': 0, u'a1': 40,...4, u'p': 9, u'q': 7}")
   return
   Name.assign("24, {u'pi': <Generator o...nction object at 0>}, {u'a': 40, u'a1': 40...4, u'p': 9, u'q': 7}")
   return
   Name.assign("280, {u'pi': <Generator o...nction object at 0>}, {u'a': 40, u'a1': 40...4, u'p': 9, u'q': 7}")
   return
   Name.assign("204, {u'pi': <Generator o...nction object at 0>}, {u'a': 40, u'a1': 28...4, u'p': 9, u'q': 7}")
   return
  return
 return
 Node.geneval("{u'pi': <Generator o...nction object at 0>}, {u'a': 40, u'a1': 28...4, u'p': 9, u'q': 7}")
 return <generator object at 0>
 Assign.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 40, u'a1': 28...4, u'p': 9, u'q': 7}")
  Exprs.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 40, u'a1': 28...4, u'p': 9, u'q': 7}")
   Binop.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 40, u'a1': 28...4, u'p': 9, u'q': 7}")
    Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 40, u'a1': 28...4, u'p': 9, u'q': 7}")
    return 40
    Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 40, u'a1': 28...4, u'p': 9, u'q': 7}")
    return 24
   return 1
   Binop.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 40, u'a1': 28...4, u'p': 9, u'q': 7}")
    Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 40, u'a1': 28...4, u'p': 9, u'q': 7}")
    return 280
    Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 40, u'a1': 28...4, u'p': 9, u'q': 7}")
    return 204
   return 1
  return (1, 1)
  Exprs.assign("(1, 1), {u'pi': <Generator o...nction object at 0>}, {u'a': 40, u'a1': 28...4, u'p': 9, u'q': 7}")
   Name.assign("1, {u'pi': <Generator o...nction object at 0>}, {u'a': 40, u'a1': 28...4, u'p': 9, u'q': 7}")
   return
   Name.assign("1, {u'pi': <Generator o...nction object at 0>}, {u'a': 40, u'a1': 28...4, u'p': 9, u'q': 7}")
   return
  return
 return
 While.geneval("{u'pi': <Generator o...nction object at 0>}, {u'a': 40, u'a1': 28...4, u'p': 9, u'q': 7}")
 return <generator object at 0>
 Binop.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 40, u'a1': 28...4, u'p': 9, u'q': 7}")
  Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 40, u'a1': 28...4, u'p': 9, u'q': 7}")
  return 1
  Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 40, u'a1': 28...4, u'p': 9, u'q': 7}")
  return 1
 return True
 Yield.geneval("{u'pi': <Generator o...nction object at 0>}, {u'a': 40, u'a1': 28...4, u'p': 9, u'q': 7}")
 return <generator object at 0>
 Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 40, u'a1': 28...4, u'p': 9, u'q': 7}")
 return 1
 Node.geneval("{u'pi': <Generator o...nction object at 0>}, {u'a': 40, u'a1': 28...4, u'p': 9, u'q': 7}")
 return <generator object at 0>
 Assign.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 40, u'a1': 28...4, u'p': 9, u'q': 7}")
  Exprs.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 40, u'a1': 28...4, u'p': 9, u'q': 7}")
   Binop.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 40, u'a1': 28...4, u'p': 9, u'q': 7}")
    Literal.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 40, u'a1': 28...4, u'p': 9, u'q': 7}")
    return 10
    Binop.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 40, u'a1': 28...4, u'p': 9, u'q': 7}")
     Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 40, u'a1': 28...4, u'p': 9, u'q': 7}")
     return 40
     Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 40, u'a1': 28...4, u'p': 9, u'q': 7}")
     return 24
    return 16
   return 160
   Binop.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 40, u'a1': 28...4, u'p': 9, u'q': 7}")
    Literal.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 40, u'a1': 28...4, u'p': 9, u'q': 7}")
    return 10
    Binop.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 40, u'a1': 28...4, u'p': 9, u'q': 7}")
     Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 40, u'a1': 28...4, u'p': 9, u'q': 7}")
     return 280
     Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 40, u'a1': 28...4, u'p': 9, u'q': 7}")
     return 204
    return 76
   return 760
  return (160, 760)
  Exprs.assign("(160, 760), {u'pi': <Generator o...nction object at 0>}, {u'a': 40, u'a1': 28...4, u'p': 9, u'q': 7}")
   Name.assign("160, {u'pi': <Generator o...nction object at 0>}, {u'a': 40, u'a1': 28...4, u'p': 9, u'q': 7}")
   return
   Name.assign("760, {u'pi': <Generator o...nction object at 0>}, {u'a': 160, u'a1': 2...4, u'p': 9, u'q': 7}")
   return
  return
 return
 Node.geneval("{u'pi': <Generator o...nction object at 0>}, {u'a': 160, u'a1': 7...4, u'p': 9, u'q': 7}")
 return <generator object at 0>
 Assign.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 160, u'a1': 7...4, u'p': 9, u'q': 7}")
  Exprs.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 160, u'a1': 7...4, u'p': 9, u'q': 7}")
   Binop.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 160, u'a1': 7...4, u'p': 9, u'q': 7}")
    Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 160, u'a1': 7...4, u'p': 9, u'q': 7}")
    return 160
    Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 160, u'a1': 7...4, u'p': 9, u'q': 7}")
    return 24
   return 6
   Binop.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 160, u'a1': 7...4, u'p': 9, u'q': 7}")
    Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 160, u'a1': 7...4, u'p': 9, u'q': 7}")
    return 760
    Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 160, u'a1': 7...4, u'p': 9, u'q': 7}")
    return 204
   return 3
  return (6, 3)
  Exprs.assign("(6, 3), {u'pi': <Generator o...nction object at 0>}, {u'a': 160, u'a1': 7...4, u'p': 9, u'q': 7}")
   Name.assign("6, {u'pi': <Generator o...nction object at 0>}, {u'a': 160, u'a1': 7...4, u'p': 9, u'q': 7}")
   return
   Name.assign("3, {u'pi': <Generator o...nction object at 0>}, {u'a': 160, u'a1': 7...4, u'p': 9, u'q': 7}")
   return
  return
 return
 Binop.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 160, u'a1': 7...4, u'p': 9, u'q': 7}")
  Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 160, u'a1': 7...4, u'p': 9, u'q': 7}")
  return 6
  Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 160, u'a1': 7...4, u'p': 9, u'q': 7}")
  return 3
 return False
 Literal.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 160, u'a1': 7...4, u'p': 9, u'q': 7}")
 return 1
 Node.geneval("{u'pi': <Generator o...nction object at 0>}, {u'a': 160, u'a1': 7...4, u'p': 9, u'q': 7}")
 return <generator object at 0>
 Assign.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 160, u'a1': 7...4, u'p': 9, u'q': 7}")
  Exprs.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 160, u'a1': 7...4, u'p': 9, u'q': 7}")
   Binop.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 160, u'a1': 7...4, u'p': 9, u'q': 7}")
    Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 160, u'a1': 7...4, u'p': 9, u'q': 7}")
    return 4
    Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 160, u'a1': 7...4, u'p': 9, u'q': 7}")
    return 4
   return 16
   Binop.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 160, u'a1': 7...4, u'p': 9, u'q': 7}")
    Binop.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 160, u'a1': 7...4, u'p': 9, u'q': 7}")
     Literal.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 160, u'a1': 7...4, u'p': 9, u'q': 7}")
     return 2
     Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 160, u'a1': 7...4, u'p': 9, u'q': 7}")
     return 4
    return 8
    Literal.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 160, u'a1': 7...4, u'p': 9, u'q': 7}")
    return 1
   return 9
   Binop.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 160, u'a1': 7...4, u'p': 9, u'q': 7}")
    Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 160, u'a1': 7...4, u'p': 9, u'q': 7}")
    return 4
    Literal.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 160, u'a1': 7...4, u'p': 9, u'q': 7}")
    return 1
   return 5
  return (16, 9, 5)
  Exprs.assign("(16, 9, 5), {u'pi': <Generator o...nction object at 0>}, {u'a': 160, u'a1': 7...4, u'p': 9, u'q': 7}")
   Name.assign("16, {u'pi': <Generator o...nction object at 0>}, {u'a': 160, u'a1': 7...4, u'p': 9, u'q': 7}")
   return
   Name.assign("9, {u'pi': <Generator o...nction object at 0>}, {u'a': 160, u'a1': 7..., u'p': 16, u'q': 7}")
   return
   Name.assign("5, {u'pi': <Generator o...nction object at 0>}, {u'a': 160, u'a1': 7..., u'p': 16, u'q': 9}")
   return
  return
 return
 Node.geneval("{u'pi': <Generator o...nction object at 0>}, {u'a': 160, u'a1': 7..., u'p': 16, u'q': 9}")
 return <generator object at 0>
 Assign.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 160, u'a1': 7..., u'p': 16, u'q': 9}")
  Exprs.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 160, u'a1': 7..., u'p': 16, u'q': 9}")
   Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 160, u'a1': 7..., u'p': 16, u'q': 9}")
   return 760
   Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 160, u'a1': 7..., u'p': 16, u'q': 9}")
   return 204
   Binop.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 160, u'a1': 7..., u'p': 16, u'q': 9}")
    Binop.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 160, u'a1': 7..., u'p': 16, u'q': 9}")
     Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 160, u'a1': 7..., u'p': 16, u'q': 9}")
     return 16
     Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 160, u'a1': 7..., u'p': 16, u'q': 9}")
     return 160
    return 2560
    Binop.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 160, u'a1': 7..., u'p': 16, u'q': 9}")
     Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 160, u'a1': 7..., u'p': 16, u'q': 9}")
     return 9
     Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 160, u'a1': 7..., u'p': 16, u'q': 9}")
     return 760
    return 6840
   return 9400
   Binop.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 160, u'a1': 7..., u'p': 16, u'q': 9}")
    Binop.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 160, u'a1': 7..., u'p': 16, u'q': 9}")
     Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 160, u'a1': 7..., u'p': 16, u'q': 9}")
     return 16
     Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 160, u'a1': 7..., u'p': 16, u'q': 9}")
     return 24
    return 384
    Binop.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 160, u'a1': 7..., u'p': 16, u'q': 9}")
     Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 160, u'a1': 7..., u'p': 16, u'q': 9}")
     return 9
     Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 160, u'a1': 7..., u'p': 16, u'q': 9}")
     return 204
    return 1836
   return 2220
  return (760, 204, 9400, 2220)
  Exprs.assign("(760, 204, 9400, 2220), {u'pi': <Generator o...nction object at 0>}, {u'a': 160, u'a1': 7..., u'p': 16, u'q': 9}")
   Name.assign("760, {u'pi': <Generator o...nction object at 0>}, {u'a': 160, u'a1': 7..., u'p': 16, u'q': 9}")
   return
   Name.assign("204, {u'pi': <Generator o...nction object at 0>}, {u'a': 760, u'a1': 7..., u'p': 16, u'q': 9}")
   return
   Name.assign("9400, {u'pi': <Generator o...nction object at 0>}, {u'a': 760, u'a1': 7..., u'p': 16, u'q': 9}")
   return
   Name.assign("2220, {u'pi': <Generator o...nction object at 0>}, {u'a': 760, u'a1': 9..., u'p': 16, u'q': 9}")
   return
  return
 return
 Node.geneval("{u'pi': <Generator o...nction object at 0>}, {u'a': 760, u'a1': 9..., u'p': 16, u'q': 9}")
 return <generator object at 0>
 Assign.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 760, u'a1': 9..., u'p': 16, u'q': 9}")
  Exprs.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 760, u'a1': 9..., u'p': 16, u'q': 9}")
   Binop.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 760, u'a1': 9..., u'p': 16, u'q': 9}")
    Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 760, u'a1': 9..., u'p': 16, u'q': 9}")
    return 760
    Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 760, u'a1': 9..., u'p': 16, u'q': 9}")
    return 204
   return 3
   Binop.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 760, u'a1': 9..., u'p': 16, u'q': 9}")
    Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 760, u'a1': 9..., u'p': 16, u'q': 9}")
    return 9400
    Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 760, u'a1': 9..., u'p': 16, u'q': 9}")
    return 2220
   return 4
  return (3, 4)
  Exprs.assign("(3, 4), {u'pi': <Generator o...nction object at 0>}, {u'a': 760, u'a1': 9..., u'p': 16, u'q': 9}")
   Name.assign("3, {u'pi': <Generator o...nction object at 0>}, {u'a': 760, u'a1': 9..., u'p': 16, u'q': 9}")
   return
   Name.assign("4, {u'pi': <Generator o...nction object at 0>}, {u'a': 760, u'a1': 9..., u'p': 16, u'q': 9}")
   return
  return
 return
 While.geneval("{u'pi': <Generator o...nction object at 0>}, {u'a': 760, u'a1': 9..., u'p': 16, u'q': 9}")
 return <generator object at 0>
 Binop.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 760, u'a1': 9..., u'p': 16, u'q': 9}")
  Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 760, u'a1': 9..., u'p': 16, u'q': 9}")
  return 3
  Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 760, u'a1': 9..., u'p': 16, u'q': 9}")
  return 4
 return False
 Literal.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 760, u'a1': 9..., u'p': 16, u'q': 9}")
 return 1
 Node.geneval("{u'pi': <Generator o...nction object at 0>}, {u'a': 760, u'a1': 9..., u'p': 16, u'q': 9}")
 return <generator object at 0>
 Assign.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 760, u'a1': 9..., u'p': 16, u'q': 9}")
  Exprs.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 760, u'a1': 9..., u'p': 16, u'q': 9}")
   Binop.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 760, u'a1': 9..., u'p': 16, u'q': 9}")
    Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 760, u'a1': 9..., u'p': 16, u'q': 9}")
    return 5
    Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 760, u'a1': 9..., u'p': 16, u'q': 9}")
    return 5
   return 25
   Binop.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 760, u'a1': 9..., u'p': 16, u'q': 9}")
    Binop.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 760, u'a1': 9..., u'p': 16, u'q': 9}")
     Literal.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 760, u'a1': 9..., u'p': 16, u'q': 9}")
     return 2
     Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 760, u'a1': 9..., u'p': 16, u'q': 9}")
     return 5
    return 10
    Literal.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 760, u'a1': 9..., u'p': 16, u'q': 9}")
    return 1
   return 11
   Binop.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 760, u'a1': 9..., u'p': 16, u'q': 9}")
    Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 760, u'a1': 9..., u'p': 16, u'q': 9}")
    return 5
    Literal.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 760, u'a1': 9..., u'p': 16, u'q': 9}")
    return 1
   return 6
  return (25, 11, 6)
  Exprs.assign("(25, 11, 6), {u'pi': <Generator o...nction object at 0>}, {u'a': 760, u'a1': 9..., u'p': 16, u'q': 9}")
   Name.assign("25, {u'pi': <Generator o...nction object at 0>}, {u'a': 760, u'a1': 9..., u'p': 16, u'q': 9}")
   return
   Name.assign("11, {u'pi': <Generator o...nction object at 0>}, {u'a': 760, u'a1': 9..., u'p': 25, u'q': 9}")
   return
   Name.assign("6, {u'pi': <Generator o...nction object at 0>}, {u'a': 760, u'a1': 9... u'p': 25, u'q': 11}")
   return
  return
 return
 Node.geneval("{u'pi': <Generator o...nction object at 0>}, {u'a': 760, u'a1': 9... u'p': 25, u'q': 11}")
 return <generator object at 0>
 Assign.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 760, u'a1': 9... u'p': 25, u'q': 11}")
  Exprs.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 760, u'a1': 9... u'p': 25, u'q': 11}")
   Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 760, u'a1': 9... u'p': 25, u'q': 11}")
   return 9400
   Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 760, u'a1': 9... u'p': 25, u'q': 11}")
   return 2220
   Binop.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 760, u'a1': 9... u'p': 25, u'q': 11}")
    Binop.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 760, u'a1': 9... u'p': 25, u'q': 11}")
     Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 760, u'a1': 9... u'p': 25, u'q': 11}")
     return 25
     Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 760, u'a1': 9... u'p': 25, u'q': 11}")
     return 760
    return 19000
    Binop.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 760, u'a1': 9... u'p': 25, u'q': 11}")
     Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 760, u'a1': 9... u'p': 25, u'q': 11}")
     return 11
     Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 760, u'a1': 9... u'p': 25, u'q': 11}")
     return 9400
    return 103400
   return 122400
   Binop.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 760, u'a1': 9... u'p': 25, u'q': 11}")
    Binop.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 760, u'a1': 9... u'p': 25, u'q': 11}")
     Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 760, u'a1': 9... u'p': 25, u'q': 11}")
     return 25
     Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 760, u'a1': 9... u'p': 25, u'q': 11}")
     return 204
    return 5100
    Binop.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 760, u'a1': 9... u'p': 25, u'q': 11}")
     Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 760, u'a1': 9... u'p': 25, u'q': 11}")
     return 11
     Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 760, u'a1': 9... u'p': 25, u'q': 11}")
     return 2220
    return 24420
   return 29520
  return (9400, 2220, 122400, 29520)
  Exprs.assign("(9400, 2220, 122400, 29520), {u'pi': <Generator o...nction object at 0>}, {u'a': 760, u'a1': 9... u'p': 25, u'q': 11}")
   Name.assign("9400, {u'pi': <Generator o...nction object at 0>}, {u'a': 760, u'a1': 9... u'p': 25, u'q': 11}")
   return
   Name.assign("2220, {u'pi': <Generator o...nction object at 0>}, {u'a': 9400, u'a1': ... u'p': 25, u'q': 11}")
   return
   Name.assign("122400, {u'pi': <Generator o...nction object at 0>}, {u'a': 9400, u'a1': ... u'p': 25, u'q': 11}")
   return
   Name.assign("29520, {u'pi': <Generator o...nction object at 0>}, {u'a': 9400, u'a1': ... u'p': 25, u'q': 11}")
   return
  return
 return
 Node.geneval("{u'pi': <Generator o...nction object at 0>}, {u'a': 9400, u'a1': ... u'p': 25, u'q': 11}")
 return <generator object at 0>
 Assign.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 9400, u'a1': ... u'p': 25, u'q': 11}")
  Exprs.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 9400, u'a1': ... u'p': 25, u'q': 11}")
   Binop.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 9400, u'a1': ... u'p': 25, u'q': 11}")
    Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 9400, u'a1': ... u'p': 25, u'q': 11}")
    return 9400
    Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 9400, u'a1': ... u'p': 25, u'q': 11}")
    return 2220
   return 4
   Binop.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 9400, u'a1': ... u'p': 25, u'q': 11}")
    Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 9400, u'a1': ... u'p': 25, u'q': 11}")
    return 122400
    Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 9400, u'a1': ... u'p': 25, u'q': 11}")
    return 29520
   return 4
  return (4, 4)
  Exprs.assign("(4, 4), {u'pi': <Generator o...nction object at 0>}, {u'a': 9400, u'a1': ... u'p': 25, u'q': 11}")
   Name.assign("4, {u'pi': <Generator o...nction object at 0>}, {u'a': 9400, u'a1': ... u'p': 25, u'q': 11}")
   return
   Name.assign("4, {u'pi': <Generator o...nction object at 0>}, {u'a': 9400, u'a1': ... u'p': 25, u'q': 11}")
   return
  return
 return
 While.geneval("{u'pi': <Generator o...nction object at 0>}, {u'a': 9400, u'a1': ... u'p': 25, u'q': 11}")
 return <generator object at 0>
 Binop.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 9400, u'a1': ... u'p': 25, u'q': 11}")
  Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 9400, u'a1': ... u'p': 25, u'q': 11}")
  return 4
  Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 9400, u'a1': ... u'p': 25, u'q': 11}")
  return 4
 return True
 Yield.geneval("{u'pi': <Generator o...nction object at 0>}, {u'a': 9400, u'a1': ... u'p': 25, u'q': 11}")
 return <generator object at 0>
 Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 9400, u'a1': ... u'p': 25, u'q': 11}")
 return 4
 Node.geneval("{u'pi': <Generator o...nction object at 0>}, {u'a': 9400, u'a1': ... u'p': 25, u'q': 11}")
 return <generator object at 0>
 Assign.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 9400, u'a1': ... u'p': 25, u'q': 11}")
  Exprs.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 9400, u'a1': ... u'p': 25, u'q': 11}")
   Binop.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 9400, u'a1': ... u'p': 25, u'q': 11}")
    Literal.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 9400, u'a1': ... u'p': 25, u'q': 11}")
    return 10
    Binop.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 9400, u'a1': ... u'p': 25, u'q': 11}")
     Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 9400, u'a1': ... u'p': 25, u'q': 11}")
     return 9400
     Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 9400, u'a1': ... u'p': 25, u'q': 11}")
     return 2220
    return 520
   return 5200
   Binop.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 9400, u'a1': ... u'p': 25, u'q': 11}")
    Literal.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 9400, u'a1': ... u'p': 25, u'q': 11}")
    return 10
    Binop.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 9400, u'a1': ... u'p': 25, u'q': 11}")
     Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 9400, u'a1': ... u'p': 25, u'q': 11}")
     return 122400
     Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 9400, u'a1': ... u'p': 25, u'q': 11}")
     return 29520
    return 4320
   return 43200
  return (5200, 43200)
  Exprs.assign("(5200, 43200), {u'pi': <Generator o...nction object at 0>}, {u'a': 9400, u'a1': ... u'p': 25, u'q': 11}")
   Name.assign("5200, {u'pi': <Generator o...nction object at 0>}, {u'a': 9400, u'a1': ... u'p': 25, u'q': 11}")
   return
   Name.assign("43200, {u'pi': <Generator o...nction object at 0>}, {u'a': 5200, u'a1': ... u'p': 25, u'q': 11}")
   return
  return
 return
 Node.geneval("{u'pi': <Generator o...nction object at 0>}, {u'a': 5200, u'a1': ... u'p': 25, u'q': 11}")
 return <generator object at 0>
 Assign.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 5200, u'a1': ... u'p': 25, u'q': 11}")
  Exprs.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 5200, u'a1': ... u'p': 25, u'q': 11}")
   Binop.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 5200, u'a1': ... u'p': 25, u'q': 11}")
    Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 5200, u'a1': ... u'p': 25, u'q': 11}")
    return 5200
    Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 5200, u'a1': ... u'p': 25, u'q': 11}")
    return 2220
   return 2
   Binop.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 5200, u'a1': ... u'p': 25, u'q': 11}")
    Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 5200, u'a1': ... u'p': 25, u'q': 11}")
    return 43200
    Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 5200, u'a1': ... u'p': 25, u'q': 11}")
    return 29520
   return 1
  return (2, 1)
  Exprs.assign("(2, 1), {u'pi': <Generator o...nction object at 0>}, {u'a': 5200, u'a1': ... u'p': 25, u'q': 11}")
   Name.assign("2, {u'pi': <Generator o...nction object at 0>}, {u'a': 5200, u'a1': ... u'p': 25, u'q': 11}")
   return
   Name.assign("1, {u'pi': <Generator o...nction object at 0>}, {u'a': 5200, u'a1': ... u'p': 25, u'q': 11}")
   return
  return
 return
 Binop.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 5200, u'a1': ... u'p': 25, u'q': 11}")
  Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 5200, u'a1': ... u'p': 25, u'q': 11}")
  return 2
  Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 5200, u'a1': ... u'p': 25, u'q': 11}")
  return 1
 return False
 Literal.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 5200, u'a1': ... u'p': 25, u'q': 11}")
 return 1
 Node.geneval("{u'pi': <Generator o...nction object at 0>}, {u'a': 5200, u'a1': ... u'p': 25, u'q': 11}")
 return <generator object at 0>
 Assign.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 5200, u'a1': ... u'p': 25, u'q': 11}")
  Exprs.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 5200, u'a1': ... u'p': 25, u'q': 11}")
   Binop.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 5200, u'a1': ... u'p': 25, u'q': 11}")
    Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 5200, u'a1': ... u'p': 25, u'q': 11}")
    return 6
    Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 5200, u'a1': ... u'p': 25, u'q': 11}")
    return 6
   return 36
   Binop.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 5200, u'a1': ... u'p': 25, u'q': 11}")
    Binop.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 5200, u'a1': ... u'p': 25, u'q': 11}")
     Literal.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 5200, u'a1': ... u'p': 25, u'q': 11}")
     return 2
     Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 5200, u'a1': ... u'p': 25, u'q': 11}")
     return 6
    return 12
    Literal.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 5200, u'a1': ... u'p': 25, u'q': 11}")
    return 1
   return 13
   Binop.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 5200, u'a1': ... u'p': 25, u'q': 11}")
    Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 5200, u'a1': ... u'p': 25, u'q': 11}")
    return 6
    Literal.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 5200, u'a1': ... u'p': 25, u'q': 11}")
    return 1
   return 7
  return (36, 13, 7)
  Exprs.assign("(36, 13, 7), {u'pi': <Generator o...nction object at 0>}, {u'a': 5200, u'a1': ... u'p': 25, u'q': 11}")
   Name.assign("36, {u'pi': <Generator o...nction object at 0>}, {u'a': 5200, u'a1': ... u'p': 25, u'q': 11}")
   return
   Name.assign("13, {u'pi': <Generator o...nction object at 0>}, {u'a': 5200, u'a1': ... u'p': 36, u'q': 11}")
   return
   Name.assign("7, {u'pi': <Generator o...nction object at 0>}, {u'a': 5200, u'a1': ... u'p': 36, u'q': 13}")
   return
  return
 return
 Node.geneval("{u'pi': <Generator o...nction object at 0>}, {u'a': 5200, u'a1': ... u'p': 36, u'q': 13}")
 return <generator object at 0>
 Assign.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 5200, u'a1': ... u'p': 36, u'q': 13}")
  Exprs.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 5200, u'a1': ... u'p': 36, u'q': 13}")
   Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 5200, u'a1': ... u'p': 36, u'q': 13}")
   return 43200
   Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 5200, u'a1': ... u'p': 36, u'q': 13}")
   return 29520
   Binop.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 5200, u'a1': ... u'p': 36, u'q': 13}")
    Binop.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 5200, u'a1': ... u'p': 36, u'q': 13}")
     Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 5200, u'a1': ... u'p': 36, u'q': 13}")
     return 36
     Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 5200, u'a1': ... u'p': 36, u'q': 13}")
     return 5200
    return 187200
    Binop.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 5200, u'a1': ... u'p': 36, u'q': 13}")
     Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 5200, u'a1': ... u'p': 36, u'q': 13}")
     return 13
     Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 5200, u'a1': ... u'p': 36, u'q': 13}")
     return 43200
    return 561600
   return 748800
   Binop.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 5200, u'a1': ... u'p': 36, u'q': 13}")
    Binop.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 5200, u'a1': ... u'p': 36, u'q': 13}")
     Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 5200, u'a1': ... u'p': 36, u'q': 13}")
     return 36
     Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 5200, u'a1': ... u'p': 36, u'q': 13}")
     return 2220
    return 79920
    Binop.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 5200, u'a1': ... u'p': 36, u'q': 13}")
     Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 5200, u'a1': ... u'p': 36, u'q': 13}")
     return 13
     Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 5200, u'a1': ... u'p': 36, u'q': 13}")
     return 29520
    return 383760
   return 463680
  return (43200, 29520, 748800, 463680)
  Exprs.assign("(43200, 29520, 748800, 463680), {u'pi': <Generator o...nction object at 0>}, {u'a': 5200, u'a1': ... u'p': 36, u'q': 13}")
   Name.assign("43200, {u'pi': <Generator o...nction object at 0>}, {u'a': 5200, u'a1': ... u'p': 36, u'q': 13}")
   return
   Name.assign("29520, {u'pi': <Generator o...nction object at 0>}, {u'a': 43200, u'a1':... u'p': 36, u'q': 13}")
   return
   Name.assign("748800, {u'pi': <Generator o...nction object at 0>}, {u'a': 43200, u'a1':... u'p': 36, u'q': 13}")
   return
   Name.assign("463680, {u'pi': <Generator o...nction object at 0>}, {u'a': 43200, u'a1':... u'p': 36, u'q': 13}")
   return
  return
 return
 Node.geneval("{u'pi': <Generator o...nction object at 0>}, {u'a': 43200, u'a1':... u'p': 36, u'q': 13}")
 return <generator object at 0>
 Assign.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 43200, u'a1':... u'p': 36, u'q': 13}")
  Exprs.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 43200, u'a1':... u'p': 36, u'q': 13}")
   Binop.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 43200, u'a1':... u'p': 36, u'q': 13}")
    Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 43200, u'a1':... u'p': 36, u'q': 13}")
    return 43200
    Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 43200, u'a1':... u'p': 36, u'q': 13}")
    return 29520
   return 1
   Binop.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 43200, u'a1':... u'p': 36, u'q': 13}")
    Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 43200, u'a1':... u'p': 36, u'q': 13}")
    return 748800
    Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 43200, u'a1':... u'p': 36, u'q': 13}")
    return 463680
   return 1
  return (1, 1)
  Exprs.assign("(1, 1), {u'pi': <Generator o...nction object at 0>}, {u'a': 43200, u'a1':... u'p': 36, u'q': 13}")
   Name.assign("1, {u'pi': <Generator o...nction object at 0>}, {u'a': 43200, u'a1':... u'p': 36, u'q': 13}")
   return
   Name.assign("1, {u'pi': <Generator o...nction object at 0>}, {u'a': 43200, u'a1':... u'p': 36, u'q': 13}")
   return
  return
 return
 While.geneval("{u'pi': <Generator o...nction object at 0>}, {u'a': 43200, u'a1':... u'p': 36, u'q': 13}")
 return <generator object at 0>
 Binop.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 43200, u'a1':... u'p': 36, u'q': 13}")
  Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 43200, u'a1':... u'p': 36, u'q': 13}")
  return 1
  Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 43200, u'a1':... u'p': 36, u'q': 13}")
  return 1
 return True
 Yield.geneval("{u'pi': <Generator o...nction object at 0>}, {u'a': 43200, u'a1':... u'p': 36, u'q': 13}")
 return <generator object at 0>
 Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 43200, u'a1':... u'p': 36, u'q': 13}")
 return 1
 Node.geneval("{u'pi': <Generator o...nction object at 0>}, {u'a': 43200, u'a1':... u'p': 36, u'q': 13}")
 return <generator object at 0>
 Assign.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 43200, u'a1':... u'p': 36, u'q': 13}")
  Exprs.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 43200, u'a1':... u'p': 36, u'q': 13}")
   Binop.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 43200, u'a1':... u'p': 36, u'q': 13}")
    Literal.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 43200, u'a1':... u'p': 36, u'q': 13}")
    return 10
    Binop.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 43200, u'a1':... u'p': 36, u'q': 13}")
     Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 43200, u'a1':... u'p': 36, u'q': 13}")
     return 43200
     Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 43200, u'a1':... u'p': 36, u'q': 13}")
     return 29520
    return 13680
   return 136800
   Binop.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 43200, u'a1':... u'p': 36, u'q': 13}")
    Literal.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 43200, u'a1':... u'p': 36, u'q': 13}")
    return 10
    Binop.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 43200, u'a1':... u'p': 36, u'q': 13}")
     Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 43200, u'a1':... u'p': 36, u'q': 13}")
     return 748800
     Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 43200, u'a1':... u'p': 36, u'q': 13}")
     return 463680
    return 285120
   return 2851200
  return (136800, 2851200)
  Exprs.assign("(136800, 2851200), {u'pi': <Generator o...nction object at 0>}, {u'a': 43200, u'a1':... u'p': 36, u'q': 13}")
   Name.assign("136800, {u'pi': <Generator o...nction object at 0>}, {u'a': 43200, u'a1':... u'p': 36, u'q': 13}")
   return
   Name.assign("2851200, {u'pi': <Generator o...nction object at 0>}, {u'a': 136800, u'a1'... u'p': 36, u'q': 13}")
   return
  return
 return
 Node.geneval("{u'pi': <Generator o...nction object at 0>}, {u'a': 136800, u'a1'... u'p': 36, u'q': 13}")
 return <generator object at 0>
 Assign.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 136800, u'a1'... u'p': 36, u'q': 13}")
  Exprs.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 136800, u'a1'... u'p': 36, u'q': 13}")
   Binop.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 136800, u'a1'... u'p': 36, u'q': 13}")
    Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 136800, u'a1'... u'p': 36, u'q': 13}")
    return 136800
    Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 136800, u'a1'... u'p': 36, u'q': 13}")
    return 29520
   return 4
   Binop.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 136800, u'a1'... u'p': 36, u'q': 13}")
    Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 136800, u'a1'... u'p': 36, u'q': 13}")
    return 2851200
    Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 136800, u'a1'... u'p': 36, u'q': 13}")
    return 463680
   return 6
  return (4, 6)
  Exprs.assign("(4, 6), {u'pi': <Generator o...nction object at 0>}, {u'a': 136800, u'a1'... u'p': 36, u'q': 13}")
   Name.assign("4, {u'pi': <Generator o...nction object at 0>}, {u'a': 136800, u'a1'... u'p': 36, u'q': 13}")
   return
   Name.assign("6, {u'pi': <Generator o...nction object at 0>}, {u'a': 136800, u'a1'... u'p': 36, u'q': 13}")
   return
  return
 return
 Binop.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 136800, u'a1'... u'p': 36, u'q': 13}")
  Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 136800, u'a1'... u'p': 36, u'q': 13}")
  return 4
  Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 136800, u'a1'... u'p': 36, u'q': 13}")
  return 6
 return False
 Literal.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 136800, u'a1'... u'p': 36, u'q': 13}")
 return 1
 Node.geneval("{u'pi': <Generator o...nction object at 0>}, {u'a': 136800, u'a1'... u'p': 36, u'q': 13}")
 return <generator object at 0>
 Assign.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 136800, u'a1'... u'p': 36, u'q': 13}")
  Exprs.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 136800, u'a1'... u'p': 36, u'q': 13}")
   Binop.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 136800, u'a1'... u'p': 36, u'q': 13}")
    Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 136800, u'a1'... u'p': 36, u'q': 13}")
    return 7
    Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 136800, u'a1'... u'p': 36, u'q': 13}")
    return 7
   return 49
   Binop.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 136800, u'a1'... u'p': 36, u'q': 13}")
    Binop.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 136800, u'a1'... u'p': 36, u'q': 13}")
     Literal.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 136800, u'a1'... u'p': 36, u'q': 13}")
     return 2
     Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 136800, u'a1'... u'p': 36, u'q': 13}")
     return 7
    return 14
    Literal.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 136800, u'a1'... u'p': 36, u'q': 13}")
    return 1
   return 15
   Binop.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 136800, u'a1'... u'p': 36, u'q': 13}")
    Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 136800, u'a1'... u'p': 36, u'q': 13}")
    return 7
    Literal.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 136800, u'a1'... u'p': 36, u'q': 13}")
    return 1
   return 8
  return (49, 15, 8)
  Exprs.assign("(49, 15, 8), {u'pi': <Generator o...nction object at 0>}, {u'a': 136800, u'a1'... u'p': 36, u'q': 13}")
   Name.assign("49, {u'pi': <Generator o...nction object at 0>}, {u'a': 136800, u'a1'... u'p': 36, u'q': 13}")
   return
   Name.assign("15, {u'pi': <Generator o...nction object at 0>}, {u'a': 136800, u'a1'... u'p': 49, u'q': 13}")
   return
   Name.assign("8, {u'pi': <Generator o...nction object at 0>}, {u'a': 136800, u'a1'... u'p': 49, u'q': 15}")
   return
  return
 return
 Node.geneval("{u'pi': <Generator o...nction object at 0>}, {u'a': 136800, u'a1'... u'p': 49, u'q': 15}")
 return <generator object at 0>
 Assign.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 136800, u'a1'... u'p': 49, u'q': 15}")
  Exprs.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 136800, u'a1'... u'p': 49, u'q': 15}")
   Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 136800, u'a1'... u'p': 49, u'q': 15}")
   return 2851200
   Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 136800, u'a1'... u'p': 49, u'q': 15}")
   return 463680
   Binop.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 136800, u'a1'... u'p': 49, u'q': 15}")
    Binop.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 136800, u'a1'... u'p': 49, u'q': 15}")
     Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 136800, u'a1'... u'p': 49, u'q': 15}")
     return 49
     Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 136800, u'a1'... u'p': 49, u'q': 15}")
     return 136800
    return 6703200
    Binop.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 136800, u'a1'... u'p': 49, u'q': 15}")
     Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 136800, u'a1'... u'p': 49, u'q': 15}")
     return 15
     Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 136800, u'a1'... u'p': 49, u'q': 15}")
     return 2851200
    return 42768000
   return 49471200
   Binop.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 136800, u'a1'... u'p': 49, u'q': 15}")
    Binop.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 136800, u'a1'... u'p': 49, u'q': 15}")
     Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 136800, u'a1'... u'p': 49, u'q': 15}")
     return 49
     Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 136800, u'a1'... u'p': 49, u'q': 15}")
     return 29520
    return 1446480
    Binop.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 136800, u'a1'... u'p': 49, u'q': 15}")
     Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 136800, u'a1'... u'p': 49, u'q': 15}")
     return 15
     Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 136800, u'a1'... u'p': 49, u'q': 15}")
     return 463680
    return 6955200
   return 8401680
  return (2851200, 463680, 49471200, 8401680)
  Exprs.assign("(2851200, 463680, 49471200, 8401680), {u'pi': <Generator o...nction object at 0>}, {u'a': 136800, u'a1'... u'p': 49, u'q': 15}")
   Name.assign("2851200, {u'pi': <Generator o...nction object at 0>}, {u'a': 136800, u'a1'... u'p': 49, u'q': 15}")
   return
   Name.assign("463680, {u'pi': <Generator o...nction object at 0>}, {u'a': 2851200, u'a1... u'p': 49, u'q': 15}")
   return
   Name.assign("49471200, {u'pi': <Generator o...nction object at 0>}, {u'a': 2851200, u'a1... u'p': 49, u'q': 15}")
   return
   Name.assign("8401680, {u'pi': <Generator o...nction object at 0>}, {u'a': 2851200, u'a1... u'p': 49, u'q': 15}")
   return
  return
 return
 Node.geneval("{u'pi': <Generator o...nction object at 0>}, {u'a': 2851200, u'a1... u'p': 49, u'q': 15}")
 return <generator object at 0>
 Assign.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 2851200, u'a1... u'p': 49, u'q': 15}")
  Exprs.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 2851200, u'a1... u'p': 49, u'q': 15}")
   Binop.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 2851200, u'a1... u'p': 49, u'q': 15}")
    Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 2851200, u'a1... u'p': 49, u'q': 15}")
    return 2851200
    Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 2851200, u'a1... u'p': 49, u'q': 15}")
    return 463680
   return 6
   Binop.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 2851200, u'a1... u'p': 49, u'q': 15}")
    Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 2851200, u'a1... u'p': 49, u'q': 15}")
    return 49471200
    Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 2851200, u'a1... u'p': 49, u'q': 15}")
    return 8401680
   return 5
  return (6, 5)
  Exprs.assign("(6, 5), {u'pi': <Generator o...nction object at 0>}, {u'a': 2851200, u'a1... u'p': 49, u'q': 15}")
   Name.assign("6, {u'pi': <Generator o...nction object at 0>}, {u'a': 2851200, u'a1... u'p': 49, u'q': 15}")
   return
   Name.assign("5, {u'pi': <Generator o...nction object at 0>}, {u'a': 2851200, u'a1... u'p': 49, u'q': 15}")
   return
  return
 return
 While.geneval("{u'pi': <Generator o...nction object at 0>}, {u'a': 2851200, u'a1... u'p': 49, u'q': 15}")
 return <generator object at 0>
 Binop.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 2851200, u'a1... u'p': 49, u'q': 15}")
  Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 2851200, u'a1... u'p': 49, u'q': 15}")
  return 6
  Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 2851200, u'a1... u'p': 49, u'q': 15}")
  return 5
 return False
 Literal.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 2851200, u'a1... u'p': 49, u'q': 15}")
 return 1
 Node.geneval("{u'pi': <Generator o...nction object at 0>}, {u'a': 2851200, u'a1... u'p': 49, u'q': 15}")
 return <generator object at 0>
 Assign.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 2851200, u'a1... u'p': 49, u'q': 15}")
  Exprs.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 2851200, u'a1... u'p': 49, u'q': 15}")
   Binop.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 2851200, u'a1... u'p': 49, u'q': 15}")
    Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 2851200, u'a1... u'p': 49, u'q': 15}")
    return 8
    Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 2851200, u'a1... u'p': 49, u'q': 15}")
    return 8
   return 64
   Binop.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 2851200, u'a1... u'p': 49, u'q': 15}")
    Binop.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 2851200, u'a1... u'p': 49, u'q': 15}")
     Literal.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 2851200, u'a1... u'p': 49, u'q': 15}")
     return 2
     Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 2851200, u'a1... u'p': 49, u'q': 15}")
     return 8
    return 16
    Literal.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 2851200, u'a1... u'p': 49, u'q': 15}")
    return 1
   return 17
   Binop.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 2851200, u'a1... u'p': 49, u'q': 15}")
    Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 2851200, u'a1... u'p': 49, u'q': 15}")
    return 8
    Literal.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 2851200, u'a1... u'p': 49, u'q': 15}")
    return 1
   return 9
  return (64, 17, 9)
  Exprs.assign("(64, 17, 9), {u'pi': <Generator o...nction object at 0>}, {u'a': 2851200, u'a1... u'p': 49, u'q': 15}")
   Name.assign("64, {u'pi': <Generator o...nction object at 0>}, {u'a': 2851200, u'a1... u'p': 49, u'q': 15}")
   return
   Name.assign("17, {u'pi': <Generator o...nction object at 0>}, {u'a': 2851200, u'a1... u'p': 64, u'q': 15}")
   return
   Name.assign("9, {u'pi': <Generator o...nction object at 0>}, {u'a': 2851200, u'a1... u'p': 64, u'q': 17}")
   return
  return
 return
 Node.geneval("{u'pi': <Generator o...nction object at 0>}, {u'a': 2851200, u'a1... u'p': 64, u'q': 17}")
 return <generator object at 0>
 Assign.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 2851200, u'a1... u'p': 64, u'q': 17}")
  Exprs.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 2851200, u'a1... u'p': 64, u'q': 17}")
   Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 2851200, u'a1... u'p': 64, u'q': 17}")
   return 49471200
   Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 2851200, u'a1... u'p': 64, u'q': 17}")
   return 8401680
   Binop.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 2851200, u'a1... u'p': 64, u'q': 17}")
    Binop.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 2851200, u'a1... u'p': 64, u'q': 17}")
     Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 2851200, u'a1... u'p': 64, u'q': 17}")
     return 64
     Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 2851200, u'a1... u'p': 64, u'q': 17}")
     return 2851200
    return 182476800
    Binop.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 2851200, u'a1... u'p': 64, u'q': 17}")
     Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 2851200, u'a1... u'p': 64, u'q': 17}")
     return 17
     Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 2851200, u'a1... u'p': 64, u'q': 17}")
     return 49471200
    return 841010400
   return 1023487200
   Binop.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 2851200, u'a1... u'p': 64, u'q': 17}")
    Binop.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 2851200, u'a1... u'p': 64, u'q': 17}")
     Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 2851200, u'a1... u'p': 64, u'q': 17}")
     return 64
     Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 2851200, u'a1... u'p': 64, u'q': 17}")
     return 463680
    return 29675520
    Binop.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 2851200, u'a1... u'p': 64, u'q': 17}")
     Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 2851200, u'a1... u'p': 64, u'q': 17}")
     return 17
     Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 2851200, u'a1... u'p': 64, u'q': 17}")
     return 8401680
    return 142828560
   return 172504080
  return (49471200, 8401680, 1023487200, 172504080)
  Exprs.assign("(49471200, 8401680, 1023487200, 172504080), {u'pi': <Generator o...nction object at 0>}, {u'a': 2851200, u'a1... u'p': 64, u'q': 17}")
   Name.assign("49471200, {u'pi': <Generator o...nction object at 0>}, {u'a': 2851200, u'a1... u'p': 64, u'q': 17}")
   return
   Name.assign("8401680, {u'pi': <Generator o...nction object at 0>}, {u'a': 49471200, u'a... u'p': 64, u'q': 17}")
   return
   Name.assign("1023487200, {u'pi': <Generator o...nction object at 0>}, {u'a': 49471200, u'a... u'p': 64, u'q': 17}")
   return
   Name.assign("172504080, {u'pi': <Generator o...nction object at 0>}, {u'a': 49471200, u'a... u'p': 64, u'q': 17}")
   return
  return
 return
 Node.geneval("{u'pi': <Generator o...nction object at 0>}, {u'a': 49471200, u'a... u'p': 64, u'q': 17}")
 return <generator object at 0>
 Assign.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 49471200, u'a... u'p': 64, u'q': 17}")
  Exprs.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 49471200, u'a... u'p': 64, u'q': 17}")
   Binop.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 49471200, u'a... u'p': 64, u'q': 17}")
    Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 49471200, u'a... u'p': 64, u'q': 17}")
    return 49471200
    Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 49471200, u'a... u'p': 64, u'q': 17}")
    return 8401680
   return 5
   Binop.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 49471200, u'a... u'p': 64, u'q': 17}")
    Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 49471200, u'a... u'p': 64, u'q': 17}")
    return 1023487200
    Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 49471200, u'a... u'p': 64, u'q': 17}")
    return 172504080
   return 5
  return (5, 5)
  Exprs.assign("(5, 5), {u'pi': <Generator o...nction object at 0>}, {u'a': 49471200, u'a... u'p': 64, u'q': 17}")
   Name.assign("5, {u'pi': <Generator o...nction object at 0>}, {u'a': 49471200, u'a... u'p': 64, u'q': 17}")
   return
   Name.assign("5, {u'pi': <Generator o...nction object at 0>}, {u'a': 49471200, u'a... u'p': 64, u'q': 17}")
   return
  return
 return
 While.geneval("{u'pi': <Generator o...nction object at 0>}, {u'a': 49471200, u'a... u'p': 64, u'q': 17}")
 return <generator object at 0>
 Binop.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 49471200, u'a... u'p': 64, u'q': 17}")
  Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 49471200, u'a... u'p': 64, u'q': 17}")
  return 5
  Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 49471200, u'a... u'p': 64, u'q': 17}")
  return 5
 return True
 Yield.geneval("{u'pi': <Generator o...nction object at 0>}, {u'a': 49471200, u'a... u'p': 64, u'q': 17}")
 return <generator object at 0>
 Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 49471200, u'a... u'p': 64, u'q': 17}")
 return 5
 Node.geneval("{u'pi': <Generator o...nction object at 0>}, {u'a': 49471200, u'a... u'p': 64, u'q': 17}")
 return <generator object at 0>
 Assign.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 49471200, u'a... u'p': 64, u'q': 17}")
  Exprs.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 49471200, u'a... u'p': 64, u'q': 17}")
   Binop.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 49471200, u'a... u'p': 64, u'q': 17}")
    Literal.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 49471200, u'a... u'p': 64, u'q': 17}")
    return 10
    Binop.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 49471200, u'a... u'p': 64, u'q': 17}")
     Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 49471200, u'a... u'p': 64, u'q': 17}")
     return 49471200
     Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 49471200, u'a... u'p': 64, u'q': 17}")
     return 8401680
    return 7462800
   return 74628000
   Binop.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 49471200, u'a... u'p': 64, u'q': 17}")
    Literal.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 49471200, u'a... u'p': 64, u'q': 17}")
    return 10
    Binop.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 49471200, u'a... u'p': 64, u'q': 17}")
     Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 49471200, u'a... u'p': 64, u'q': 17}")
     return 1023487200
     Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 49471200, u'a... u'p': 64, u'q': 17}")
     return 172504080
    return 160966800
   return 1609668000
  return (74628000, 1609668000)
  Exprs.assign("(74628000, 1609668000), {u'pi': <Generator o...nction object at 0>}, {u'a': 49471200, u'a... u'p': 64, u'q': 17}")
   Name.assign("74628000, {u'pi': <Generator o...nction object at 0>}, {u'a': 49471200, u'a... u'p': 64, u'q': 17}")
   return
   Name.assign("1609668000, {u'pi': <Generator o...nction object at 0>}, {u'a': 74628000, u'a... u'p': 64, u'q': 17}")
   return
  return
 return
 Node.geneval("{u'pi': <Generator o...nction object at 0>}, {u'a': 74628000, u'a... u'p': 64, u'q': 17}")
 return <generator object at 0>
 Assign.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 74628000, u'a... u'p': 64, u'q': 17}")
  Exprs.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 74628000, u'a... u'p': 64, u'q': 17}")
   Binop.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 74628000, u'a... u'p': 64, u'q': 17}")
    Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 74628000, u'a... u'p': 64, u'q': 17}")
    return 74628000
    Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 74628000, u'a... u'p': 64, u'q': 17}")
    return 8401680
   return 8
   Binop.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 74628000, u'a... u'p': 64, u'q': 17}")
    Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 74628000, u'a... u'p': 64, u'q': 17}")
    return 1609668000
    Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 74628000, u'a... u'p': 64, u'q': 17}")
    return 172504080
   return 9
  return (8, 9)
  Exprs.assign("(8, 9), {u'pi': <Generator o...nction object at 0>}, {u'a': 74628000, u'a... u'p': 64, u'q': 17}")
   Name.assign("8, {u'pi': <Generator o...nction object at 0>}, {u'a': 74628000, u'a... u'p': 64, u'q': 17}")
   return
   Name.assign("9, {u'pi': <Generator o...nction object at 0>}, {u'a': 74628000, u'a... u'p': 64, u'q': 17}")
   return
  return
 return
 Binop.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 74628000, u'a... u'p': 64, u'q': 17}")
  Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 74628000, u'a... u'p': 64, u'q': 17}")
  return 8
  Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 74628000, u'a... u'p': 64, u'q': 17}")
  return 9
 return False
 Literal.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 74628000, u'a... u'p': 64, u'q': 17}")
 return 1
 Node.geneval("{u'pi': <Generator o...nction object at 0>}, {u'a': 74628000, u'a... u'p': 64, u'q': 17}")
 return <generator object at 0>
 Assign.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 74628000, u'a... u'p': 64, u'q': 17}")
  Exprs.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 74628000, u'a... u'p': 64, u'q': 17}")
   Binop.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 74628000, u'a... u'p': 64, u'q': 17}")
    Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 74628000, u'a... u'p': 64, u'q': 17}")
    return 9
    Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 74628000, u'a... u'p': 64, u'q': 17}")
    return 9
   return 81
   Binop.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 74628000, u'a... u'p': 64, u'q': 17}")
    Binop.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 74628000, u'a... u'p': 64, u'q': 17}")
     Literal.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 74628000, u'a... u'p': 64, u'q': 17}")
     return 2
     Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 74628000, u'a... u'p': 64, u'q': 17}")
     return 9
    return 18
    Literal.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 74628000, u'a... u'p': 64, u'q': 17}")
    return 1
   return 19
   Binop.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 74628000, u'a... u'p': 64, u'q': 17}")
    Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 74628000, u'a... u'p': 64, u'q': 17}")
    return 9
    Literal.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 74628000, u'a... u'p': 64, u'q': 17}")
    return 1
   return 10
  return (81, 19, 10)
  Exprs.assign("(81, 19, 10), {u'pi': <Generator o...nction object at 0>}, {u'a': 74628000, u'a... u'p': 64, u'q': 17}")
   Name.assign("81, {u'pi': <Generator o...nction object at 0>}, {u'a': 74628000, u'a... u'p': 64, u'q': 17}")
   return
   Name.assign("19, {u'pi': <Generator o...nction object at 0>}, {u'a': 74628000, u'a... u'p': 81, u'q': 17}")
   return
   Name.assign("10, {u'pi': <Generator o...nction object at 0>}, {u'a': 74628000, u'a... u'p': 81, u'q': 19}")
   return
  return
 return
 Node.geneval("{u'pi': <Generator o...nction object at 0>}, {u'a': 74628000, u'a... u'p': 81, u'q': 19}")
 return <generator object at 0>
 Assign.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 74628000, u'a... u'p': 81, u'q': 19}")
  Exprs.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 74628000, u'a... u'p': 81, u'q': 19}")
   Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 74628000, u'a... u'p': 81, u'q': 19}")
   return 1609668000
   Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 74628000, u'a... u'p': 81, u'q': 19}")
   return 172504080
   Binop.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 74628000, u'a... u'p': 81, u'q': 19}")
    Binop.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 74628000, u'a... u'p': 81, u'q': 19}")
     Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 74628000, u'a... u'p': 81, u'q': 19}")
     return 81
     Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 74628000, u'a... u'p': 81, u'q': 19}")
     return 74628000
    return 6044868000L
    Binop.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 74628000, u'a... u'p': 81, u'q': 19}")
     Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 74628000, u'a... u'p': 81, u'q': 19}")
     return 19
     Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 74628000, u'a... u'p': 81, u'q': 19}")
     return 1609668000
    return 30583692000L
   return 36628560000L
   Binop.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 74628000, u'a... u'p': 81, u'q': 19}")
    Binop.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 74628000, u'a... u'p': 81, u'q': 19}")
     Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 74628000, u'a... u'p': 81, u'q': 19}")
     return 81
     Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 74628000, u'a... u'p': 81, u'q': 19}")
     return 8401680
    return 680536080
    Binop.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 74628000, u'a... u'p': 81, u'q': 19}")
     Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 74628000, u'a... u'p': 81, u'q': 19}")
     return 19
     Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 74628000, u'a... u'p': 81, u'q': 19}")
     return 172504080
    return 3277577520L
   return 3958113600L
  return (1609668000, 172504080, 36628560000L, 3958113600L)
  Exprs.assign("(1609668000, 1725040...60000L, 3958113600L), {u'pi': <Generator o...nction object at 0>}, {u'a': 74628000, u'a... u'p': 81, u'q': 19}")
   Name.assign("1609668000, {u'pi': <Generator o...nction object at 0>}, {u'a': 74628000, u'a... u'p': 81, u'q': 19}")
   return
   Name.assign("172504080, {u'pi': <Generator o...nction object at 0>}, {u'a': 1609668000, u... u'p': 81, u'q': 19}")
   return
   Name.assign("36628560000L, {u'pi': <Generator o...nction object at 0>}, {u'a': 1609668000, u... u'p': 81, u'q': 19}")
   return
   Name.assign("3958113600L, {u'pi': <Generator o...nction object at 0>}, {u'a': 1609668000, u... u'p': 81, u'q': 19}")
   return
  return
 return
 Node.geneval("{u'pi': <Generator o...nction object at 0>}, {u'a': 1609668000, u... u'p': 81, u'q': 19}")
 return <generator object at 0>
 Assign.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 1609668000, u... u'p': 81, u'q': 19}")
  Exprs.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 1609668000, u... u'p': 81, u'q': 19}")
   Binop.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 1609668000, u... u'p': 81, u'q': 19}")
    Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 1609668000, u... u'p': 81, u'q': 19}")
    return 1609668000
    Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 1609668000, u... u'p': 81, u'q': 19}")
    return 172504080
   return 9
   Binop.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 1609668000, u... u'p': 81, u'q': 19}")
    Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 1609668000, u... u'p': 81, u'q': 19}")
    return 36628560000L
    Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 1609668000, u... u'p': 81, u'q': 19}")
    return 3958113600L
   return 9L
  return (9, 9L)
  Exprs.assign("(9, 9L), {u'pi': <Generator o...nction object at 0>}, {u'a': 1609668000, u... u'p': 81, u'q': 19}")
   Name.assign("9, {u'pi': <Generator o...nction object at 0>}, {u'a': 1609668000, u... u'p': 81, u'q': 19}")
   return
   Name.assign("9L, {u'pi': <Generator o...nction object at 0>}, {u'a': 1609668000, u... u'p': 81, u'q': 19}")
   return
  return
 return
 While.geneval("{u'pi': <Generator o...nction object at 0>}, {u'a': 1609668000, u... u'p': 81, u'q': 19}")
 return <generator object at 0>
 Binop.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 1609668000, u... u'p': 81, u'q': 19}")
  Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 1609668000, u... u'p': 81, u'q': 19}")
  return 9
  Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 1609668000, u... u'p': 81, u'q': 19}")
  return 9L
 return True
 Yield.geneval("{u'pi': <Generator o...nction object at 0>}, {u'a': 1609668000, u... u'p': 81, u'q': 19}")
 return <generator object at 0>
 Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 1609668000, u... u'p': 81, u'q': 19}")
 return 9
 Node.geneval("{u'pi': <Generator o...nction object at 0>}, {u'a': 1609668000, u... u'p': 81, u'q': 19}")
 return <generator object at 0>
 Assign.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 1609668000, u... u'p': 81, u'q': 19}")
  Exprs.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 1609668000, u... u'p': 81, u'q': 19}")
   Binop.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 1609668000, u... u'p': 81, u'q': 19}")
    Literal.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 1609668000, u... u'p': 81, u'q': 19}")
    return 10
    Binop.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 1609668000, u... u'p': 81, u'q': 19}")
     Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 1609668000, u... u'p': 81, u'q': 19}")
     return 1609668000
     Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 1609668000, u... u'p': 81, u'q': 19}")
     return 172504080
    return 57131280
   return 571312800
   Binop.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 1609668000, u... u'p': 81, u'q': 19}")
    Literal.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 1609668000, u... u'p': 81, u'q': 19}")
    return 10
    Binop.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 1609668000, u... u'p': 81, u'q': 19}")
     Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 1609668000, u... u'p': 81, u'q': 19}")
     return 36628560000L
     Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 1609668000, u... u'p': 81, u'q': 19}")
     return 3958113600L
    return 1005537600L
   return 10055376000L
  return (571312800, 10055376000L)
  Exprs.assign("(571312800, 10055376000L), {u'pi': <Generator o...nction object at 0>}, {u'a': 1609668000, u... u'p': 81, u'q': 19}")
   Name.assign("571312800, {u'pi': <Generator o...nction object at 0>}, {u'a': 1609668000, u... u'p': 81, u'q': 19}")
   return
   Name.assign("10055376000L, {u'pi': <Generator o...nction object at 0>}, {u'a': 571312800, u'... u'p': 81, u'q': 19}")
   return
  return
 return
 Node.geneval("{u'pi': <Generator o...nction object at 0>}, {u'a': 571312800, u'... u'p': 81, u'q': 19}")
 return <generator object at 0>
 Assign.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 571312800, u'... u'p': 81, u'q': 19}")
  Exprs.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 571312800, u'... u'p': 81, u'q': 19}")
   Binop.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 571312800, u'... u'p': 81, u'q': 19}")
    Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 571312800, u'... u'p': 81, u'q': 19}")
    return 571312800
    Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 571312800, u'... u'p': 81, u'q': 19}")
    return 172504080
   return 3
   Binop.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 571312800, u'... u'p': 81, u'q': 19}")
    Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 571312800, u'... u'p': 81, u'q': 19}")
    return 10055376000L
    Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 571312800, u'... u'p': 81, u'q': 19}")
    return 3958113600L
   return 2L
  return (3, 2L)
  Exprs.assign("(3, 2L), {u'pi': <Generator o...nction object at 0>}, {u'a': 571312800, u'... u'p': 81, u'q': 19}")
   Name.assign("3, {u'pi': <Generator o...nction object at 0>}, {u'a': 571312800, u'... u'p': 81, u'q': 19}")
   return
   Name.assign("2L, {u'pi': <Generator o...nction object at 0>}, {u'a': 571312800, u'... u'p': 81, u'q': 19}")
   return
  return
 return
 Binop.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 571312800, u'... u'p': 81, u'q': 19}")
  Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 571312800, u'... u'p': 81, u'q': 19}")
  return 3
  Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 571312800, u'... u'p': 81, u'q': 19}")
  return 2L
 return False
 Literal.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 571312800, u'... u'p': 81, u'q': 19}")
 return 1
 Node.geneval("{u'pi': <Generator o...nction object at 0>}, {u'a': 571312800, u'... u'p': 81, u'q': 19}")
 return <generator object at 0>
 Assign.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 571312800, u'... u'p': 81, u'q': 19}")
  Exprs.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 571312800, u'... u'p': 81, u'q': 19}")
   Binop.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 571312800, u'... u'p': 81, u'q': 19}")
    Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 571312800, u'... u'p': 81, u'q': 19}")
    return 10
    Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 571312800, u'... u'p': 81, u'q': 19}")
    return 10
   return 100
   Binop.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 571312800, u'... u'p': 81, u'q': 19}")
    Binop.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 571312800, u'... u'p': 81, u'q': 19}")
     Literal.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 571312800, u'... u'p': 81, u'q': 19}")
     return 2
     Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 571312800, u'... u'p': 81, u'q': 19}")
     return 10
    return 20
    Literal.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 571312800, u'... u'p': 81, u'q': 19}")
    return 1
   return 21
   Binop.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 571312800, u'... u'p': 81, u'q': 19}")
    Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 571312800, u'... u'p': 81, u'q': 19}")
    return 10
    Literal.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 571312800, u'... u'p': 81, u'q': 19}")
    return 1
   return 11
  return (100, 21, 11)
  Exprs.assign("(100, 21, 11), {u'pi': <Generator o...nction object at 0>}, {u'a': 571312800, u'... u'p': 81, u'q': 19}")
   Name.assign("100, {u'pi': <Generator o...nction object at 0>}, {u'a': 571312800, u'... u'p': 81, u'q': 19}")
   return
   Name.assign("21, {u'pi': <Generator o...nction object at 0>}, {u'a': 571312800, u'...u'p': 100, u'q': 19}")
   return
   Name.assign("11, {u'pi': <Generator o...nction object at 0>}, {u'a': 571312800, u'...u'p': 100, u'q': 21}")
   return
  return
 return
 Node.geneval("{u'pi': <Generator o...nction object at 0>}, {u'a': 571312800, u'...u'p': 100, u'q': 21}")
 return <generator object at 0>
 Assign.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 571312800, u'...u'p': 100, u'q': 21}")
  Exprs.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 571312800, u'...u'p': 100, u'q': 21}")
   Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 571312800, u'...u'p': 100, u'q': 21}")
   return 10055376000L
   Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 571312800, u'...u'p': 100, u'q': 21}")
   return 3958113600L
   Binop.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 571312800, u'...u'p': 100, u'q': 21}")
    Binop.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 571312800, u'...u'p': 100, u'q': 21}")
     Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 571312800, u'...u'p': 100, u'q': 21}")
     return 100
     Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 571312800, u'...u'p': 100, u'q': 21}")
     return 571312800
    return 57131280000L
    Binop.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 571312800, u'...u'p': 100, u'q': 21}")
     Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 571312800, u'...u'p': 100, u'q': 21}")
     return 21
     Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 571312800, u'...u'p': 100, u'q': 21}")
     return 10055376000L
    return 211162896000L
   return 268294176000L
   Binop.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 571312800, u'...u'p': 100, u'q': 21}")
    Binop.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 571312800, u'...u'p': 100, u'q': 21}")
     Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 571312800, u'...u'p': 100, u'q': 21}")
     return 100
     Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 571312800, u'...u'p': 100, u'q': 21}")
     return 172504080
    return 17250408000L
    Binop.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 571312800, u'...u'p': 100, u'q': 21}")
     Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 571312800, u'...u'p': 100, u'q': 21}")
     return 21
     Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 571312800, u'...u'p': 100, u'q': 21}")
     return 3958113600L
    return 83120385600L
   return 100370793600L
  return (10055376000L, 3958113600L, 268294176000L, 100370793600L)
  Exprs.assign("(10055376000L, 39581...000L, 100370793600L), {u'pi': <Generator o...nction object at 0>}, {u'a': 571312800, u'...u'p': 100, u'q': 21}")
   Name.assign("10055376000L, {u'pi': <Generator o...nction object at 0>}, {u'a': 571312800, u'...u'p': 100, u'q': 21}")
   return
   Name.assign("3958113600L, {u'pi': <Generator o...nction object at 0>}, {u'a': 10055376000L,...u'p': 100, u'q': 21}")
   return
   Name.assign("268294176000L, {u'pi': <Generator o...nction object at 0>}, {u'a': 10055376000L,...u'p': 100, u'q': 21}")
   return
   Name.assign("100370793600L, {u'pi': <Generator o...nction object at 0>}, {u'a': 10055376000L,...u'p': 100, u'q': 21}")
   return
  return
 return
 Node.geneval("{u'pi': <Generator o...nction object at 0>}, {u'a': 10055376000L,...u'p': 100, u'q': 21}")
 return <generator object at 0>
 Assign.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 10055376000L,...u'p': 100, u'q': 21}")
  Exprs.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 10055376000L,...u'p': 100, u'q': 21}")
   Binop.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 10055376000L,...u'p': 100, u'q': 21}")
    Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 10055376000L,...u'p': 100, u'q': 21}")
    return 10055376000L
    Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 10055376000L,...u'p': 100, u'q': 21}")
    return 3958113600L
   return 2L
   Binop.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 10055376000L,...u'p': 100, u'q': 21}")
    Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 10055376000L,...u'p': 100, u'q': 21}")
    return 268294176000L
    Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 10055376000L,...u'p': 100, u'q': 21}")
    return 100370793600L
   return 2L
  return (2L, 2L)
  Exprs.assign("(2L, 2L), {u'pi': <Generator o...nction object at 0>}, {u'a': 10055376000L,...u'p': 100, u'q': 21}")
   Name.assign("2L, {u'pi': <Generator o...nction object at 0>}, {u'a': 10055376000L,...u'p': 100, u'q': 21}")
   return
   Name.assign("2L, {u'pi': <Generator o...nction object at 0>}, {u'a': 10055376000L,...u'p': 100, u'q': 21}")
   return
  return
 return
 While.geneval("{u'pi': <Generator o...nction object at 0>}, {u'a': 10055376000L,...u'p': 100, u'q': 21}")
 return <generator object at 0>
 Binop.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 10055376000L,...u'p': 100, u'q': 21}")
  Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 10055376000L,...u'p': 100, u'q': 21}")
  return 2L
  Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 10055376000L,...u'p': 100, u'q': 21}")
  return 2L
 return True
 Yield.geneval("{u'pi': <Generator o...nction object at 0>}, {u'a': 10055376000L,...u'p': 100, u'q': 21}")
 return <generator object at 0>
 Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 10055376000L,...u'p': 100, u'q': 21}")
 return 2L
 Node.geneval("{u'pi': <Generator o...nction object at 0>}, {u'a': 10055376000L,...u'p': 100, u'q': 21}")
 return <generator object at 0>
 Assign.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 10055376000L,...u'p': 100, u'q': 21}")
  Exprs.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 10055376000L,...u'p': 100, u'q': 21}")
   Binop.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 10055376000L,...u'p': 100, u'q': 21}")
    Literal.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 10055376000L,...u'p': 100, u'q': 21}")
    return 10
    Binop.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 10055376000L,...u'p': 100, u'q': 21}")
     Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 10055376000L,...u'p': 100, u'q': 21}")
     return 10055376000L
     Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 10055376000L,...u'p': 100, u'q': 21}")
     return 3958113600L
    return 2139148800L
   return 21391488000L
   Binop.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 10055376000L,...u'p': 100, u'q': 21}")
    Literal.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 10055376000L,...u'p': 100, u'q': 21}")
    return 10
    Binop.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 10055376000L,...u'p': 100, u'q': 21}")
     Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 10055376000L,...u'p': 100, u'q': 21}")
     return 268294176000L
     Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 10055376000L,...u'p': 100, u'q': 21}")
     return 100370793600L
    return 67552588800L
   return 675525888000L
  return (21391488000L, 675525888000L)
  Exprs.assign("(21391488000L, 675525888000L), {u'pi': <Generator o...nction object at 0>}, {u'a': 10055376000L,...u'p': 100, u'q': 21}")
   Name.assign("21391488000L, {u'pi': <Generator o...nction object at 0>}, {u'a': 10055376000L,...u'p': 100, u'q': 21}")
   return
   Name.assign("675525888000L, {u'pi': <Generator o...nction object at 0>}, {u'a': 21391488000L,...u'p': 100, u'q': 21}")
   return
  return
 return
 Node.geneval("{u'pi': <Generator o...nction object at 0>}, {u'a': 21391488000L,...u'p': 100, u'q': 21}")
 return <generator object at 0>
 Assign.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 21391488000L,...u'p': 100, u'q': 21}")
  Exprs.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 21391488000L,...u'p': 100, u'q': 21}")
   Binop.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 21391488000L,...u'p': 100, u'q': 21}")
    Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 21391488000L,...u'p': 100, u'q': 21}")
    return 21391488000L
    Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 21391488000L,...u'p': 100, u'q': 21}")
    return 3958113600L
   return 5L
   Binop.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 21391488000L,...u'p': 100, u'q': 21}")
    Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 21391488000L,...u'p': 100, u'q': 21}")
    return 675525888000L
    Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 21391488000L,...u'p': 100, u'q': 21}")
    return 100370793600L
   return 6L
  return (5L, 6L)
  Exprs.assign("(5L, 6L), {u'pi': <Generator o...nction object at 0>}, {u'a': 21391488000L,...u'p': 100, u'q': 21}")
   Name.assign("5L, {u'pi': <Generator o...nction object at 0>}, {u'a': 21391488000L,...u'p': 100, u'q': 21}")
   return
   Name.assign("6L, {u'pi': <Generator o...nction object at 0>}, {u'a': 21391488000L,...u'p': 100, u'q': 21}")
   return
  return
 return
 Binop.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 21391488000L,...u'p': 100, u'q': 21}")
  Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 21391488000L,...u'p': 100, u'q': 21}")
  return 5L
  Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 21391488000L,...u'p': 100, u'q': 21}")
  return 6L
 return False
 Literal.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 21391488000L,...u'p': 100, u'q': 21}")
 return 1
 Node.geneval("{u'pi': <Generator o...nction object at 0>}, {u'a': 21391488000L,...u'p': 100, u'q': 21}")
 return <generator object at 0>
 Assign.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 21391488000L,...u'p': 100, u'q': 21}")
  Exprs.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 21391488000L,...u'p': 100, u'q': 21}")
   Binop.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 21391488000L,...u'p': 100, u'q': 21}")
    Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 21391488000L,...u'p': 100, u'q': 21}")
    return 11
    Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 21391488000L,...u'p': 100, u'q': 21}")
    return 11
   return 121
   Binop.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 21391488000L,...u'p': 100, u'q': 21}")
    Binop.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 21391488000L,...u'p': 100, u'q': 21}")
     Literal.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 21391488000L,...u'p': 100, u'q': 21}")
     return 2
     Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 21391488000L,...u'p': 100, u'q': 21}")
     return 11
    return 22
    Literal.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 21391488000L,...u'p': 100, u'q': 21}")
    return 1
   return 23
   Binop.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 21391488000L,...u'p': 100, u'q': 21}")
    Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 21391488000L,...u'p': 100, u'q': 21}")
    return 11
    Literal.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 21391488000L,...u'p': 100, u'q': 21}")
    return 1
   return 12
  return (121, 23, 12)
  Exprs.assign("(121, 23, 12), {u'pi': <Generator o...nction object at 0>}, {u'a': 21391488000L,...u'p': 100, u'q': 21}")
   Name.assign("121, {u'pi': <Generator o...nction object at 0>}, {u'a': 21391488000L,...u'p': 100, u'q': 21}")
   return
   Name.assign("23, {u'pi': <Generator o...nction object at 0>}, {u'a': 21391488000L,...u'p': 121, u'q': 21}")
   return
   Name.assign("12, {u'pi': <Generator o...nction object at 0>}, {u'a': 21391488000L,...u'p': 121, u'q': 23}")
   return
  return
 return
 Node.geneval("{u'pi': <Generator o...nction object at 0>}, {u'a': 21391488000L,...u'p': 121, u'q': 23}")
 return <generator object at 0>
 Assign.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 21391488000L,...u'p': 121, u'q': 23}")
  Exprs.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 21391488000L,...u'p': 121, u'q': 23}")
   Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 21391488000L,...u'p': 121, u'q': 23}")
   return 675525888000L
   Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 21391488000L,...u'p': 121, u'q': 23}")
   return 100370793600L
   Binop.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 21391488000L,...u'p': 121, u'q': 23}")
    Binop.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 21391488000L,...u'p': 121, u'q': 23}")
     Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 21391488000L,...u'p': 121, u'q': 23}")
     return 121
     Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 21391488000L,...u'p': 121, u'q': 23}")
     return 21391488000L
    return 2588370048000L
    Binop.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 21391488000L,...u'p': 121, u'q': 23}")
     Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 21391488000L,...u'p': 121, u'q': 23}")
     return 23
     Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 21391488000L,...u'p': 121, u'q': 23}")
     return 675525888000L
    return 15537095424000L
   return 18125465472000L
   Binop.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 21391488000L,...u'p': 121, u'q': 23}")
    Binop.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 21391488000L,...u'p': 121, u'q': 23}")
     Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 21391488000L,...u'p': 121, u'q': 23}")
     return 121
     Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 21391488000L,...u'p': 121, u'q': 23}")
     return 3958113600L
    return 478931745600L
    Binop.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 21391488000L,...u'p': 121, u'q': 23}")
     Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 21391488000L,...u'p': 121, u'q': 23}")
     return 23
     Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 21391488000L,...u'p': 121, u'q': 23}")
     return 100370793600L
    return 2308528252800L
   return 2787459998400L
  return (675525888000L, 100370793600L, 18125465472000L, 2787459998400L)
  Exprs.assign("(675525888000L, 1003...00L, 2787459998400L), {u'pi': <Generator o...nction object at 0>}, {u'a': 21391488000L,...u'p': 121, u'q': 23}")
   Name.assign("675525888000L, {u'pi': <Generator o...nction object at 0>}, {u'a': 21391488000L,...u'p': 121, u'q': 23}")
   return
   Name.assign("100370793600L, {u'pi': <Generator o...nction object at 0>}, {u'a': 675525888000L...u'p': 121, u'q': 23}")
   return
   Name.assign("18125465472000L, {u'pi': <Generator o...nction object at 0>}, {u'a': 675525888000L...u'p': 121, u'q': 23}")
   return
   Name.assign("2787459998400L, {u'pi': <Generator o...nction object at 0>}, {u'a': 675525888000L...u'p': 121, u'q': 23}")
   return
  return
 return
 Node.geneval("{u'pi': <Generator o...nction object at 0>}, {u'a': 675525888000L...u'p': 121, u'q': 23}")
 return <generator object at 0>
 Assign.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 675525888000L...u'p': 121, u'q': 23}")
  Exprs.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 675525888000L...u'p': 121, u'q': 23}")
   Binop.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 675525888000L...u'p': 121, u'q': 23}")
    Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 675525888000L...u'p': 121, u'q': 23}")
    return 675525888000L
    Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 675525888000L...u'p': 121, u'q': 23}")
    return 100370793600L
   return 6L
   Binop.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 675525888000L...u'p': 121, u'q': 23}")
    Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 675525888000L...u'p': 121, u'q': 23}")
    return 18125465472000L
    Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 675525888000L...u'p': 121, u'q': 23}")
    return 2787459998400L
   return 6L
  return (6L, 6L)
  Exprs.assign("(6L, 6L), {u'pi': <Generator o...nction object at 0>}, {u'a': 675525888000L...u'p': 121, u'q': 23}")
   Name.assign("6L, {u'pi': <Generator o...nction object at 0>}, {u'a': 675525888000L...u'p': 121, u'q': 23}")
   return
   Name.assign("6L, {u'pi': <Generator o...nction object at 0>}, {u'a': 675525888000L...u'p': 121, u'q': 23}")
   return
  return
 return
 While.geneval("{u'pi': <Generator o...nction object at 0>}, {u'a': 675525888000L...u'p': 121, u'q': 23}")
 return <generator object at 0>
 Binop.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 675525888000L...u'p': 121, u'q': 23}")
  Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 675525888000L...u'p': 121, u'q': 23}")
  return 6L
  Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 675525888000L...u'p': 121, u'q': 23}")
  return 6L
 return True
 Yield.geneval("{u'pi': <Generator o...nction object at 0>}, {u'a': 675525888000L...u'p': 121, u'q': 23}")
 return <generator object at 0>
 Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 675525888000L...u'p': 121, u'q': 23}")
 return 6L
 Node.geneval("{u'pi': <Generator o...nction object at 0>}, {u'a': 675525888000L...u'p': 121, u'q': 23}")
 return <generator object at 0>
 Assign.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 675525888000L...u'p': 121, u'q': 23}")
  Exprs.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 675525888000L...u'p': 121, u'q': 23}")
   Binop.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 675525888000L...u'p': 121, u'q': 23}")
    Literal.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 675525888000L...u'p': 121, u'q': 23}")
    return 10
    Binop.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 675525888000L...u'p': 121, u'q': 23}")
     Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 675525888000L...u'p': 121, u'q': 23}")
     return 675525888000L
     Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 675525888000L...u'p': 121, u'q': 23}")
     return 100370793600L
    return 73301126400L
   return 733011264000L
   Binop.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 675525888000L...u'p': 121, u'q': 23}")
    Literal.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 675525888000L...u'p': 121, u'q': 23}")
    return 10
    Binop.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 675525888000L...u'p': 121, u'q': 23}")
     Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 675525888000L...u'p': 121, u'q': 23}")
     return 18125465472000L
     Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 675525888000L...u'p': 121, u'q': 23}")
     return 2787459998400L
    return 1400705481600L
   return 14007054816000L
  return (733011264000L, 14007054816000L)
  Exprs.assign("(733011264000L, 14007054816000L), {u'pi': <Generator o...nction object at 0>}, {u'a': 675525888000L...u'p': 121, u'q': 23}")
   Name.assign("733011264000L, {u'pi': <Generator o...nction object at 0>}, {u'a': 675525888000L...u'p': 121, u'q': 23}")
   return
   Name.assign("14007054816000L, {u'pi': <Generator o...nction object at 0>}, {u'a': 733011264000L...u'p': 121, u'q': 23}")
   return
  return
 return
 Node.geneval("{u'pi': <Generator o...nction object at 0>}, {u'a': 733011264000L...u'p': 121, u'q': 23}")
 return <generator object at 0>
 Assign.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 733011264000L...u'p': 121, u'q': 23}")
  Exprs.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 733011264000L...u'p': 121, u'q': 23}")
   Binop.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 733011264000L...u'p': 121, u'q': 23}")
    Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 733011264000L...u'p': 121, u'q': 23}")
    return 733011264000L
    Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 733011264000L...u'p': 121, u'q': 23}")
    return 100370793600L
   return 7L
   Binop.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 733011264000L...u'p': 121, u'q': 23}")
    Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 733011264000L...u'p': 121, u'q': 23}")
    return 14007054816000L
    Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 733011264000L...u'p': 121, u'q': 23}")
    return 2787459998400L
   return 5L
  return (7L, 5L)
  Exprs.assign("(7L, 5L), {u'pi': <Generator o...nction object at 0>}, {u'a': 733011264000L...u'p': 121, u'q': 23}")
   Name.assign("7L, {u'pi': <Generator o...nction object at 0>}, {u'a': 733011264000L...u'p': 121, u'q': 23}")
   return
   Name.assign("5L, {u'pi': <Generator o...nction object at 0>}, {u'a': 733011264000L...u'p': 121, u'q': 23}")
   return
  return
 return
 Binop.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 733011264000L...u'p': 121, u'q': 23}")
  Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 733011264000L...u'p': 121, u'q': 23}")
  return 7L
  Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 733011264000L...u'p': 121, u'q': 23}")
  return 5L
 return False
 Literal.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 733011264000L...u'p': 121, u'q': 23}")
 return 1
 Node.geneval("{u'pi': <Generator o...nction object at 0>}, {u'a': 733011264000L...u'p': 121, u'q': 23}")
 return <generator object at 0>
 Assign.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 733011264000L...u'p': 121, u'q': 23}")
  Exprs.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 733011264000L...u'p': 121, u'q': 23}")
   Binop.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 733011264000L...u'p': 121, u'q': 23}")
    Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 733011264000L...u'p': 121, u'q': 23}")
    return 12
    Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 733011264000L...u'p': 121, u'q': 23}")
    return 12
   return 144
   Binop.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 733011264000L...u'p': 121, u'q': 23}")
    Binop.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 733011264000L...u'p': 121, u'q': 23}")
     Literal.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 733011264000L...u'p': 121, u'q': 23}")
     return 2
     Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 733011264000L...u'p': 121, u'q': 23}")
     return 12
    return 24
    Literal.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 733011264000L...u'p': 121, u'q': 23}")
    return 1
   return 25
   Binop.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 733011264000L...u'p': 121, u'q': 23}")
    Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 733011264000L...u'p': 121, u'q': 23}")
    return 12
    Literal.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 733011264000L...u'p': 121, u'q': 23}")
    return 1
   return 13
  return (144, 25, 13)
  Exprs.assign("(144, 25, 13), {u'pi': <Generator o...nction object at 0>}, {u'a': 733011264000L...u'p': 121, u'q': 23}")
   Name.assign("144, {u'pi': <Generator o...nction object at 0>}, {u'a': 733011264000L...u'p': 121, u'q': 23}")
   return
   Name.assign("25, {u'pi': <Generator o...nction object at 0>}, {u'a': 733011264000L...u'p': 144, u'q': 23}")
   return
   Name.assign("13, {u'pi': <Generator o...nction object at 0>}, {u'a': 733011264000L...u'p': 144, u'q': 25}")
   return
  return
 return
 Node.geneval("{u'pi': <Generator o...nction object at 0>}, {u'a': 733011264000L...u'p': 144, u'q': 25}")
 return <generator object at 0>
 Assign.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 733011264000L...u'p': 144, u'q': 25}")
  Exprs.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 733011264000L...u'p': 144, u'q': 25}")
   Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 733011264000L...u'p': 144, u'q': 25}")
   return 14007054816000L
   Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 733011264000L...u'p': 144, u'q': 25}")
   return 2787459998400L
   Binop.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 733011264000L...u'p': 144, u'q': 25}")
    Binop.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 733011264000L...u'p': 144, u'q': 25}")
     Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 733011264000L...u'p': 144, u'q': 25}")
     return 144
     Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 733011264000L...u'p': 144, u'q': 25}")
     return 733011264000L
    return 105553622016000L
    Binop.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 733011264000L...u'p': 144, u'q': 25}")
     Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 733011264000L...u'p': 144, u'q': 25}")
     return 25
     Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 733011264000L...u'p': 144, u'q': 25}")
     return 14007054816000L
    return 350176370400000L
   return 455729992416000L
   Binop.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 733011264000L...u'p': 144, u'q': 25}")
    Binop.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 733011264000L...u'p': 144, u'q': 25}")
     Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 733011264000L...u'p': 144, u'q': 25}")
     return 144
     Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 733011264000L...u'p': 144, u'q': 25}")
     return 100370793600L
    return 14453394278400L
    Binop.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 733011264000L...u'p': 144, u'q': 25}")
     Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 733011264000L...u'p': 144, u'q': 25}")
     return 25
     Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 733011264000L...u'p': 144, u'q': 25}")
     return 2787459998400L
    return 69686499960000L
   return 84139894238400L
  return (14007054816000L, 2787459998400L, 455729992416000L, 84139894238400L)
  Exprs.assign("(14007054816000L, 27...0L, 84139894238400L), {u'pi': <Generator o...nction object at 0>}, {u'a': 733011264000L...u'p': 144, u'q': 25}")
   Name.assign("14007054816000L, {u'pi': <Generator o...nction object at 0>}, {u'a': 733011264000L...u'p': 144, u'q': 25}")
   return
   Name.assign("2787459998400L, {u'pi': <Generator o...nction object at 0>}, {u'a': 1400705481600...u'p': 144, u'q': 25}")
   return
   Name.assign("455729992416000L, {u'pi': <Generator o...nction object at 0>}, {u'a': 1400705481600...u'p': 144, u'q': 25}")
   return
   Name.assign("84139894238400L, {u'pi': <Generator o...nction object at 0>}, {u'a': 1400705481600...u'p': 144, u'q': 25}")
   return
  return
 return
 Node.geneval("{u'pi': <Generator o...nction object at 0>}, {u'a': 1400705481600...u'p': 144, u'q': 25}")
 return <generator object at 0>
 Assign.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 1400705481600...u'p': 144, u'q': 25}")
  Exprs.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 1400705481600...u'p': 144, u'q': 25}")
   Binop.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 1400705481600...u'p': 144, u'q': 25}")
    Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 1400705481600...u'p': 144, u'q': 25}")
    return 14007054816000L
    Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 1400705481600...u'p': 144, u'q': 25}")
    return 2787459998400L
   return 5L
   Binop.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 1400705481600...u'p': 144, u'q': 25}")
    Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 1400705481600...u'p': 144, u'q': 25}")
    return 455729992416000L
    Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 1400705481600...u'p': 144, u'q': 25}")
    return 84139894238400L
   return 5L
  return (5L, 5L)
  Exprs.assign("(5L, 5L), {u'pi': <Generator o...nction object at 0>}, {u'a': 1400705481600...u'p': 144, u'q': 25}")
   Name.assign("5L, {u'pi': <Generator o...nction object at 0>}, {u'a': 1400705481600...u'p': 144, u'q': 25}")
   return
   Name.assign("5L, {u'pi': <Generator o...nction object at 0>}, {u'a': 1400705481600...u'p': 144, u'q': 25}")
   return
  return
 return
 While.geneval("{u'pi': <Generator o...nction object at 0>}, {u'a': 1400705481600...u'p': 144, u'q': 25}")
 return <generator object at 0>
 Binop.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 1400705481600...u'p': 144, u'q': 25}")
  Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 1400705481600...u'p': 144, u'q': 25}")
  return 5L
  Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 1400705481600...u'p': 144, u'q': 25}")
  return 5L
 return True
 Yield.geneval("{u'pi': <Generator o...nction object at 0>}, {u'a': 1400705481600...u'p': 144, u'q': 25}")
 return <generator object at 0>
 Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 1400705481600...u'p': 144, u'q': 25}")
 return 5L
 Node.geneval("{u'pi': <Generator o...nction object at 0>}, {u'a': 1400705481600...u'p': 144, u'q': 25}")
 return <generator object at 0>
 Assign.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 1400705481600...u'p': 144, u'q': 25}")
  Exprs.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 1400705481600...u'p': 144, u'q': 25}")
   Binop.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 1400705481600...u'p': 144, u'q': 25}")
    Literal.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 1400705481600...u'p': 144, u'q': 25}")
    return 10
    Binop.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 1400705481600...u'p': 144, u'q': 25}")
     Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 1400705481600...u'p': 144, u'q': 25}")
     return 14007054816000L
     Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 1400705481600...u'p': 144, u'q': 25}")
     return 2787459998400L
    return 69754824000L
   return 697548240000L
   Binop.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 1400705481600...u'p': 144, u'q': 25}")
    Literal.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 1400705481600...u'p': 144, u'q': 25}")
    return 10
    Binop.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 1400705481600...u'p': 144, u'q': 25}")
     Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 1400705481600...u'p': 144, u'q': 25}")
     return 455729992416000L
     Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 1400705481600...u'p': 144, u'q': 25}")
     return 84139894238400L
    return 35030521224000L
   return 350305212240000L
  return (697548240000L, 350305212240000L)
  Exprs.assign("(697548240000L, 350305212240000L), {u'pi': <Generator o...nction object at 0>}, {u'a': 1400705481600...u'p': 144, u'q': 25}")
   Name.assign("697548240000L, {u'pi': <Generator o...nction object at 0>}, {u'a': 1400705481600...u'p': 144, u'q': 25}")
   return
   Name.assign("350305212240000L, {u'pi': <Generator o...nction object at 0>}, {u'a': 697548240000L...u'p': 144, u'q': 25}")
   return
  return
 return
 Node.geneval("{u'pi': <Generator o...nction object at 0>}, {u'a': 697548240000L...u'p': 144, u'q': 25}")
 return <generator object at 0>
 Assign.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 697548240000L...u'p': 144, u'q': 25}")
  Exprs.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 697548240000L...u'p': 144, u'q': 25}")
   Binop.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 697548240000L...u'p': 144, u'q': 25}")
    Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 697548240000L...u'p': 144, u'q': 25}")
    return 697548240000L
    Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 697548240000L...u'p': 144, u'q': 25}")
    return 2787459998400L
   return 0L
   Binop.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 697548240000L...u'p': 144, u'q': 25}")
    Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 697548240000L...u'p': 144, u'q': 25}")
    return 350305212240000L
    Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 697548240000L...u'p': 144, u'q': 25}")
    return 84139894238400L
   return 4L
  return (0L, 4L)
  Exprs.assign("(0L, 4L), {u'pi': <Generator o...nction object at 0>}, {u'a': 697548240000L...u'p': 144, u'q': 25}")
   Name.assign("0L, {u'pi': <Generator o...nction object at 0>}, {u'a': 697548240000L...u'p': 144, u'q': 25}")
   return
   Name.assign("4L, {u'pi': <Generator o...nction object at 0>}, {u'a': 697548240000L...u'p': 144, u'q': 25}")
   return
  return
 return
 Binop.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 697548240000L...u'p': 144, u'q': 25}")
  Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 697548240000L...u'p': 144, u'q': 25}")
  return 0L
  Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 697548240000L...u'p': 144, u'q': 25}")
  return 4L
 return False
 Literal.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 697548240000L...u'p': 144, u'q': 25}")
 return 1
 Node.geneval("{u'pi': <Generator o...nction object at 0>}, {u'a': 697548240000L...u'p': 144, u'q': 25}")
 return <generator object at 0>
 Assign.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 697548240000L...u'p': 144, u'q': 25}")
  Exprs.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 697548240000L...u'p': 144, u'q': 25}")
   Binop.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 697548240000L...u'p': 144, u'q': 25}")
    Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 697548240000L...u'p': 144, u'q': 25}")
    return 13
    Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 697548240000L...u'p': 144, u'q': 25}")
    return 13
   return 169
   Binop.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 697548240000L...u'p': 144, u'q': 25}")
    Binop.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 697548240000L...u'p': 144, u'q': 25}")
     Literal.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 697548240000L...u'p': 144, u'q': 25}")
     return 2
     Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 697548240000L...u'p': 144, u'q': 25}")
     return 13
    return 26
    Literal.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 697548240000L...u'p': 144, u'q': 25}")
    return 1
   return 27
   Binop.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 697548240000L...u'p': 144, u'q': 25}")
    Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 697548240000L...u'p': 144, u'q': 25}")
    return 13
    Literal.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 697548240000L...u'p': 144, u'q': 25}")
    return 1
   return 14
  return (169, 27, 14)
  Exprs.assign("(169, 27, 14), {u'pi': <Generator o...nction object at 0>}, {u'a': 697548240000L...u'p': 144, u'q': 25}")
   Name.assign("169, {u'pi': <Generator o...nction object at 0>}, {u'a': 697548240000L...u'p': 144, u'q': 25}")
   return
   Name.assign("27, {u'pi': <Generator o...nction object at 0>}, {u'a': 697548240000L...u'p': 169, u'q': 25}")
   return
   Name.assign("14, {u'pi': <Generator o...nction object at 0>}, {u'a': 697548240000L...u'p': 169, u'q': 27}")
   return
  return
 return
 Node.geneval("{u'pi': <Generator o...nction object at 0>}, {u'a': 697548240000L...u'p': 169, u'q': 27}")
 return <generator object at 0>
 Assign.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 697548240000L...u'p': 169, u'q': 27}")
  Exprs.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 697548240000L...u'p': 169, u'q': 27}")
   Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 697548240000L...u'p': 169, u'q': 27}")
   return 350305212240000L
   Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 697548240000L...u'p': 169, u'q': 27}")
   return 84139894238400L
   Binop.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 697548240000L...u'p': 169, u'q': 27}")
    Binop.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 697548240000L...u'p': 169, u'q': 27}")
     Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 697548240000L...u'p': 169, u'q': 27}")
     return 169
     Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 697548240000L...u'p': 169, u'q': 27}")
     return 697548240000L
    return 117885652560000L
    Binop.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 697548240000L...u'p': 169, u'q': 27}")
     Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 697548240000L...u'p': 169, u'q': 27}")
     return 27
     Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 697548240000L...u'p': 169, u'q': 27}")
     return 350305212240000L
    return 9458240730480000L
   return 9576126383040000L
   Binop.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 697548240000L...u'p': 169, u'q': 27}")
    Binop.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 697548240000L...u'p': 169, u'q': 27}")
     Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 697548240000L...u'p': 169, u'q': 27}")
     return 169
     Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 697548240000L...u'p': 169, u'q': 27}")
     return 2787459998400L
    return 471080739729600L
    Binop.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 697548240000L...u'p': 169, u'q': 27}")
     Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 697548240000L...u'p': 169, u'q': 27}")
     return 27
     Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 697548240000L...u'p': 169, u'q': 27}")
     return 84139894238400L
    return 2271777144436800L
   return 2742857884166400L
  return (350305212240000L, 84139894238400L, 9576126383040000L, 2742857884166400L)
  Exprs.assign("(350305212240000L, 8..., 2742857884166400L), {u'pi': <Generator o...nction object at 0>}, {u'a': 697548240000L...u'p': 169, u'q': 27}")
   Name.assign("350305212240000L, {u'pi': <Generator o...nction object at 0>}, {u'a': 697548240000L...u'p': 169, u'q': 27}")
   return
   Name.assign("84139894238400L, {u'pi': <Generator o...nction object at 0>}, {u'a': 3503052122400...u'p': 169, u'q': 27}")
   return
   Name.assign("9576126383040000L, {u'pi': <Generator o...nction object at 0>}, {u'a': 3503052122400...u'p': 169, u'q': 27}")
   return
   Name.assign("2742857884166400L, {u'pi': <Generator o...nction object at 0>}, {u'a': 3503052122400...u'p': 169, u'q': 27}")
   return
  return
 return
 Node.geneval("{u'pi': <Generator o...nction object at 0>}, {u'a': 3503052122400...u'p': 169, u'q': 27}")
 return <generator object at 0>
 Assign.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 3503052122400...u'p': 169, u'q': 27}")
  Exprs.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 3503052122400...u'p': 169, u'q': 27}")
   Binop.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 3503052122400...u'p': 169, u'q': 27}")
    Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 3503052122400...u'p': 169, u'q': 27}")
    return 350305212240000L
    Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 3503052122400...u'p': 169, u'q': 27}")
    return 84139894238400L
   return 4L
   Binop.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 3503052122400...u'p': 169, u'q': 27}")
    Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 3503052122400...u'p': 169, u'q': 27}")
    return 9576126383040000L
    Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 3503052122400...u'p': 169, u'q': 27}")
    return 2742857884166400L
   return 3L
  return (4L, 3L)
  Exprs.assign("(4L, 3L), {u'pi': <Generator o...nction object at 0>}, {u'a': 3503052122400...u'p': 169, u'q': 27}")
   Name.assign("4L, {u'pi': <Generator o...nction object at 0>}, {u'a': 3503052122400...u'p': 169, u'q': 27}")
   return
   Name.assign("3L, {u'pi': <Generator o...nction object at 0>}, {u'a': 3503052122400...u'p': 169, u'q': 27}")
   return
  return
 return
 While.geneval("{u'pi': <Generator o...nction object at 0>}, {u'a': 3503052122400...u'p': 169, u'q': 27}")
 return <generator object at 0>
 Binop.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 3503052122400...u'p': 169, u'q': 27}")
  Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 3503052122400...u'p': 169, u'q': 27}")
  return 4L
  Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 3503052122400...u'p': 169, u'q': 27}")
  return 3L
 return False
 Literal.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 3503052122400...u'p': 169, u'q': 27}")
 return 1
 Node.geneval("{u'pi': <Generator o...nction object at 0>}, {u'a': 3503052122400...u'p': 169, u'q': 27}")
 return <generator object at 0>
 Assign.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 3503052122400...u'p': 169, u'q': 27}")
  Exprs.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 3503052122400...u'p': 169, u'q': 27}")
   Binop.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 3503052122400...u'p': 169, u'q': 27}")
    Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 3503052122400...u'p': 169, u'q': 27}")
    return 14
    Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 3503052122400...u'p': 169, u'q': 27}")
    return 14
   return 196
   Binop.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 3503052122400...u'p': 169, u'q': 27}")
    Binop.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 3503052122400...u'p': 169, u'q': 27}")
     Literal.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 3503052122400...u'p': 169, u'q': 27}")
     return 2
     Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 3503052122400...u'p': 169, u'q': 27}")
     return 14
    return 28
    Literal.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 3503052122400...u'p': 169, u'q': 27}")
    return 1
   return 29
   Binop.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 3503052122400...u'p': 169, u'q': 27}")
    Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 3503052122400...u'p': 169, u'q': 27}")
    return 14
    Literal.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 3503052122400...u'p': 169, u'q': 27}")
    return 1
   return 15
  return (196, 29, 15)
  Exprs.assign("(196, 29, 15), {u'pi': <Generator o...nction object at 0>}, {u'a': 3503052122400...u'p': 169, u'q': 27}")
   Name.assign("196, {u'pi': <Generator o...nction object at 0>}, {u'a': 3503052122400...u'p': 169, u'q': 27}")
   return
   Name.assign("29, {u'pi': <Generator o...nction object at 0>}, {u'a': 3503052122400...u'p': 196, u'q': 27}")
   return
   Name.assign("15, {u'pi': <Generator o...nction object at 0>}, {u'a': 3503052122400...u'p': 196, u'q': 29}")
   return
  return
 return
 Node.geneval("{u'pi': <Generator o...nction object at 0>}, {u'a': 3503052122400...u'p': 196, u'q': 29}")
 return <generator object at 0>
 Assign.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 3503052122400...u'p': 196, u'q': 29}")
  Exprs.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 3503052122400...u'p': 196, u'q': 29}")
   Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 3503052122400...u'p': 196, u'q': 29}")
   return 9576126383040000L
   Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 3503052122400...u'p': 196, u'q': 29}")
   return 2742857884166400L
   Binop.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 3503052122400...u'p': 196, u'q': 29}")
    Binop.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 3503052122400...u'p': 196, u'q': 29}")
     Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 3503052122400...u'p': 196, u'q': 29}")
     return 196
     Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 3503052122400...u'p': 196, u'q': 29}")
     return 350305212240000L
    return 68659821599040000L
    Binop.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 3503052122400...u'p': 196, u'q': 29}")
     Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 3503052122400...u'p': 196, u'q': 29}")
     return 29
     Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 3503052122400...u'p': 196, u'q': 29}")
     return 9576126383040000L
    return 277707665108160000L
   return 346367486707200000L
   Binop.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 3503052122400...u'p': 196, u'q': 29}")
    Binop.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 3503052122400...u'p': 196, u'q': 29}")
     Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 3503052122400...u'p': 196, u'q': 29}")
     return 196
     Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 3503052122400...u'p': 196, u'q': 29}")
     return 84139894238400L
    return 16491419270726400L
    Binop.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 3503052122400...u'p': 196, u'q': 29}")
     Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 3503052122400...u'p': 196, u'q': 29}")
     return 29
     Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 3503052122400...u'p': 196, u'q': 29}")
     return 2742857884166400L
    return 79542878640825600L
   return 96034297911552000L
  return (9576126383040000L, 2742857884166400L, 346367486707200000L, 96034297911552000L)
  Exprs.assign("(9576126383040000L, ... 96034297911552000L), {u'pi': <Generator o...nction object at 0>}, {u'a': 3503052122400...u'p': 196, u'q': 29}")
   Name.assign("9576126383040000L, {u'pi': <Generator o...nction object at 0>}, {u'a': 3503052122400...u'p': 196, u'q': 29}")
   return
   Name.assign("2742857884166400L, {u'pi': <Generator o...nction object at 0>}, {u'a': 9576126383040...u'p': 196, u'q': 29}")
   return
   Name.assign("346367486707200000L, {u'pi': <Generator o...nction object at 0>}, {u'a': 9576126383040...u'p': 196, u'q': 29}")
   return
   Name.assign("96034297911552000L, {u'pi': <Generator o...nction object at 0>}, {u'a': 9576126383040...u'p': 196, u'q': 29}")
   return
  return
 return
 Node.geneval("{u'pi': <Generator o...nction object at 0>}, {u'a': 9576126383040...u'p': 196, u'q': 29}")
 return <generator object at 0>
 Assign.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 9576126383040...u'p': 196, u'q': 29}")
  Exprs.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 9576126383040...u'p': 196, u'q': 29}")
   Binop.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 9576126383040...u'p': 196, u'q': 29}")
    Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 9576126383040...u'p': 196, u'q': 29}")
    return 9576126383040000L
    Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 9576126383040...u'p': 196, u'q': 29}")
    return 2742857884166400L
   return 3L
   Binop.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 9576126383040...u'p': 196, u'q': 29}")
    Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 9576126383040...u'p': 196, u'q': 29}")
    return 346367486707200000L
    Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 9576126383040...u'p': 196, u'q': 29}")
    return 96034297911552000L
   return 3L
  return (3L, 3L)
  Exprs.assign("(3L, 3L), {u'pi': <Generator o...nction object at 0>}, {u'a': 9576126383040...u'p': 196, u'q': 29}")
   Name.assign("3L, {u'pi': <Generator o...nction object at 0>}, {u'a': 9576126383040...u'p': 196, u'q': 29}")
   return
   Name.assign("3L, {u'pi': <Generator o...nction object at 0>}, {u'a': 9576126383040...u'p': 196, u'q': 29}")
   return
  return
 return
 While.geneval("{u'pi': <Generator o...nction object at 0>}, {u'a': 9576126383040...u'p': 196, u'q': 29}")
 return <generator object at 0>
 Binop.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 9576126383040...u'p': 196, u'q': 29}")
  Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 9576126383040...u'p': 196, u'q': 29}")
  return 3L
  Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 9576126383040...u'p': 196, u'q': 29}")
  return 3L
 return True
 Yield.geneval("{u'pi': <Generator o...nction object at 0>}, {u'a': 9576126383040...u'p': 196, u'q': 29}")
 return <generator object at 0>
 Name.eval("{u'pi': <Generator o...nction object at 0>}, {u'a': 9576126383040...u'p': 196, u'q': 29}")
 return 3L
3141592653
3141592653
k = 2
a = 4
b = 1
a1 = 12
b1 = 4
p = 4
q = 5
k = 3
a = 12
b = 4
a1 = 76
b1 = 24
d = 3
d1 = 3
a = 0
a1 = 40
d = 0
d1 = 1
p = 9
q = 7
k = 4
a = 40
b = 24
a1 = 280
b1 = 204
d = 1
d1 = 1
a = 160
a1 = 760
d = 6
d1 = 3
p = 16
q = 9
k = 5
a = 760
b = 204
a1 = 9400
b1 = 2220
d = 3
d1 = 4
p = 25
q = 11
k = 6
a = 9400
b = 2220
a1 = 122400
b1 = 29520
d = 4
d1 = 4
a = 5200
a1 = 43200
d = 2
d1 = 1
p = 36
q = 13
k = 7
a = 43200
b = 29520
a1 = 748800
b1 = 463680
d = 1
d1 = 1
a = 136800
a1 = 2851200
d = 4
d1 = 6
p = 49
q = 15
k = 8
a = 2851200
b = 463680
a1 = 49471200
b1 = 8401680
d = 6
d1 = 5
p = 64
q = 17
k = 9
a = 49471200
b = 8401680
a1 = 1023487200
b1 = 172504080
d = 5
d1 = 5
a = 74628000
a1 = 1609668000
d = 8
d1 = 9
p = 81
q = 19
k = 10
a = 1609668000
b = 172504080
a1 = 36628560000L
b1 = 3958113600L
d = 9
d1 = 9L
a = 571312800
a1 = 10055376000L
d = 3
d1 = 2L
p = 100
q = 21
k = 11
a = 10055376000L
b = 3958113600L
a1 = 268294176000L
b1 = 100370793600L
d = 2L
d1 = 2L
a = 21391488000L
a1 = 675525888000L
d = 5L
d1 = 6L
p = 121
q = 23
k = 12
a = 675525888000L
b = 100370793600L
a1 = 18125465472000L
b1 = 2787459998400L
d = 6L
d1 = 6L
a = 733011264000L
a1 = 14007054816000L
d = 7L
d1 = 5L
p = 144
q = 25
k = 13
a = 14007054816000L
b = 2787459998400L
a1 = 455729992416000L
b1 = 84139894238400L
d = 5L
d1 = 5L
a = 697548240000L
a1 = 350305212240000L
d = 0L
d1 = 4L
p = 169
q = 27
k = 14
a = 350305212240000L
b = 84139894238400L
a1 = 9576126383040000L
b1 = 2742857884166400L
d = 4L
d1 = 3L
p = 196
q = 29
k = 15
a = 9576126383040000L
b = 2742857884166400L
a1 = 346367486707200000L
b1 = 96034297911552000L
d = 3L
d1 = 3L
a = 13475527305408000L
a1 = 582645929725440000L
d = 4L
d1 = 6L
p = 225
q = 31
k = 16
a = 582645929725440000L
b = 96034297911552000L
a1 = 21094017465205440000L
b1 = 3594206259195552000L
d = 6L
d1 = 5L
p = 256
q = 33
k = 17
a = 21094017465205440000L
b = 3594206259195552000L
a1 = 845259934361492160000L
b1 = 143193586818810528000L
d = 5L
d1 = 5L
a = 31229861692276800000L
a1 = 1292920002674395200000L
d = 8L
d1 = 9L
p = 289
q = 35
k = 18
a = 1292920002674395200000L
b = 143193586818810528000L
a1 = 54277630122671827200000L
b1 = 6050501147565883008000L
d = 9L
d1 = 8L
p = 324
q = 37
k = 19
a = 54277630122671827200000L
b = 6050501147565883008000L
a1 = 2427178395405361651200000L
b1 = 270263264589232282368000L
d = 8L
d1 = 8L
a = 58736209421447631360000L
a1 = 2650722786915033922560000L
d = 9L
d1 = 9L
a = 42816990933546842880000L
a1 = 2183534056119433812480000L
d = 7L
d1 = 8L
p = 361
q = 39
k = 20
a = 2183534056119433812480000L
b = 270263264589232282368000L
a1 = 100614761915668328966400000L
b1 = 12724498233251342778240000L
d = 8L
d1 = 7L
p = 400
q = 41
k = 21
a = 100614761915668328966400000L
b = 12724498233251342778240000L
a1 = 4998618860990175012614400000L
b1 = 629809733398997966855040000L
d = 7L
d1 = 7L
a = 115432742829089295187200000L
a1 = 5899507271971892446291200000L
d = 9L
d1 = 9L
a = 9122587298272101830400000L
a1 = 2312196713809107445958400000L
d = 0L
d1 = 3L
p = 441
q = 43
k = 22
a = 2312196713809107445958400000L
b = 629809733398997966855040000L
a1 = 103447519692329617083417600000L
b1 = 32693322257020754739970560000L
d = 3L
d1 = 3L
a = 4227675136121135453932800000L
a1 = 53675529212673528635059200000L
d = 6L
d1 = 1L
p = 484
q = 45
k = 23
a = 53675529212673528635059200000L
b = 32693322257020754739970560000L
a1 = 4461593580452938348281139200000L
b1 = 1776027412531048979256514560000L
d = 1L
d1 = 2L
p = 529
q = 47
k = 24
a = 4461593580452938348281139200000L
b = 1776027412531048979256514560000L
a1 = 238089253234792399017159859200000L
b1 = 100768055862923281282500610560000L
d = 2L
d1 = 2L
a = 9095387553908403897681100800000L
a1 = 365531415089458364521586380800000L
d = 5L
d1 = 3L
p = 576
q = 49
k = 25
a = 365531415089458364521586380800000L
b = 100768055862923281282500610560000L
a1 = 23149982570434700506622046720000000L
b1 = 5960626526901124994894282304000000L
d = 3L
d1 = 3L
a = 632272475006885206740845491200000L
a1 = 52681029897313255219391998080000000L
d = 6L
d1 = 8L
p = 625
q = 51
k = 26
a = 52681029897313255219391998080000000L
b = 5960626526901124994894282304000000L
a1 = 3081902821642279270402020334080000000L
b1 = 366971987786284425541171279104000000L
d = 8L
d1 = 8L
a = 49960176821042552602377396480000000L
a1 = 1461269193520038660726501012480000000L
d = 8L
d1 = 3L
p = 676
q = 53
k = 27
a = 1461269193520038660726501012480000000L
b = 366971987786284425541171279104000000L
a1 = 111220346787586814577711673681920000000L
b1 = 23478898884858235050230612630016000000L
d = 3L
d1 = 4L
p = 729
q = 55
k = 28
a = 111220346787586814577711673681920000000L
b = 23478898884858235050230612630016000000L
a1 = 7182384315393382985443761290603520000000L
b1 = 1558862017763404273982197557117696000000L
d = 4L
d1 = 4L
a = 173047512481538743767892231618560000000L
a1 = 9469362443397658895149710621327360000000L
d = 7L
d1 = 6L
p = 784
q = 57
k = 29
a = 9469362443397658895149710621327360000000L
b = 1558862017763404273982197557117696000000L
a1 = 675422909059192932137561015004610560000000L
b1 = 107262591738242899896366061057641216000000L
d = 6L
d1 = 6L
a = 1161903368172332512565252786211840000000L
a1 = 318473586297355327593646486587632640000000L
d = 0L
d1 = 2L
p = 841
q = 59
k = 30
a = 318473586297355327593646486587632640000000L
b = 107262591738242899896366061057641216000000L
a1 = 19767102324176895971092520301874483200000000L
b1 = 7639495869495354088304625747936814080000000L
d = 2L
d1 = 2L
a = 1039484028208695278009143644723502080000000L
a1 = 44881105851861877944832688060008550400000000L
d = 9L
d1 = 5L
p = 900
q = 61
k = 31
a = 44881105851861877944832688060008550400000000L
b = 7639495869495354088304625747936814080000000L
a1 = 3673283082351400304843023251911673446400000000L
b1 = 562545580603635209293311625576022753280000000L
d = 5L
d1 = 6L
p = 961
q = 63
k = 32
a = 3673283082351400304843023251911673446400000000L
b = 562545580603635209293311625576022753280000000L
a1 = 274547576911777483910094678096103644057600000000L
b1 = 42781927108614053464339377755056711787520000000L
d = 6L
d1 = 6L
a = 2980095987295890490831534984555369267200000000L
a1 = 178560142600931631240584115657633733324800000000L
d = 5L
d1 = 4L
p = 1024
q = 65
k = 33
a = 178560142600931631240584115657633733324800000000L
b = 42781927108614053464339377755056711787520000000L
a1 = 14658027560051547893249459341930890795724800000000
b1 = 3356871936598035929498410658668533565547520000000L
d = 4L
d1 = 4L
a = 74324341664754173832266046374068861747200000000L
a1 = 12305398136594041752558167072567565335347200000000
d = 1L
d1 = 3L
p = 1089
q = 67
k = 34
a = 12305398136594041752558167072567565335347200000000
b = 3356871936598035929498410658668533565547520000000L
a1 = 90540088322471809272473491836338786791096320000000
b1 = 27149993837334911149905909650604850802829312000000
d = 3L
d1 = 3L
a = 22347823267999339640629350965619646387046400000000
a1 = 90901068104670758227557628845242343826083840000000
d = 6L
d1 = 3L
p = 1156
q = 69
k = 35
a = 90901068104670758227557628845242343826083840000000
b = 27149993837334911149905909650604850802829312000000
a1 = 88555820690030059801582293619473528463423488000000
b1 = 22614039706468418227935240380338171855725158400000
d = 3L
d1 = 3L
a = 94510865926660247778398998934277914175959040000000
a1 = 20713701570624805117776572478459012896248012800000
d = 3L
d1 = 9L
p = 1225
q = 71
k = 36
a = 20713701570624805117776572478459012896248012800000
b = 22614039706468418227935240380338171855725158400000
a1 = 15864486222745199668906754196650803604991587328000
b1 = 19381842436666103557697494602239196240911453184000
d = 9L
d1 = 8L
p = 1296
q = 73
k = 37
a = 15864486222745199668906754196650803604991587328000
b = 19381842436666103557697494602239196240911453184000
a1 = 14265570666156970501565774356763374702997601208320
b1 = 17079524524724562599459578212926440328367341352960
d = 8L
d1 = 8L
a = 35901227341231682274875851485944661226242478080000
a1 = 60195104637732042199811178642222244030372812595200
d = 1L
d1 = 3L
p = 1369
q = 75
k = 38
a = 60195104637732042199811178642222244030372812595200
b = 17079524524724562599459578212926440328367341352960
a1 = 50061206501313648953288888050092507144652204695552
b1 = 15463017623123011526643470670741376211656283955609
d = 3L
d1 = 3L
a = 89565310635583544014324440034429230452707885363200
a1 = 36721536319446143733584760378683785096833528287232
d = 5L
d1 = 2L
p = 1444
q = 77
k = 39
a = 36721536319446143733584760378683785096833528287232
b = 15463017623123011526643470670741376211656283955609
a1 = 41208813821751794430528714632558095401932835427614
b1 = 14372806911174945714877435510417437666391582737186
d = 2L
d1 = 2L
a = 57955010732001206802978190372010326735209603760128
a1 = 12463199999401903000773843611723220069149669953241
d = 3L
d1 = 8L
p = 1521
q = 79
k = 40
a = 12463199999401903000773843611723220069149669953241
b = 14372806911174945714877435510417437666391582737186
a1 = 10727423712761241726084634728819620924270777336252
b1 = 13706442440305217167955645942249539078242271152025
d = 8L
d1 = 7L
p = 1600
q = 81
k = 41
a = 10727423712761241726084634728819620924270777336252
b = 13706442440305217167955645942249539078242271152025
a1 = 10683325207240910278252369108219608159723276834882
b1 = 13401867482435217220424462894888916679998892871090
d = 7L
d1 = 7L
a = 11329140045475897085156825692449435695011875298339
a1 = 13020179695362582239552450817973664837240518251191
d = 8L
d1 = 9L
p = 1681
q = 83
k = 42
a = 13020179695362582239552450817973664837240518251191
b = 13401867482435217220424462894888916679998892871090
a1 = 12711177588795441558843396577818891955241126386139
b1 = 13427602984636537298885648285649948363451606863660
d = 9L
d1 = 9L
a = 95849896117088674117043421257363982524151466720973
a1 = 62633490262255798984631312073393842813468020884495
d = 7L
d1 = 4L
p = 1764
q = 85
k = 43
a = 62633490262255798984631312073393842813468020884495
b = 13427602984636537298885648285649948363451606863660
a1 = 70146388397971871251183074772183772908708136481400
b1 = 13777551960842629021735676297460861011285670536572
d = 4L
d1 = 5L
p = 1849
q = 87
k = 44
a = 70146388397971871251183074772183772908708136481400
b = 13777551960842629021735676297460861011285670536572
a1 = 72608290255726625220787604654170403966786315800361
b1 = 14469233997792382995473994746807624532220735475908
d = 5L
d1 = 5L
a = 12586285937587261425046932848794678522797837985397
a1 = 26212026676471024341763092013228130568263842081821
d = 0L
d1 = 0L
a = 12586285937587261425046932848794678522797837985397
a1 = 26212026676471024341763092013228130568263842081821
d = 9L
d1 = 1L
p = 1936
q = 89
k = 45
a = 26212026676471024341763092013228130568263842081821
b = 14469233997792382995473994746807624532220735475908
a1 = 47695753317228149783060013887039533825891433792550
b1 = 15544952317654353844579882255847208525461360389439
d = 1L
d1 = 3L
p = 2025
q = 91
k = 46
a = 47695753317228149783060013887039533825891433792550
b = 15544952317654353844579882255847208525461360389439
a1 = 48711070920662998731791638769884672221634632772789
b1 = 17075926493618419555151176789049503725944536888261
d = 3L
d1 = 2L
p = 2116
q = 93
k = 47
a = 48711070920662998731791638769884672221634632772789
b = 17075926493618419555151176789049503725944536888261
a1 = 55393717358142065314661722994490310523678835869198
b1 = 19169923549480791459803697499153307789116043164488
d = 2L
d1 = 2L
a = 14559217933426159621489285191785664769745558996267
a1 = 17053870259180482395054327996183694945446749540221
d = 8L
d1 = 8L
a = 89847673853142397736834376054606178898992948565878
a1 = 17179314195958492272113699968610487141539150086314
d = 5L
d1 = 8L
p = 2209
q = 95
k = 48
a = 17179314195958492272113699968610487141539150086314
b = 19169923549480791459803697499153307789116043164488
a1 = 18305083601576483224514686337226213276340946815819
b1 = 21983499534447060766546407576896677772721389204880
d = 8L
d1 = 8L
a = 18433753563738591042707419692878409102463155547241
a1 = 71828397401883461127756027570887105816383545191472
d = 9L
d1 = 3L
p = 2304
q = 97
k = 49
a = 71828397401883461127756027570887105816383545191472
b = 21983499534447060766546407576896677772721389204880
a1 = 11214491369068067105632124171615234721396714921657
b1 = 25740744934214023295888787253394699554152083873832
d = 3L
d1 = 4L
p = 2401
q = 99
k = 50
a = 11214491369068067105632124171615234721396714921657
b = 25740744934214023295888787253394699554152083873832
a1 = 12826946276996608336253225151876081784834116692488
b1 = 30761575723092622352977691840073644891840968583185
d = 4L
d1 = 4L
a = 91819339538245778727660927025735489973588137212447
a1 = 52231598775955939506214841584662382809772925921376
d = 3L
d1 = 1L
p = 2500
q = 101
k = 51
a = 52231598775955939506214841584662382809772925921376
b = 30761575723092622352977691840073644891840968583185
a1 = 75708749648276943583192221756942879131267689483701
b1 = 37504377713877054400479665571823056229297399237475
d = 1L
d1 = 2L
p = 2601
q = 103
k = 52
a = 75708749648276943583192221756942879131267689483701
b = 37504377713877054400479665571823056229297399237475
a1 = 91565450979351391756254468705821851274027658200362
b1 = 46630594890869757106503553186580902952544157143086
d = 2L
d1 = 1L
p = 2704
q = 105
k = 53
a = 91565450979351391756254468705821851274027658200362
b = 46630594890869757106503553186580902952544157143086
a1 = 11661536943321304688896236890419029835482382434677
b1 = 59103308369245600471718432416530902504573381754054
d = 1L
d1 = 1L
a = 44934856088481634649750915519240948321483501057276
a1 = 57512061063967446417243936487659395850250442592719
d = 9L
d1 = 9L
a = 29673206866988532538977176513181356641937596284980
a1 = 43190835316464059926973473127815835961343990140704
d = 6L
d1 = 7L
p = 2809
q = 107
k = 54
a = 43190835316464059926973473127815835961343990140704
b = 59103308369245600471718432416530902504573381754054
a1 = 54549397597553622912060305129315587559358340247004
b1 = 76339074059938107275955570775798641319263172218331
d = 7L
d1 = 7L
a = 18185194579921395967705704362442042081426229128659
a1 = 11120457555969478188914055862565386358741196941725
d = 3L
d1 = 1L
p = 2916
q = 109
k = 55
a = 11120457555969478188914055862565386358741196941725
b = 76339074059938107275955570775798641319263172218331
a1 = 17424101475511810290099304282284370601971793080398
b1 = 10044411544580455402834466703828093020833045583746
d = 1L
d1 = 1L
a = 34865501499756674613184987849855222268148797198927
a1 = 73796899309313548872648375784562775811387474966520
d = 4L
d1 = 7L
p = 3025
q = 111
k = 56
a = 73796899309313548872648375784562775811387474966520
b = 10044411544580455402834466703828093020833045583746
a1 = 92461372437014433319128155945445885886755108365513
b1 = 13458553804797433242243914057217092153032391557562
d = 7L
d1 = 6L
p = 3136
q = 113
k = 57
a = 92461372437014433319128155945445885886755108365513
b = 13458553804797433242243914057217092153032391557562
a1 = 12762405847722703857707734686439273754648438460253
b1 = 18358093259801530378064511642975804104259845555108
d = 6L
d1 = 6L
a = 11710049608229833865664671602143332968560759020135
a1 = 17475498918417856308690277006537912920925311271876
d = 8L
d1 = 9L
p = 3249
q = 115
k = 58
a = 17475498918417856308690277006537912920925311271876
b = 18358093259801530378064511642975804104259845555108
a1 = 23901418873894407777948270361054968740549498568300
b1 = 25484491379950445995179236066612007960419046405427
d = 9L
d1 = 9L
a = 95321498459647896843221652785968922709145027227869
a1 = 96537663193900638228695790110416157617235680341553
d = 5L
d1 = 3L
p = 3364
q = 117
k = 59
a = 96537663193900638228695790110416157617235680341553
b = 25484491379950445995179236066612007960419046405427
a1 = 14501521801868929922563383842638685001152213315907
b1 = 35992517487139256633540607914633109814363296339088
d = 3L
d1 = 4L
p = 3481
q = 119
k = 60
a = 14501521801868929922563383842638685001152213315907
b = 35992517487139256633540607914633109814363296339088
a1 = 20617287000003707824591327226483621598027107878619
b1 = 51702247259056465644835215493201040650114192697245
d = 4L
d1 = 3L
p = 3600
q = 121
k = 61
a = 20617287000003707824591327226483621598027107878619
b = 51702247259056465644835215493201040650114192697245
a1 = 30167465118677301239878324127395108734027597326855
b1 = 75517025478828455818325229596041178719808959845738
d = 3L
d1 = 3L
a = 51066128222867681311407625785233094029928500694455
a1 = 75123574750287644943807552485827551180849093731341
d = 9L
d1 = 9L
a = 45341056897168622310559318413521574448257272669349
a1 = 71582518193420347073148458493904903330210298701765
d = 8L
d1 = 9L
p = 3721
q = 123
k = 62
a = 71582518193420347073148458493904903330210298701765
b = 75517025478828455818325229596041178719808959845738
a1 = 10491790464934347126173172632917440894835519856343
b1 = 11212434754405391152298321608815075705127251171290
d = 9L
d1 = 9L
a = 36171952624747368366557518574678424823822348406004
a1 = 40059918596949508910468318498387276022099380218229
d = 4L
d1 = 3L
p = 3844
q = 125
k = 63
a = 40059918596949508910468318498387276022099380218229
b = 11212434754405391152298321608815075705127251171290
a1 = 63979396835139774538190108263090481529901536000055
b1 = 16918417902412904782029323836690667541398520380583
d = 3L
d1 = 3L
a = 64226143337333354535733536719420489067176267043588
a1 = 13224143127901060192102136753018478905705974858306
d = 5L
d1 = 7L
p = 3969
q = 127
k = 64
a = 13224143127901060192102136753018478905705974858306
b = 16918417902412904782029323836690667541398520380583
a1 = 19343797401493107285492977748727267421322814109008
b1 = 25936606090087888821524445119135851324941126873225
d = 7L
d1 = 7L
a = 13812505962120268446816100673350116267270105918979
a1 = 11881731384315851104258661653321714938640252977508
d = 8L
d1 = 4L
p = 4096
q = 129
k = 65
a = 11881731384315851104258661653321714938640252977508
b = 25936606090087888821524445119135851324941126873225
a1 = 20985035927851909880309548368589219893919761725400
b1 = 40388005829041702378485745247193745634130887614347
d = 4L
d1 = 5L
p = 4225
q = 131
k = 66
a = 20985035927851909880309548368589219893919761725400
b = 40388005829041702378485745247193745634130887614347
a1 = 32510428575359449034754792911380302622610394743271
b1 = 63866503709106763142910404336658703965499088878733
d = 5L
d1 = 5L
a = 79103301333105869106667574499234707685431791822641
a1 = 57717672080606746329959074305095063986085030390512
d = 1L
d1 = 0L
p = 4356
q = 133
k = 67
a = 57717672080606746329959074305095063986085030390512
b = 63866503709106763142910404336658703965499088878733
a1 = 11122190192790788920170996427764307376926717893732
b1 = 10253546527224256053613922839743367187234120285352
d = 0L
d1 = 1L
p = 4489
q = 135
k = 68
a = 11122190192790788920170996427764307376926717893732
b = 10253546527224256053613922839743367187234120285352
a1 = 17605903059966001884982708023037532381186426170768
b1 = 16709255163254548269864043884326154923777316484992
d = 1L
d1 = 1L
a = 86864366556653286655707358802094018969259760837983
a1 = 89664789671145361511866413871137745740910968577651
d = 0L
d1 = 0L
a = 86864366556653286655707358802094018969259760837983
a1 = 89664789671145361511866413871137745740910968577651
d = 8L
d1 = 5L
p = 4624
q = 137
k = 69
a = 89664789671145361511866413871137745740910968577651
b = 16709255163254548269864043884326154923777316484992
a1 = 16300684494526562502085606971354698603643374036286
b1 = 27632919487847227128904818042624165232951980804386
d = 5L
d1 = 5L
a = 61185138548726201625461944495069711220243861526903
a1 = 24842247506029489376331979500426159871673836340934
d = 3L
d1 = 8L
p = 4761
q = 139
k = 70
a = 24842247506029489376331979500426159871673836340934
b = 27632919487847227128904818042624165232951980804386
a1 = 37443748479685844692489694683002631172822442761194
b1 = 46365034471333136140459968372575272033013633696602
d = 8L
d1 = 8L
a = 27359119157517076732081250663268276853122516974251
a1 = 35172090261933578012171998494241354641153580391294
d = 9L
d1 = 0L
p = 4900
q = 141
k = 71
a = 35172090261933578012171998494241354641153580391294
b = 46365034471333136140459968372575272033013633696602
a1 = 18365233114116002098436064612689486662432688152555
b1 = 78914829153624863251211916246216974530695694106358
d = 0L
d1 = 2L
p = 5041
q = 143
k = 72
a = 18365233114116002098436064612689486662432688152555
b = 78914829153624863251211916246216974530695694106358
a1 = 28035308423289954668357162840240672614739296045679
b1 = 13622081956668258837763891028870546821073701531854
d = 2L
d1 = 2L
a = 25822672833910294481936813634460917562935493312840
a1 = 79114450995343699282938078249957897259189298196993
d = 3L
d1 = 0L
p = 5184
q = 145
k = 73
a = 79114450995343699282938078249957897259189298196993
b = 13622081956668258837763891028870546821073701531854
a1 = 24858068991423933055462065534348434767208207971940
b1 = 23842963580492888225700467730066180850228132003663
d = 0L
d1 = 1L
p = 5329
q = 147
k = 74
a = 24858068991423933055462065534348434767208207971940
b = 23842963580492888225700467730066180850228132003663
a1 = 40757370510935047326317006525432455452738263419670
b1 = 42308363938033060826424065092482400250785529591710
d = 1L
d1 = 0L
p = 5476
q = 149
k = 75
a = 40757370510935047326317006525432455452738263419670
b = 42308363938033060826424065092482400250785529591710
a1 = 74340760640996966257383366809503561503103227180743
b1 = 76095869124347166223765433116783017007255364176854
d = 0L
d1 = 0L
a = 40757370510935047326317006525432455452738263419670
a1 = 74340760640996966257383366809503561503103227180743
d = 9L
d1 = 9L
a = 26798429667052925825353479421982952270312867871308
a1 = 58544784290845166559944770043988461965733994215742
d = 6L
d1 = 7L
p = 5625
q = 151
k = 76
a = 58544784290845166559944770043988461965733994215742
b = 76095869124347166223765433116783017007255364176854
a1 = 10347674096689347228227793494128798822030931944338
b1 = 13870321709290781771274934062086370582202246030238
d = 7L
d1 = 7L
a = 52776759038021502033089668622403500606552392919439
a1 = 63844890018579998833533965066833941448935972317105
d = 6L
d1 = 4L
p = 5776
q = 153
k = 77
a = 63844890018579998833533965066833941448935972317105
b = 13870321709290781771274934062086370582202246030238
a1 = 12816653774878861778961955914855619236721669979543
b1 = 25616889615837188431135340531817534053108506261120
d = 4L
d1 = 5L
p = 5929
q = 155
k = 78
a = 12816653774878861778961955914855619236721669979543
b = 25616889615837188431135340531817534053108506261120
a1 = 23651176880263843888231260456838794205426002266974
b1 = 47929892645986146580448686229728186900505896376065
d = 5L
d1 = 4L
p = 6084
q = 157
k = 79
a = 23651176880263843888231260456838794205426002266974
b = 47929892645986146580448686229728186900505896376065
a1 = 44929999858650534410843532895835065646140287574703
b1 = 90835247096473595572807178560231041151705472519688
d = 4L
d1 = 4L
a = 44792198218693852560517859649475194452236437165480
a1 = 85959010200610961817206614717426491854580985668287
d = 9L
d1 = 9L
a = 16552948373063206381140420427198262417811304270220
a1 = 42072878137847258016801540132185548180460604005678
d = 3L
d1 = 4L
p = 6241
q = 159
k = 80
a = 42072878137847258016801540132185548180460604005678
b = 90835247096473595572807178560231041151705472519688
a1 = 77226571318805887349184185198789457181888395364073
b1 = 17434108888375297104162143898674071687581743123460
d = 4L
d1 = 4L
a = 57387792992578197876786687080931317197784149978032
a1 = 74901357653046989325356096040931704315614228702309
d = 6L
d1 = 4L
p = 6400
q = 161
k = 81
a = 74901357653046989325356096040931704315614228702309
b = 17434108888375297104162143898674071687581743123460
a1 = 15731937333665569945496679435769608695472076419665
b1 = 33882371124458538454360711104720042050715756670031
d = 4L
d1 = 4L
a = 51649220995458009087075204462354175652872562084666
a1 = 21789888838821545637523949938815918751857737516531
d = 2L
d1 = 6L
p = 6561
q = 163
k = 82
a = 21789888838821545637523949938815918751857737516531
b = 33882371124458538454360711104720042050715756670031
a1 = 38906224196791119365367042565045005030113080950321
b1 = 66666783774530450110648741712613726976889065035454
d = 6L
d1 = 5L
p = 6724
q = 165
k = 83
a = 38906224196791119365367042565045005030113080950321
b = 66666783774530450110648741712613726976889065035454
a1 = 78846791179928954239526724171184082068435726274146
b1 = 13278269957206116393928256597262640578676823209342
d = 5L
d1 = 5L
a = 55728323095258943100426717087381415416685484325944
a1 = 12455441393898372269885441184870879175051610227432
d = 8L
d1 = 9L
p = 6889
q = 167
k = 84
a = 12455441393898372269885441184870879175051610227432
b = 13278269957206116393928256597262640578676823209342
a1 = 24639711305842670280897083318884073930391652095026
b1 = 26767385562761617085982780334010569417828182449895
d = 9L
d1 = 9L
a = 50499843241286751535001024733450265424246933902356
a1 = 54906429935721490351258101827456145434628789012050
d = 3L
d1 = 2L
p = 7056
q = 169
k = 85
a = 54906429935721490351258101827456145434628789012050
b = 26767385562761617085982780334010569417828182449895
a1 = 12842455598242125057672291514032339306787128999186
b1 = 54606028882871768602866676619506381508443994796834
d = 2L
d1 = 2L
a = 13716588101982561792925411594350065989724241122604
a1 = 19212498216677713370989561901310630050983300398198
d = 0L
d1 = 3L
p = 7225
q = 171
k = 86
a = 19212498216677713370989561901310630050983300398198
b = 54606028882871768602866676619506381508443994796834
a1 = 33844395440887129953931011838932969654939020102027
b1 = 11271574545880599265552457581067854878382009292263
d = 3L
d1 = 3L
a = 28306895518161827901295589154587155984501019591478
a1 = 29671803245332157273639095729405019792992225236235
d = 5L
d1 = 0L
p = 7396
q = 173
k = 87
a = 29671803245332157273639095729405019792992225236235
b = 11271574545880599265552457581067854878382009292263
a1 = 21449102121376734236632174094851367408555719586444
b1 = 23538485860550632735273771018026080915965393930790
d = 0L
d1 = 0L
a = 29671803245332157273639095729405019792992225236235
a1 = 21449102121376734236632174094851367408555719586444
d = 0L
d1 = 9L
p = 7569
q = 175
k = 88
a = 21449102121376734236632174094851367408555719586444
b = 23538485860550632735273771018026080915965393930790
a1 = 37760514591173204012510478981565759559785667429090
b1 = 49723805029740632870825754424655900960386782212197
d = 9L
d1 = 7L
p = 7744
q = 177
k = 89
a = 37760514591173204012510478981565759559785667429090
b = 49723805029740632870825754424655900960386782212197
a1 = 83446295509170714094991503416424293342006180597232
b1 = 10623933835305133017155759360800034176120820557559
d = 7L
d1 = 7L
a = 29538510703547610029324508843066288875149198805524
a1 = 90787586620347829749011878908240541091604366943175
d = 5L
d1 = 8L
p = 7921
q = 179
k = 90
a = 90787586620347829749011878908240541091604366943175
b = 10623933835305133017155759360800034176120820557559
a1 = 18590723437870267715495920670034337597197749720213
b1 = 22955464161601943630406917263809055090328505817059
d = 8L
d1 = 8L
a = 57961159379067656117658040218402676826378024827010
a1 = 22635210858871281117038685898709352493494506656657
d = 5L
d1 = 0L
p = 8100
q = 181
k = 91
a = 22635210858871281117038685898709352493494506656657
b = 22955464161601943630406917263809055090328505817059
a1 = 87918270751601820277143034053570096242591257158429
b1 = 50154776539096675714932685329742417396152460180500
d = 0L
d1 = 1L
p = 8281
q = 183
k = 92
a = 87918270751601820277143034053570096242591257158429
b = 50154776539096675714932685329742417396152460180500
a1 = 17963465358766263900019148811075449092380480156230
b1 = 11079266093876948607866678233958890235526003779742
d = 1L
d1 = 1L
a = 37763494212505144562210348723827678846438796977928
a1 = 68841992648893152921524705771165588568544763764881
d = 7L
d1 = 6L
p = 8464
q = 185
k = 93
a = 68841992648893152921524705771165588568544763764881
b = 11079266093876948607866678233958890235526003779742
a1 = 15932070790191668726227554483650408622743361072714
b1 = 24741742559941497557065257219133345144133451222200
d = 6L
d1 = 6L
a = 23663960856314612743246363674122471553887410864282
a1 = 10870252542267701919884001521704015362632903393946
d = 2L
d1 = 4L
p = 8649
q = 187
k = 94
a = 10870252542267701919884001521704015362632903393946
b = 24741742559941497557065257219133345144133451222200
a1 = 22374068228503253446346460839761361292819251512330
b1 = 55849515831684773282655921004330399584235994454614
d = 4L
d1 = 4L
a = 97355551829110289705789863405067730497952290506576
a1 = 34261895829344133284092438029201459124853730485134
d = 3L
d1 = 0L
p = 8836
q = 189
k = 95
a = 34261895829344133284092438029201459124853730485134
b = 55849515831684773282655921004330399584235994454614
a1 = 92498863907947893174729394092236922442587998953301
b1 = 12741738864784852874564255197701067898356234701915
d = 0L
d1 = 0L
a = 34261895829344133284092438029201459124853730485134
a1 = 92498863907947893174729394092236922442587998953301
d = 0L
d1 = 7L
p = 9025
q = 191
k = 96
a = 92498863907947893174729394092236922442587998953301
b = 12741738864784852874564255197701067898356234701915
a1 = 17976496616277878399262248524830795355136112717708
b1 = 29377140035548619779177424298249858248337706780187
d = 7L
d1 = 6L
p = 9216
q = 193
k = 97
a = 17976496616277878399262248524830795355136112717708
b = 29377140035548619779177424298249858248337706780187
a1 = 43219333767172783145559200612463989807721607528714
b1 = 68440666806394556583010846485823530594416879987048
d = 6L
d1 = 6L
a = 35021259494870653175579394588088040613348864959612
a1 = 21549336833360491957526927209698714510714795364854
d = 1L
d1 = 3L
p = 9409
q = 195
k = 98
a = 21549336833360491957526927209698714510714795364854
b = 68440666806394556583010846485823530594416879987048
a1 = 45316357130925339074467773295705697037203845665516
b1 = 16110025133191708168709918916957917628497386428422
d = 3L
d1 = 2L
p = 9604
q = 197
k = 99
a = 45316357130925339074467773295705697037203845665516
b = 16110025133191708168709918916957917628497386428422
a1 = 10996920664268233445271037428473486857938206542947
b1 = 38309791152473798306590901962905589606427648417948
d = 2L
d1 = 2L
a = 13096306864541922737047935461789861780209072808671
a1 = 33349624337734737839528570358923689366526768593578
d = 8L
d1 = 8L
a = 20828675798855620208000032822352767741116366593414
a1 = 27017914157556991942558487885992176813846498592195
d = 1L
d1 = 7L
p = 9801
q = 199
k = 100
a = 27017914157556991942558487885992176813846498592195
b = 38309791152473798306590901962905589606427648417948
a1 = 55807067688584253302277474110043226625861347288290
b1 = 92025920026464051806268486436692578384481308790213
d = 7L
d1 = 6L
p = 10000
q = 201
k = 101
a = 55807067688584253302277474110043226625861347288290
b = 92025920026464051806268486436692578384481308790213
a1 = 13919012021161134108013621084717906233182780664165
b1 = 22328189040566654243719055970065767215923507908627
d = 6L
d1 = 6L
a = 59151567270582221851638224802767959517256201416202
a1 = 52209859682114156178218750267844590362867591898925
d = 0L
d1 = 2L
p = 10201
q = 203
k = 102
a = 52209859682114156178218750267844590362867591898925
b = 22328189040566654243719055970065767215923507908627
a1 = 11202006653196382949286967835585487798697651666128
b1 = 54713787854249906039507131920640517369325659364203
d = 2L
d1 = 2L
a = 75534816009808476907806383277130559310205760816698
a1 = 25924908234640174138554145145738432483251979328773
d = 3L
d1 = 0L
p = 10404
q = 205
k = 103
a = 25924908234640174138554145145738432483251979328773
b = 54713787854249906039507131920640517369325659364203
a1 = 13173248445761709635891775871029042049700463117767
b1 = 13539351297901785445615492626856948481856441932475
d = 0L
d1 = 0L
a = 25924908234640174138554145145738432483251979328773
a1 = 13173248445761709635891775871029042049700463117767
d = 4L
d1 = 9L
p = 10609
q = 207
k = 104
a = 13173248445761709635891775871029042049700463117767
b = 13539351297901785445615492626856948481856441932475
a1 = 30018997797339715020655185311541507345028161140769
b1 = 33831042940114068404155381363054635845154594002172
d = 9L
d1 = 8L
p = 10816
q = 209
k = 105
a = 30018997797339715020655185311541507345028161140769
b = 33831042940114068404155381363054635845154594002172
a1 = 76987890915375869535349882083226762232064877692385
b1 = 85351042108648974102662463873992664394349029058705
d = 8L
d1 = 9L
p = 11025
q = 211
k = 106
a = 76987890915375869535349882083226762232064877692385
b = 85351042108648974102662463873992664394349029058705
a1 = 19554039490301012052986059300158298015755043958863
b1 = 21738942369072509577219910672689225789135939120126
d = 9L
d1 = 8L
p = 11236
q = 213
k = 107
a = 19554039490301012052986059300158298015755043958863
b = 21738942369072509577219910672689225789135939120126
a1 = 50300463537592788373852219060208533777953053289894
b1 = 55893990337452244129653564173709866702208607230905
d = 8L
d1 = 8L
a = 21628855950430043912101307620069173844462926627618
a1 = 55852712676309930701293677212406404161861675051702
d = 9L
d1 = 9L
a = 20638078182647852926033880146488706342405814195049
a1 = 55481213726029109846054694560675241298739285438874
d = 9L
d1 = 9L
a = 10730300504825943065359605410684031321834689869361
a1 = 51766224223220901293664868043363612667515389310591
d = 4L
d1 = 9L
p = 11449
q = 215
k = 108
a = 51766224223220901293664868043363612667515389310591
b = 55893990337452244129653564173709866702208607230905
a1 = 12358250312790015999690967852792391469552662344920
b1 = 14506099434387344109371423870263810801573024224507
d = 9L
d1 = 8L
p = 11664
q = 217
k = 109
a = 12358250312790015999690967852792391469552662344920
b = 14506099434387344109371423870263810801573024224507
a1 = 32855415572150820646222470449137421270468272297664
b1 = 37997710805580966472618781523693988291559074514595
d = 8L
d1 = 8L
a = 75337076528014071219382875658134282829424296531396
a1 = 24572469276860474681274452301822306372210126859884
d = 5L
d1 = 6L
p = 11881
q = 219
k = 110
a = 24572469276860474681274452301822306372210126859884
b = 37997710805580966472618781523693988291559074514595
a1 = 62764505778617791353565929997933785098104078494042
b1 = 10044968340221792011137932023715026797186328326810
d = 6L
d1 = 6L
a = 17738427935118947977031833876059133972746821511274
a1 = 24946957372870392867383378556436243149861085331816
d = 4L
d1 = 2L
p = 12100
q = 221
k = 111
a = 24946957372870392867383378556436243149861085331816
b = 10044968340221792011137932023715026797186328326810
a1 = 76596273595537495289125785599755649468216652611955
b1 = 26797103039365457287801702336777181805060433618516
d = 2L
d1 = 2L
a = 48570206924268088451075145090061895554884286781959
a1 = 23002067516806580713522380926201285858095785374923
d = 4L
d1 = 8L
p = 12321
q = 223
k = 112
a = 23002067516806580713522380926201285858095785374923
b = 26797103039365457287801702336777181805060433618516
a1 = 57278945757617746169211878091975393614870894360483
b1 = 72133945269772239688720842257432399942098042100754
d = 8L
d1 = 7L
p = 12544
q = 225
k = 113
a = 57278945757617746169211878091975393614870894360483
b = 72133945269772239688720842257432399942098042100754
a1 = 15773142144772210372776920034077152861385486548539
b1 = 19591566290956756892144035049047619672598840265776
d = 7L
d1 = 8L
p = 12769
q = 227
k = 114
a = 15773142144772210372776920034077152861385486548539
b = 19591566290956756892144035049047619672598840265776
a1 = 43118981252423127554550273190919475006027918966074
b1 = 53683638951969055431019723909189639805405866399157
d = 8L
d1 = 8L
a = 99889112006804859061691994839057123306414335918037
a1 = 17207009084788320973449406356776316170322584674784
d = 0L
d1 = 0L
a = 99889112006804859061691994839057123306414335918037
a1 = 17207009084788320973449406356776316170322584674784
d = 5L
d1 = 3L
p = 12996
q = 229
k = 115
a = 17207009084788320973449406356776316170322584674784
b = 53683638951969055431019723909189639805405866399157
a1 = 52385639800569614512856632206301627774940326001165
b1 = 14839673275173653819406555570178656168088888686347
d = 3L
d1 = 3L
a = 11019173991976043441434891840194242287008247550374
a1 = 78666199750486530546369654957656592706736599421229
d = 2L
d1 = 5L
p = 13225
q = 231
k = 116
a = 78666199750486530546369654957656592706736599421229
b = 14839673275173653819406555570178656168088888686347
a1 = 19629177902801220301341154741084361457712995204840
b1 = 41379306517049047903581501854103025612550258696751
d = 5L
d1 = 4L
p = 13456
q = 233
k = 117
a = 19629177902801220301341154741084361457712995204840
b = 41379306517049047903581501854103025612550258696751
a1 = 56321308351952310852444391317828833311089755645399
b1 = 11638204854379795019473836049529244941702251137977
d = 4L
d1 = 4L
a = 30774552959816011399085539994431512126928917261404
a1 = 97684889344331307745490471197118535442807510934881
d = 7L
d1 = 8L
p = 13689
q = 235
k = 118
a = 97684889344331307745490471197118535442807510934881
b = 11638204854379795019473836049529244941702251137977
a1 = 27168677550587071120611080301160585524115064553610
b1 = 33014194676911362463284786505201888789102295087246
d = 8L
d1 = 8L
a = 45792505092929475896997828008845759091895018310576
a1 = 75732180905798114998325109699907449283322848381354
d = 3L
d1 = 2L
p = 13924
q = 237
k = 119
a = 75732180905798114998325109699907449283322848381354
b = 33014194676911362463284786505201888789102295087246
a1 = 24324675283813653478501028570829748976102977415945
b1 = 94448677823518355623100313332692997086998653841294
d = 2L
d1 = 2L
a = 97037915519753900717555366895036717051182582068614
a1 = 54349397191099823538809659042911495587032466476867
d = 2L
d1 = 5L
p = 14161
q = 239
k = 120
a = 54349397191099823538809659042911495587032466476867
b = 94448677823518355623100313332692997086998653841294
a1 = 14363659850348092813836810061856462395462556032644
b1 = 27248374108018305032346733503515265775217454275374
d = 5L
d1 = 5L
a = 71250582793406457272595023765649970435331395562198
a1 = 73947279633894029766344331009882950785382889495769
d = 7L
d1 = 2L
p = 14400
q = 241
k = 121
a = 73947279633894029766344331009882950785382889495769
b = 27248374108018305032346733503515265775217454275374
a1 = 28081378314018991020942667195635386881964997329436
b1 = 79269191206910758337682072863379582098801870956798
d = 2L
d1 = 3L
p = 14641
q = 243
k = 122
a = 28081378314018991020942667195635386881964997329436
b = 79269191206910758337682072863379582098801870956798
a1 = 79064370514264573078981154788550952947662852361607
b1 = 23251847916434274315842628958050908512158442122959
d = 3L
d1 = 3L
a = 43006209519457635196380453366215122523244360423973
a1 = 93088267649617501314532679143982274111875259927285
d = 5L
d1 = 4L
p = 14884
q = 245
k = 123
a = 93088267649617501314532679143982274111875259927285
b = 23251847916434274315842628958050908512158442122959
a1 = 29207669799032362244689773069303115993769129287689
b1 = 68765453814500569344795040672210142854373853674461
d = 4L
d1 = 4L
a = 80875983880404051162163311778640063241491435446970
a1 = 17014882732321345067717568004190588520195878179047
d = 0L
d1 = 2L
p = 15129
q = 247
k = 124
a = 17014882732321345067717568004190588520195878179047
b = 68765453814500569344795040672210142854373853674461
a1 = 42149117624846385606265629844740658196561871494936
b1 = 20502839163458981989408206381099427233834792566374
d = 2L
d1 = 2L
a = 32617919694212311987585598697485599493211074441557
a1 = 11434392979284216274492170825418037288922863621872
d = 4L
d1 = 0L
p = 15376
q = 249
k = 125
a = 11434392979284216274492170825418037288922863621872
b = 20502839163458981989408206381099427233834792566374
a1 = 78624951840238549435597121912544770630179278479802
b1 = 61625445695530472696082119342696605377537157231257
d = 0L
d1 = 1L
p = 15625
q = 251
k = 126
a = 78624951840238549435597121912544770630179278479802
b = 61625445695530472696082119342696605377537157231257
a1 = 21521486814913034701224279291520305754569196339348
b1 = 18671555488868614582561644202063633455048512803541
d = 1L
d1 = 1L
a = 16999506144708076739515002569848165252642121248544
a1 = 28499313260444201186626350894566722995206835358064
d = 2L
d1 = 1L
p = 15876
q = 253
k = 127
a = 28499313260444201186626350894566722995206835358064
b = 18671555488868614582561644202063633455048512803541
a1 = 99091678504262371633818685843144756332967925150092
b1 = 57022691145460012739110957098067505711010536474994
d = 1L
d1 = 1L
a = 98277577715755866040647066925030895401583225545226
a1 = 42068987358802358894707728745077250621957388675097
d = 5L
d1 = 7L
p = 16129
q = 255
k = 128
a = 42068987358802358894707728745077250621957388675097
b = 57022691145460012739110957098067505711010536474994
a1 = 12312710827472027881520067372428522220531269956968
b1 = 17552321426891922094494661653358057396272461431206
d = 7L
d1 = 7L
a = 21531035569803499773300587764299966242500131426014
a1 = 26085828647682415373804215077882043140546955124060
d = 3L
d1 = 0L
p = 16384
q = 257
k = 129
a = 26085828647682415373804215077882043140546955124060
b = 17552321426891922094494661653358057396272461431206
a1 = 41980506640020434779643366268044749778832782795265
b1 = 54452063784384408270027219660077587644112192174264
d = 0L
d1 = 0L
a = 26085828647682415373804215077882043140546955124060
a1 = 41980506640020434779643366268044749778832782795265
d = 1L
d1 = 7L
p = 16641
q = 259
k = 130
a = 41980506640020434779643366268044749778832782795265
b = 54452063784384408270027219660077587644112192174264
a1 = 11307045494291375682163107806534625272619532624193
b1 = 17023966328804646497681906537695409531138758079901
d = 7L
d1 = 6L
p = 16900
q = 261
k = 131
a = 11307045494291375682163107806534625272619532624193
b = 17023966328804646497681906537695409531138758079901
a1 = 36606094362263944008205440274354934674159720441544
b1 = 53634950897741092356584376185938131188127119065994
d = 6L
d1 = 6L
a = 10926656970085877835539638839173795539362777762522
a1 = 44251238236192885942548145627920559612834490019477
d = 6L
d1 = 8L
p = 17161
q = 263
k = 132
a = 44251238236192885942548145627920559612834490019477
b = 53634950897741092356584376185938131188127119065994
a1 = 13513199258755166498247119721333722230685517166948
b1 = 17027474947792072675248882917835637732116154588448
d = 8L
d1 = 7L
p = 17424
q = 265
k = 133
a = 13513199258755166498247119721333722230685517166948
b = 17027474947792072675248882917835637732116154588448
a1 = 43520313785975439666984456155743242218256902033408
b1 = 54468162456071400521620801438902299968327078885447
d = 7L
d1 = 7L
